{"ast":null,"code":"var _jsxFileName = \"M:\\\\i-6\\\\client\\\\src\\\\components\\\\ContentComponents\\\\guildCompetition.js\",\n  _s = $RefreshSig$();\n// filepath: /m:/i-6/client/src/components/ContentComponents/GuildCompetition.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GuildCompetition(_ref) {\n  _s();\n  let {\n    guilds,\n    fetchGuilds\n  } = _ref;\n  const [selectedGuild, setSelectedGuild] = useState(null);\n  const [opponentGuild, setOpponentGuild] = useState(null);\n  const [stake, setStake] = useState(0);\n  const initiateCompetition = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/initiateCompetition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          guildId: selectedGuild,\n          opponentGuildId: opponentGuild,\n          stake\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.error || 'Failed to initiate competition');\n      alert('Competition initiated');\n      fetchGuilds();\n    } catch (error) {\n      console.error('Error initiating competition:', error.message);\n    }\n  };\n  const resolveCompetition = async winnerGuildId => {\n    try {\n      const response = await fetch('http://localhost:8080/api/resolveCompetition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          guildId: selectedGuild,\n          opponentGuildId: opponentGuild,\n          winnerGuildId\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.error || 'Failed to resolve competition');\n      alert('Competition resolved');\n      fetchGuilds();\n    } catch (error) {\n      console.error('Error resolving competition:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guild-competition\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Guild Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Your Guild:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedGuild(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Guild\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), guilds.map(guild => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: guild._id,\n          children: guild.name\n        }, guild._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Opponent Guild:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setOpponentGuild(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Guild\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), guilds.map(guild => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: guild._id,\n          children: guild.name\n        }, guild._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Stake Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: stake,\n        onChange: e => setStake(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initiateCompetition,\n      children: \"Initiate Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => resolveCompetition(selectedGuild),\n      children: \"Resolve Competition (Your Guild Wins)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => resolveCompetition(opponentGuild),\n      children: \"Resolve Competition (Opponent Guild Wins)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(GuildCompetition, \"JED2w056rzC0/OML4dTKJVWcgeY=\");\n_c = GuildCompetition;\nexport default GuildCompetition;\nvar _c;\n$RefreshReg$(_c, \"GuildCompetition\");","map":{"version":3,"names":["React","useState","GuildCompetition","guilds","fetchGuilds","selectedGuild","setSelectedGuild","opponentGuild","setOpponentGuild","stake","setStake","initiateCompetition","response","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","guildId","opponentGuildId","result","json","ok","Error","error","alert","console","message","resolveCompetition","winnerGuildId","e","target","value","map","guild","_id","name"],"sources":["M:/i-6/client/src/components/ContentComponents/guildCompetition.js"],"sourcesContent":["// filepath: /m:/i-6/client/src/components/ContentComponents/GuildCompetition.js\r\nimport React, { useState } from 'react';\r\n\r\nfunction GuildCompetition({ guilds, fetchGuilds }) {\r\n  const [selectedGuild, setSelectedGuild] = useState(null);\r\n  const [opponentGuild, setOpponentGuild] = useState(null);\r\n  const [stake, setStake] = useState(0);\r\n\r\n  const initiateCompetition = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/initiateCompetition', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        body: JSON.stringify({ guildId: selectedGuild, opponentGuildId: opponentGuild, stake }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!response.ok) throw new Error(result.error || 'Failed to initiate competition');\r\n\r\n      alert('Competition initiated');\r\n      fetchGuilds();\r\n    } catch (error) {\r\n      console.error('Error initiating competition:', error.message);\r\n    }\r\n  };\r\n\r\n  const resolveCompetition = async (winnerGuildId) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/resolveCompetition', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        body: JSON.stringify({ guildId: selectedGuild, opponentGuildId: opponentGuild, winnerGuildId }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!response.ok) throw new Error(result.error || 'Failed to resolve competition');\r\n\r\n      alert('Competition resolved');\r\n      fetchGuilds();\r\n    } catch (error) {\r\n      console.error('Error resolving competition:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"guild-competition\">\r\n      <h2>Guild Competition</h2>\r\n      <div>\r\n        <label>Select Your Guild:</label>\r\n        <select onChange={(e) => setSelectedGuild(e.target.value)}>\r\n          <option value=\"\">Select Guild</option>\r\n          {guilds.map((guild) => (\r\n            <option key={guild._id} value={guild._id}>\r\n              {guild.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label>Select Opponent Guild:</label>\r\n        <select onChange={(e) => setOpponentGuild(e.target.value)}>\r\n          <option value=\"\">Select Guild</option>\r\n          {guilds.map((guild) => (\r\n            <option key={guild._id} value={guild._id}>\r\n              {guild.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label>Stake Amount:</label>\r\n        <input type=\"number\" value={stake} onChange={(e) => setStake(e.target.value)} />\r\n      </div>\r\n      <button onClick={initiateCompetition}>Initiate Competition</button>\r\n      <button onClick={() => resolveCompetition(selectedGuild)}>Resolve Competition (Your Guild Wins)</button>\r\n      <button onClick={() => resolveCompetition(opponentGuild)}>Resolve Competition (Opponent Guild Wins)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GuildCompetition;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}