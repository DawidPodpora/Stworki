{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anastasiia\\\\mp\\\\2\\\\MERN_Login_App_with_ResetEmail-Main\\\\client\\\\src\\\\components\\\\ContentComponents\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isBotTyping, setIsBotTyping] = useState(false);\n  const chatRef = useRef(null);\n\n  // Scroll to the bottom when a new message is added\n  useEffect(() => {\n    var _chatRef$current;\n    (_chatRef$current = chatRef.current) === null || _chatRef$current === void 0 ? void 0 : _chatRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const message = {\n        id: Date.now(),\n        text: newMessage,\n        sender: 'me' // or 'other' depending on the sender\n      };\n\n      setMessages(prevMessages => [...prevMessages, message]);\n      setNewMessage('');\n      simulateBotResponse(newMessage); // Simulate bot response\n    }\n  };\n\n  const simulateBotResponse = userMessage => {\n    setIsBotTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        id: Date.now() + 1,\n        text: `Bot: ${generateBotResponse(userMessage)}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsBotTyping(false);\n    }, 2000); // Simulate bot delay\n  };\n\n  const generateBotResponse = userMessage => {\n    const botResponses = [\"I'm here to help!\", \"That's interesting! Tell me more.\", \"Can you explain further?\", \"Let's keep the conversation going!\"];\n    return botResponses[Math.floor(Math.random() * botResponses.length)];\n  };\n  const handleEmoticonClick = emoticon => {\n    setNewMessage(prev => prev + emoticon);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-auto space-y-2 p-5\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-2 max-w-xs rounded-lg ${message.sender === 'me' ? 'ml-auto bg-blue-600 text-white' : message.sender === 'bot' ? 'bg-green-500 text-white' : 'mr-auto bg-gray-700 text-white'}`,\n        children: message.text\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)), isBotTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 max-w-xs bg-gray-600 text-white rounded-lg animate-pulse\",\n        children: \"Bot is typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col bg-gray-900 p-4 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2 mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEmoticonClick('ðŸ˜Š'),\n          className: \"p-2 bg-yellow-500 rounded-full\",\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEmoticonClick('ðŸ˜¢'),\n          className: \"p-2 bg-blue-500 rounded-full\",\n          children: \"\\uD83D\\uDE22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEmoticonClick('ðŸ˜Ž'),\n          className: \"p-2 bg-green-500 rounded-full\",\n          children: \"\\uD83D\\uDE0E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"flex-grow p-2 rounded-l-lg bg-gray-800 text-white border border-gray-700 focus:outline-none\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"GZMCimU4XpPVRHS4E57iEW2drTQ=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chat","messages","setMessages","newMessage","setNewMessage","isBotTyping","setIsBotTyping","chatRef","current","scrollIntoView","behavior","handleSendMessage","trim","message","id","Date","now","text","sender","prevMessages","simulateBotResponse","userMessage","setTimeout","botMessage","generateBotResponse","botResponses","Math","floor","random","length","handleEmoticonClick","emoticon","prev","map","e","target","value","key"],"sources":["C:/Users/anastasiia/mp/2/MERN_Login_App_with_ResetEmail-Main/client/src/components/ContentComponents/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isBotTyping, setIsBotTyping] = useState(false);\n  const chatRef = useRef(null);\n\n  // Scroll to the bottom when a new message is added\n  useEffect(() => {\n    chatRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const message = {\n        id: Date.now(),\n        text: newMessage,\n        sender: 'me', // or 'other' depending on the sender\n      };\n      setMessages((prevMessages) => [...prevMessages, message]);\n      setNewMessage('');\n      simulateBotResponse(newMessage); // Simulate bot response\n    }\n  };\n\n  const simulateBotResponse = (userMessage) => {\n    setIsBotTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        id: Date.now() + 1,\n        text: `Bot: ${generateBotResponse(userMessage)}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n      setIsBotTyping(false);\n    }, 2000); // Simulate bot delay\n  };\n\n  const generateBotResponse = (userMessage) => {\n    const botResponses = [\n      \"I'm here to help!\",\n      \"That's interesting! Tell me more.\",\n      \"Can you explain further?\",\n      \"Let's keep the conversation going!\",\n    ];\n    return botResponses[Math.floor(Math.random() * botResponses.length)];\n  };\n\n  const handleEmoticonClick = (emoticon) => {\n    setNewMessage((prev) => prev + emoticon);\n  };\n\n  return (\n    <>\n      <div className=\"flex-grow overflow-y-auto space-y-2 p-5\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`p-2 max-w-xs rounded-lg ${\n              message.sender === 'me'\n                ? 'ml-auto bg-blue-600 text-white'\n                : message.sender === 'bot'\n                ? 'bg-green-500 text-white'\n                : 'mr-auto bg-gray-700 text-white'\n            }`}\n          >\n            {message.text}\n          </div>\n        ))}\n\n        {isBotTyping && (\n          <div className=\"p-2 max-w-xs bg-gray-600 text-white rounded-lg animate-pulse\">\n            Bot is typing...\n          </div>\n        )}\n\n        <div ref={chatRef} />\n      </div>\n\n      <div className=\"flex flex-col bg-gray-900 p-4 rounded-lg\">\n        {/* Messages Container */}\n        <div className=\"flex space-x-2 mb-2\">\n          {/* Emoticon Buttons */}\n          <button onClick={() => handleEmoticonClick('ðŸ˜Š')} className=\"p-2 bg-yellow-500 rounded-full\">\n            ðŸ˜Š\n          </button>\n          <button onClick={() => handleEmoticonClick('ðŸ˜¢')} className=\"p-2 bg-blue-500 rounded-full\">\n            ðŸ˜¢\n          </button>\n          <button onClick={() => handleEmoticonClick('ðŸ˜Ž')} className=\"p-2 bg-green-500 rounded-full\">\n            ðŸ˜Ž\n          </button>\n        </div>\n\n        {/* Input and Send Button */}\n        <div className=\"mt-4 flex\">\n          <input\n            type=\"text\"\n            className=\"flex-grow p-2 rounded-l-lg bg-gray-800 text-white border border-gray-700 focus:outline-none\"\n            placeholder=\"Type your message...\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <button\n            onClick={handleSendMessage}\n            className=\"bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700\"\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}