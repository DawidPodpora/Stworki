{"ast":null,"code":"/** image onto base64 */\nexport default function convertToBase64(file) {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader(); // Tworzymy nowy obiekt FileReader, który pozwala na odczyt plików\n    fileReader.readAsDataURL(file); // Odczytujemy plik jako URL w formacie base64\n\n    fileReader.onload = () => {\n      // Funkcja wywoływana, gdy odczyt pliku zakończy się sukcesem\n      resolve(fileReader.result); // Zwracamy wynik odczytu (base64 URL) poprzez Promise\n    };\n\n    fileReader.onerror = error => {\n      // Funkcja wywoływana, gdy wystąpi błąd podczas odczytu\n      reject(error); // Odrzucamy Promise z błędem\n    };\n  });\n}","map":{"version":3,"names":["convertToBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error"],"sources":["C:/Users/anastasiia/mp/2/project/client/src/helper/convert.js"],"sourcesContent":["/** image onto base64 */\nexport default function convertToBase64(file){\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();  // Tworzymy nowy obiekt FileReader, który pozwala na odczyt plików\n        fileReader.readAsDataURL(file);  // Odczytujemy plik jako URL w formacie base64\n\n        fileReader.onload = () => {  // Funkcja wywoływana, gdy odczyt pliku zakończy się sukcesem\n            resolve(fileReader.result)  // Zwracamy wynik odczytu (base64 URL) poprzez Promise\n        }\n\n        fileReader.onerror = (error) => {  // Funkcja wywoływana, gdy wystąpi błąd podczas odczytu\n            reject(error)  // Odrzucamy Promise z błędem\n        }\n    })\n}\n"],"mappings":"AAAA;AACA,eAAe,SAASA,eAAe,CAACC,IAAI,EAAC;EACzC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE,CAAC,CAAE;IACtCD,UAAU,CAACE,aAAa,CAACN,IAAI,CAAC,CAAC,CAAE;;IAEjCI,UAAU,CAACG,MAAM,GAAG,MAAM;MAAG;MACzBL,OAAO,CAACE,UAAU,CAACI,MAAM,CAAC,EAAE;IAChC,CAAC;;IAEDJ,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;MAAG;MAC/BP,MAAM,CAACO,KAAK,CAAC,EAAE;IACnB,CAAC;EACL,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}