{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getUsername } from '../helper/helper';\n\n// Ustawienie domyślnego URL dla axios zdefiniowanego w zmiennych środowiskowych\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Niestandardowy hook do pobierania danych z API */\nexport default function useFetch(query) {\n  _s();\n  // Stan do przechowywania danych z API, informacji o ładowaniu oraz błędach\n  const [getData, setData] = useState({\n    isLoading: false,\n    // Flaga informująca, czy dane są w trakcie ładowania\n    apiData: undefined,\n    // Przechowywanie danych z API\n    status: null,\n    // Status odpowiedzi z API\n    serverError: null // Przechowywanie błędów serwera (jeśli wystąpiły)\n  });\n\n  // Efekt uruchamiany po każdej zmianie zapytania 'query'\n  useEffect(() => {\n    // Funkcja do pobierania danych z API\n    const fetchData = async () => {\n      try {\n        // Ustawienie flagi isLoading na true, aby zasygnalizować rozpoczęcie ładowania\n        setData(prev => ({\n          ...prev,\n          isLoading: true\n        }));\n\n        // Jeśli zapytanie 'query' jest puste, pobieramy dane na podstawie nazwy użytkownika\n        const {\n          username\n        } = !query ? await getUsername() : '';\n\n        // Pobieranie danych z API. Jeśli 'query' nie jest puste, używamy tego zapytania,\n        // w przeciwnym przypadku pobieramy dane użytkownika na podstawie 'username'\n        const {\n          data,\n          status\n        } = !query ? await axios.get(`/api/user/${username}`) : await axios.get(`/api/${query}`);\n\n        // Jeśli odpowiedź z serwera ma status 201 (sukces), aktualizujemy stan\n        if (status === 201) {\n          setData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setData(prev => ({\n            ...prev,\n            apiData: data,\n            status: status\n          }));\n        }\n\n        // Jeśli status nie wynosi 201, to nadal wyłączamy ładowanie, ale nie zmieniamy danych\n        setData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n      } catch (error) {\n        // W przypadku błędu ustawiamy flagę ładowania na false oraz zapisujemy błąd serwera\n        setData(prev => ({\n          ...prev,\n          isLoading: false,\n          serverError: error\n        }));\n      }\n    };\n\n    // Wywołanie funkcji fetchData w celu pobrania danych\n    fetchData();\n  }, [query]); // Zależność od zmiennej 'query', efekt uruchomi się, gdy 'query' ulegnie zmianie\n\n  // Zwracamy stan z danymi i funkcję do ich zmiany\n  return [getData, setData];\n}\n_s(useFetch, \"OaBI8B3jEpyKvzC59s/Rj2tboWQ=\");","map":{"version":3,"names":["axios","useEffect","useState","getUsername","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","useFetch","query","getData","setData","isLoading","apiData","undefined","status","serverError","fetchData","prev","username","data","get","error"],"sources":["C:/Users/48664/Downloads/project/project/client/src/hooks/fetch.hook.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getUsername } from '../helper/helper'\n\n// Ustawienie domyślnego URL dla axios zdefiniowanego w zmiennych środowiskowych\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Niestandardowy hook do pobierania danych z API */\nexport default function useFetch(query){\n    // Stan do przechowywania danych z API, informacji o ładowaniu oraz błędach\n    const [getData, setData] = useState({ \n        isLoading: false,   // Flaga informująca, czy dane są w trakcie ładowania\n        apiData: undefined, // Przechowywanie danych z API\n        status: null,       // Status odpowiedzi z API\n        serverError: null   // Przechowywanie błędów serwera (jeśli wystąpiły)\n    });\n\n    // Efekt uruchamiany po każdej zmianie zapytania 'query'\n    useEffect(() => {\n\n        // Funkcja do pobierania danych z API\n        const fetchData = async () => {\n            try {\n                // Ustawienie flagi isLoading na true, aby zasygnalizować rozpoczęcie ładowania\n                setData(prev => ({ ...prev, isLoading: true}));\n\n                // Jeśli zapytanie 'query' jest puste, pobieramy dane na podstawie nazwy użytkownika\n                const { username } = !query ? await getUsername() : '';\n\n                // Pobieranie danych z API. Jeśli 'query' nie jest puste, używamy tego zapytania,\n                // w przeciwnym przypadku pobieramy dane użytkownika na podstawie 'username'\n                const { data, status } = !query ? \n                    await axios.get(`/api/user/${username}`) : \n                    await axios.get(`/api/${query}`);\n\n                // Jeśli odpowiedź z serwera ma status 201 (sukces), aktualizujemy stan\n                if(status === 201){\n                    setData(prev => ({ ...prev, isLoading: false }));\n                    setData(prev => ({ ...prev, apiData: data, status: status }));\n                }\n\n                // Jeśli status nie wynosi 201, to nadal wyłączamy ładowanie, ale nie zmieniamy danych\n                setData(prev => ({ ...prev, isLoading: false }));\n            } catch (error) {\n                // W przypadku błędu ustawiamy flagę ładowania na false oraz zapisujemy błąd serwera\n                setData(prev => ({ ...prev, isLoading: false, serverError: error }));\n            }\n        };\n\n        // Wywołanie funkcji fetchData w celu pobrania danych\n        fetchData();\n\n    }, [query]);  // Zależność od zmiennej 'query', efekt uruchomi się, gdy 'query' ulegnie zmianie\n\n    // Zwracamy stan z danymi i funkcję do ich zmiany\n    return [getData, setData];\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACAH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB;;AAE5D;AACA,eAAe,SAASC,QAAQ,CAACC,KAAK,EAAC;EAAA;EACnC;EACA,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAChCW,SAAS,EAAE,KAAK;IAAI;IACpBC,OAAO,EAAEC,SAAS;IAAE;IACpBC,MAAM,EAAE,IAAI;IAAQ;IACpBC,WAAW,EAAE,IAAI,CAAG;EACxB,CAAC,CAAC;;EAEF;EACAhB,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMiB,SAAS,GAAG,YAAY;MAC1B,IAAI;QACA;QACAN,OAAO,CAACO,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEN,SAAS,EAAE;QAAI,CAAC,CAAC,CAAC;;QAE9C;QACA,MAAM;UAAEO;QAAS,CAAC,GAAG,CAACV,KAAK,GAAG,MAAMP,WAAW,EAAE,GAAG,EAAE;;QAEtD;QACA;QACA,MAAM;UAAEkB,IAAI;UAAEL;QAAO,CAAC,GAAG,CAACN,KAAK,GAC3B,MAAMV,KAAK,CAACsB,GAAG,CAAE,aAAYF,QAAS,EAAC,CAAC,GACxC,MAAMpB,KAAK,CAACsB,GAAG,CAAE,QAAOZ,KAAM,EAAC,CAAC;;QAEpC;QACA,IAAGM,MAAM,KAAK,GAAG,EAAC;UACdJ,OAAO,CAACO,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEN,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UAChDD,OAAO,CAACO,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,OAAO,EAAEO,IAAI;YAAEL,MAAM,EAAEA;UAAO,CAAC,CAAC,CAAC;QACjE;;QAEA;QACAJ,OAAO,CAACO,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEN,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZ;QACAX,OAAO,CAACO,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEN,SAAS,EAAE,KAAK;UAAEI,WAAW,EAAEM;QAAM,CAAC,CAAC,CAAC;MACxE;IACJ,CAAC;;IAED;IACAL,SAAS,EAAE;EAEf,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC,CAAC,CAAE;;EAEd;EACA,OAAO,CAACC,OAAO,EAAEC,OAAO,CAAC;AAC7B;AAAC,GAhDuBH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}