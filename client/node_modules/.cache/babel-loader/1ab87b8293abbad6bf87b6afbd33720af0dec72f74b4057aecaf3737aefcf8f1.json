{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\48664\\\\Desktop\\\\project\\\\client\\\\src\\\\middleware\\\\auth.js\";\nimport { Navigate } from \"react-router-dom\"; // Importujemy komponent Navigate do przekierowania użytkownika\nimport { useAuthStore } from \"../store/store\"; // Importujemy hook do odczytu stanu autentykacji z globalnego stanu aplikacji\n\n/** Komponent do autoryzacji użytkownika na podstawie tokenu */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthorizeUser = _ref => {\n  let {\n    children\n  } = _ref;\n  // Pobieramy token z localStorage (czyli lokalnej pamięci przeglądarki)\n  const token = localStorage.getItem('token');\n\n  // Jeśli token nie istnieje, oznacza to, że użytkownik nie jest zalogowany\n  if (!token) {\n    // Jeśli nie ma tokenu, przekierowujemy użytkownika na stronę główną ('/')\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/',\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Jeśli token istnieje, wyświetlamy dzieci komponentu (czyli przekazany content)\n  return children;\n};\n\n/** Komponent do ochrony dostępu na podstawie nazwy użytkownika w globalnym stanie */\n_c = AuthorizeUser;\nexport const ProtectRoute = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  // Pobieramy nazwę użytkownika z globalnego stanu aplikacji (za pomocą useAuthStore)\n  const username = useAuthStore.getState().auth.username;\n\n  // Jeśli użytkownik nie jest zalogowany (brak username), przekierowujemy go na stronę główną\n  if (!username) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/',\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Jeśli użytkownik jest zalogowany, wyświetlamy dzieci komponentu\n  return children;\n};\n_c2 = ProtectRoute;\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthorizeUser\");\n$RefreshReg$(_c2, \"ProtectRoute\");","map":{"version":3,"names":["Navigate","useAuthStore","AuthorizeUser","children","token","localStorage","getItem","ProtectRoute","username","getState","auth"],"sources":["C:/Users/48664/Desktop/project/client/src/middleware/auth.js"],"sourcesContent":["import { Navigate } from \"react-router-dom\"; // Importujemy komponent Navigate do przekierowania użytkownika\nimport { useAuthStore } from \"../store/store\"; // Importujemy hook do odczytu stanu autentykacji z globalnego stanu aplikacji\n\n/** Komponent do autoryzacji użytkownika na podstawie tokenu */\nexport const AuthorizeUser = ({ children }) => {\n    // Pobieramy token z localStorage (czyli lokalnej pamięci przeglądarki)\n    const token = localStorage.getItem('token');\n\n    // Jeśli token nie istnieje, oznacza to, że użytkownik nie jest zalogowany\n    if(!token){\n        // Jeśli nie ma tokenu, przekierowujemy użytkownika na stronę główną ('/')\n        return <Navigate to={'/'} replace={true}></Navigate>\n    }\n\n    // Jeśli token istnieje, wyświetlamy dzieci komponentu (czyli przekazany content)\n    return children;\n}\n\n/** Komponent do ochrony dostępu na podstawie nazwy użytkownika w globalnym stanie */\nexport const ProtectRoute = ({ children }) => {\n    // Pobieramy nazwę użytkownika z globalnego stanu aplikacji (za pomocą useAuthStore)\n    const username = useAuthStore.getState().auth.username;\n\n    // Jeśli użytkownik nie jest zalogowany (brak username), przekierowujemy go na stronę główną\n    if(!username){\n        return <Navigate to={'/'} replace={true}></Navigate>\n    }\n\n    // Jeśli użytkownik jest zalogowany, wyświetlamy dzieci komponentu\n    return children;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB,CAAC,CAAC;AAC7C,SAASC,YAAY,QAAQ,gBAAgB,CAAC,CAAC;;AAE/C;AAAA;AACA,OAAO,MAAMC,aAAa,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACtC;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAG,CAACF,KAAK,EAAC;IACN;IACA,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAE,GAAI;MAAC,OAAO,EAAE;IAAK;MAAA;MAAA;MAAA;IAAA,QAAY;EACxD;;EAEA;EACA,OAAOD,QAAQ;AACnB,CAAC;;AAED;AAAA,KAdaD,aAAa;AAe1B,OAAO,MAAMK,YAAY,GAAG,SAAkB;EAAA,IAAjB;IAAEJ;EAAS,CAAC;EACrC;EACA,MAAMK,QAAQ,GAAGP,YAAY,CAACQ,QAAQ,EAAE,CAACC,IAAI,CAACF,QAAQ;;EAEtD;EACA,IAAG,CAACA,QAAQ,EAAC;IACT,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAE,GAAI;MAAC,OAAO,EAAE;IAAK;MAAA;MAAA;MAAA;IAAA,QAAY;EACxD;;EAEA;EACA,OAAOL,QAAQ;AACnB,CAAC;AAAA,MAXYI,YAAY;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}