{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\48664\\\\source\\\\repos\\\\DawidPodpora\\\\Stworki\\\\client\\\\src\\\\components\\\\Reset.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport toast, { Toaster } from 'react-hot-toast'; // Biblioteka do obsługi powiadomień\nimport { useFormik } from 'formik'; // Narzędzie do zarządzania formularzami w React\nimport { resetPasswordValidation } from '../helper/validate'; // Funkcja walidująca dane wejściowe formularza\nimport { resetPassword } from '../helper/helper'; // Funkcja wysyłająca żądanie do API, aby zresetować hasło\nimport { useAuthStore } from '../store/store'; // Hook do zarządzania globalnym stanem autoryzacji\nimport { useNavigate, Navigate } from 'react-router-dom'; // Funkcje do nawigacji i przekierowań w React Router\nimport useFetch from '../hooks/fetch.hook'; // Niestandardowy hook do obsługi żądań HTTP\n\nimport styles from '../styles/Username.module.css'; // Import modułu stylów CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Reset() {\n  _s();\n  // Pobranie nazwy użytkownika z globalnego stanu\n  const {\n    username\n  } = useAuthStore(state => state.auth);\n\n  // Hook do nawigacji między stronami\n  const navigate = useNavigate();\n\n  // Wywołanie niestandardowego hooka do stworzenia sesji resetowania hasła\n  const [{\n    isLoading,\n    status,\n    serverError\n  }] = useFetch('createResetSession');\n\n  // Konfiguracja formularza przy użyciu Formik\n  const formik = useFormik({\n    initialValues: {\n      // Domyślne wartości pól formularza\n      password: '',\n      // Pole dla nowego hasła\n      confirm_pwd: '' // Pole do potwierdzenia nowego hasła\n    },\n\n    validate: resetPasswordValidation,\n    // Funkcja walidacyjna dla pól formularza\n    validateOnBlur: false,\n    // Wyłączenie walidacji podczas opuszczenia pola\n    validateOnChange: false,\n    // Wyłączenie walidacji podczas zmiany wartości w polu\n    onSubmit: async values => {\n      // Funkcja wywoływana po przesłaniu formularza\n\n      // Wywołanie funkcji resetującej hasło i przechowywanie jej wyniku\n      let resetPromise = resetPassword({\n        username,\n        password: values.password\n      });\n\n      // Wyświetlenie powiadomienia w zależności od stanu operacji\n      toast.promise(resetPromise, {\n        loading: 'Updating...',\n        // Informacja o trwającej operacji\n        success: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Reset Successfully...!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 18\n        }, this),\n        // Powiadomienie o sukcesie\n        error: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Could not Reset!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 16\n        }, this) // Powiadomienie o błędzie\n      });\n\n      // Po sukcesie przejście do strony z hasłem\n      resetPromise.then(function () {\n        navigate('/password');\n      });\n    }\n  });\n\n  // Wyświetlenie komunikatu w trakcie ładowania\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"text-2xl font-bold\",\n    children: \"isLoading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 25\n  }, this);\n\n  // Wyświetlenie błędu serwera (jeśli wystąpił)\n  if (serverError) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"text-xl text-red-500\",\n    children: serverError.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 27\n  }, this);\n\n  // Jeśli sesja nie została utworzona prawidłowo, przekierowanie do strony z hasłem\n  if (status && status !== 201) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: '/password',\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 40\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-center\",\n      reverseOrder: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.glass,\n        style: {\n          width: \"50%\"\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title flex flex-col items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-5xl font-bold\",\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"py-4 text-xl w-2/3 text-center text-gray-500\",\n            children: \"Enter new password.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"py-20\",\n          onSubmit: formik.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"textbox flex flex-col items-center gap-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ...formik.getFieldProps('password'),\n              className: styles.textbox,\n              type: \"text\",\n              placeholder: \"New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              ...formik.getFieldProps('confirm_pwd'),\n              className: styles.textbox,\n              type: \"text\",\n              placeholder: \"Repeat Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.btn,\n              type: \"submit\",\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(Reset, \"Al4lektrzzefGiFKgUn5Vf0TsEQ=\", false, function () {\n  return [useAuthStore, useNavigate, useFetch, useFormik];\n});\n_c = Reset;\nvar _c;\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"names":["React","toast","Toaster","useFormik","resetPasswordValidation","resetPassword","useAuthStore","useNavigate","Navigate","useFetch","styles","Reset","username","state","auth","navigate","isLoading","status","serverError","formik","initialValues","password","confirm_pwd","validate","validateOnBlur","validateOnChange","onSubmit","values","resetPromise","promise","loading","success","error","then","message","glass","width","handleSubmit","getFieldProps","textbox","btn"],"sources":["C:/Users/48664/source/repos/DawidPodpora/Stworki/client/src/components/Reset.js"],"sourcesContent":["import React from 'react'\r\nimport toast, { Toaster } from 'react-hot-toast'; // Biblioteka do obsługi powiadomień\r\nimport { useFormik } from 'formik'; // Narzędzie do zarządzania formularzami w React\r\nimport { resetPasswordValidation } from '../helper/validate'; // Funkcja walidująca dane wejściowe formularza\r\nimport { resetPassword } from '../helper/helper'; // Funkcja wysyłająca żądanie do API, aby zresetować hasło\r\nimport { useAuthStore } from '../store/store'; // Hook do zarządzania globalnym stanem autoryzacji\r\nimport { useNavigate, Navigate } from 'react-router-dom'; // Funkcje do nawigacji i przekierowań w React Router\r\nimport useFetch from '../hooks/fetch.hook'; // Niestandardowy hook do obsługi żądań HTTP\r\n\r\nimport styles from '../styles/Username.module.css'; // Import modułu stylów CSS\r\n\r\nexport default function Reset() {\r\n\r\n  // Pobranie nazwy użytkownika z globalnego stanu\r\n  const { username } = useAuthStore(state => state.auth);\r\n\r\n  // Hook do nawigacji między stronami\r\n  const navigate = useNavigate();\r\n\r\n  // Wywołanie niestandardowego hooka do stworzenia sesji resetowania hasła\r\n  const [{ isLoading, status, serverError }] = useFetch('createResetSession');\r\n\r\n  // Konfiguracja formularza przy użyciu Formik\r\n  const formik = useFormik({\r\n    initialValues: { // Domyślne wartości pól formularza\r\n      password: '', // Pole dla nowego hasła\r\n      confirm_pwd: '' // Pole do potwierdzenia nowego hasła\r\n    },\r\n    validate: resetPasswordValidation, // Funkcja walidacyjna dla pól formularza\r\n    validateOnBlur: false, // Wyłączenie walidacji podczas opuszczenia pola\r\n    validateOnChange: false, // Wyłączenie walidacji podczas zmiany wartości w polu\r\n    onSubmit: async values => { // Funkcja wywoływana po przesłaniu formularza\r\n\r\n      // Wywołanie funkcji resetującej hasło i przechowywanie jej wyniku\r\n      let resetPromise = resetPassword({ username, password: values.password });\r\n\r\n      // Wyświetlenie powiadomienia w zależności od stanu operacji\r\n      toast.promise(resetPromise, {\r\n        loading: 'Updating...', // Informacja o trwającej operacji\r\n        success: <b>Reset Successfully...!</b>, // Powiadomienie o sukcesie\r\n        error: <b>Could not Reset!</b> // Powiadomienie o błędzie\r\n      });\r\n\r\n      // Po sukcesie przejście do strony z hasłem\r\n      resetPromise.then(function () { navigate('/password') });\r\n\r\n    }\r\n  });\r\n\r\n  // Wyświetlenie komunikatu w trakcie ładowania\r\n  if (isLoading) return <h1 className='text-2xl font-bold'>isLoading</h1>;\r\n\r\n  // Wyświetlenie błędu serwera (jeśli wystąpił)\r\n  if (serverError) return <h1 className='text-xl text-red-500'>{serverError.message}</h1>;\r\n\r\n  // Jeśli sesja nie została utworzona prawidłowo, przekierowanie do strony z hasłem\r\n  if (status && status !== 201) return <Navigate to={'/password'} replace={true}></Navigate>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto\"> {/* Kontener główny */}\r\n\r\n      {/* Obsługa powiadomień */}\r\n      <Toaster position='top-center' reverseOrder={false}></Toaster>\r\n\r\n      <div className='flex justify-center items-center h-screen'> {/* Sekcja wyśrodkowana w pionie i poziomie */}\r\n        <div className={styles.glass} style={{ width: \"50%\" }}> {/* Stylizacja kontenera */}\r\n\r\n          {/* Nagłówek sekcji */}\r\n          <div className=\"title flex flex-col items-center\">\r\n            <h4 className='text-5xl font-bold'>Reset</h4>\r\n            <span className='py-4 text-xl w-2/3 text-center text-gray-500'>\r\n              Enter new password.\r\n            </span>\r\n          </div>\r\n\r\n          {/* Formularz do resetowania hasła */}\r\n          <form className='py-20' onSubmit={formik.handleSubmit}>\r\n            <div className=\"textbox flex flex-col items-center gap-6\">\r\n              {/* Pole do wpisania nowego hasła */}\r\n              <input {...formik.getFieldProps('password')} className={styles.textbox} type=\"text\" placeholder='New Password' />\r\n              {/* Pole do powtórzenia nowego hasła */}\r\n              <input {...formik.getFieldProps('confirm_pwd')} className={styles.textbox} type=\"text\" placeholder='Repeat Password' />\r\n              {/* Przycisk do przesyłania formularza */}\r\n              <button className={styles.btn} type='submit'>Reset</button>\r\n            </div>\r\n          </form>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}