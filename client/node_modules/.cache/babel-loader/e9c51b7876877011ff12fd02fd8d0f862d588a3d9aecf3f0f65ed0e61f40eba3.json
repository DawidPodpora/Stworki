{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n// Ustawienie domyślnego adresu bazowego API z pliku konfiguracyjnego\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Funkcje do wykonywania zapytań API */\n\n/** Funkcja do pobierania nazwy użytkownika z tokenu JWT */\nexport async function getUsername() {\n  // Pobranie tokenu z localStorage\n  const token = localStorage.getItem('token');\n  // Jeśli token nie istnieje, zwróć błąd\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  // Dekodowanie tokenu JWT\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** Funkcja uwierzytelniająca użytkownika */\nexport async function authenticate(username) {\n  try {\n    // Wysyłanie zapytania POST do API, aby uwierzytelnić użytkownika\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    // Zwracanie komunikatu o błędzie, jeśli użytkownik nie istnieje\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/** Funkcja pobierająca dane użytkownika na podstawie nazwy użytkownika */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    // Wysyłanie zapytania GET, aby pobrać dane użytkownika\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    // Zwracanie komunikatu o błędzie, jeśli hasło nie pasuje\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n/** Funkcja rejestrująca nowego użytkownika */\nexport async function registerUser(credentials) {\n  try {\n    // Wysyłanie zapytania POST, aby zarejestrować użytkownika\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n\n    // Wyciąganie nazwy użytkownika i adresu e-mail z danych rejestracyjnych\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** Jeśli rejestracja zakończyła się sukcesem, wysyłamy e-mail */\n    if (status === 201) {\n      // Wysyłanie e-maila potwierdzającego rejestrację\n      await axios.post('/api/registerMail', {\n        username: username,\n        userEmail: email,\n        text: msg\n      });\n    }\n\n    // Zwracanie komunikatu o powodzeniu rejestracji\n    return Promise.resolve(msg);\n  } catch (error) {\n    var _error$response;\n    console.log(\"Axios Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    // Zwracanie błędu w przypadku niepowodzenia rejestracji\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** Funkcja weryfikująca hasło użytkownika */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      // Wysyłanie zapytania POST, aby zweryfikować dane logowania\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    // Zwracanie komunikatu o błędzie, jeśli hasło nie pasuje\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/** Funkcja aktualizująca dane użytkownika */\nexport async function updateUser(response) {\n  try {\n    // Pobieranie tokenu z localStorage\n    const token = await localStorage.getItem('token');\n    // Wysyłanie zapytania PUT, aby zaktualizować dane użytkownika\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n\n    // Zwracanie zaktualizowanych danych użytkownika\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    // Zwracanie komunikatu o błędzie, jeśli nie udało się zaktualizować danych\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n/** Funkcja generująca kod OTP do odzyskiwania hasła */\nexport async function generateOTP(username) {\n  try {\n    // Wysyłanie zapytania GET, aby wygenerować kod OTP\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // Jeśli kod OTP został wygenerowany, wysyłamy e-mail z kodem\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      // Wysyłanie e-maila z kodem OTP\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n\n    // Zwracanie kodu OTP\n    return Promise.resolve(code);\n  } catch (error) {\n    // Zwracanie błędu, jeśli wystąpił problem przy generowaniu OTP\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** Funkcja weryfikująca kod OTP */\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    // Wysyłanie zapytania GET, aby zweryfikować kod OTP\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    // Zwracanie błędu, jeśli wystąpił problem przy weryfikacji OTP\n    return Promise.reject(error);\n  }\n}\n\n/** Funkcja resetująca hasło użytkownika */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    // Wysyłanie zapytania PUT, aby zresetować hasło użytkownika\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    // Zwracanie błędu, jeśli wystąpił problem przy resetowaniu hasła\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","console","log","response","message","verifyPassword","password","updateUser","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/48664/Desktop/project/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n// Ustawienie domyślnego adresu bazowego API z pliku konfiguracyjnego\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Funkcje do wykonywania zapytań API */\n\n/** Funkcja do pobierania nazwy użytkownika z tokenu JWT */\nexport async function getUsername() {\n    // Pobranie tokenu z localStorage\n    const token = localStorage.getItem('token');\n    // Jeśli token nie istnieje, zwróć błąd\n    if (!token) return Promise.reject(\"Cannot find Token\");\n    // Dekodowanie tokenu JWT\n    let decode = jwt_decode(token);\n    return decode;\n}\n\n/** Funkcja uwierzytelniająca użytkownika */\nexport async function authenticate(username) {\n    try {\n        // Wysyłanie zapytania POST do API, aby uwierzytelnić użytkownika\n        return await axios.post('/api/authenticate', { username });\n    } catch (error) {\n        // Zwracanie komunikatu o błędzie, jeśli użytkownik nie istnieje\n        return { error: \"Username doesn't exist...!\" };\n    }\n}\n\n/** Funkcja pobierająca dane użytkownika na podstawie nazwy użytkownika */\nexport async function getUser({ username }) {\n    try {\n        // Wysyłanie zapytania GET, aby pobrać dane użytkownika\n        const { data } = await axios.get(`/api/user/${username}`);\n        return { data };\n    } catch (error) {\n        // Zwracanie komunikatu o błędzie, jeśli hasło nie pasuje\n        return { error: \"Password doesn't Match...!\" };\n    }\n}\n\n/** Funkcja rejestrująca nowego użytkownika */\nexport async function registerUser(credentials) {\n    try {\n        // Wysyłanie zapytania POST, aby zarejestrować użytkownika\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\n\n        // Wyciąganie nazwy użytkownika i adresu e-mail z danych rejestracyjnych\n        let { username, email } = credentials;\n\n        /** Jeśli rejestracja zakończyła się sukcesem, wysyłamy e-mail */\n        if (status === 201) {\n            // Wysyłanie e-maila potwierdzającego rejestrację\n            await axios.post('/api/registerMail', {\n                username: username,\n                userEmail: email,\n                text: msg\n            });\n        }\n\n        // Zwracanie komunikatu o powodzeniu rejestracji\n        return Promise.resolve(msg);\n    } catch (error) {\n        console.log(\"Axios Error:\", error.response?.data || error.message);\n        // Zwracanie błędu w przypadku niepowodzenia rejestracji\n        return Promise.reject({ error });\n    }\n}\n\n/** Funkcja weryfikująca hasło użytkownika */\nexport async function verifyPassword({ username, password }) {\n    try {\n        if (username) {\n            // Wysyłanie zapytania POST, aby zweryfikować dane logowania\n            const { data } = await axios.post('/api/login', { username, password });\n            return Promise.resolve({ data });\n        }\n    } catch (error) {\n        // Zwracanie komunikatu o błędzie, jeśli hasło nie pasuje\n        return Promise.reject({ error: \"Password doesn't Match...!\" });\n    }\n}\n\n/** Funkcja aktualizująca dane użytkownika */\nexport async function updateUser(response) {\n    try {\n        // Pobieranie tokenu z localStorage\n        const token = await localStorage.getItem('token');\n        // Wysyłanie zapytania PUT, aby zaktualizować dane użytkownika\n        const data = await axios.put('/api/updateuser', response, { headers: { \"Authorization\": `Bearer ${token}` } });\n\n        // Zwracanie zaktualizowanych danych użytkownika\n        return Promise.resolve({ data });\n    } catch (error) {\n        // Zwracanie komunikatu o błędzie, jeśli nie udało się zaktualizować danych\n        return Promise.reject({ error: \"Couldn't Update Profile...!\" });\n    }\n}\n\n/** Funkcja generująca kod OTP do odzyskiwania hasła */\nexport async function generateOTP(username) {\n    try {\n        // Wysyłanie zapytania GET, aby wygenerować kod OTP\n        const { data: { code }, status } = await axios.get('/api/generateOTP', { params: { username } });\n\n        // Jeśli kod OTP został wygenerowany, wysyłamy e-mail z kodem\n        if (status === 201) {\n            let { data: { email } } = await getUser({ username });\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n            // Wysyłanie e-maila z kodem OTP\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject: \"Password Recovery OTP\" });\n        }\n\n        // Zwracanie kodu OTP\n        return Promise.resolve(code);\n    } catch (error) {\n        // Zwracanie błędu, jeśli wystąpił problem przy generowaniu OTP\n        return Promise.reject({ error });\n    }\n}\n\n/** Funkcja weryfikująca kod OTP */\nexport async function verifyOTP({ username, code }) {\n    try {\n        // Wysyłanie zapytania GET, aby zweryfikować kod OTP\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } });\n        return { data, status };\n    } catch (error) {\n        // Zwracanie błędu, jeśli wystąpił problem przy weryfikacji OTP\n        return Promise.reject(error);\n    }\n}\n\n/** Funkcja resetująca hasło użytkownika */\nexport async function resetPassword({ username, password }) {\n    try {\n        // Wysyłanie zapytania PUT, aby zresetować hasło użytkownika\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\n        return Promise.resolve({ data, status });\n    } catch (error) {\n        // Zwracanie błędu, jeśli wystąpił problem przy resetowaniu hasła\n        return Promise.reject({ error });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}