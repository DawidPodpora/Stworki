{"ast":null,"code":"import toast from 'react-hot-toast';\nimport { authenticate } from './helper';\n\n/** Funkcja walidująca nazwę użytkownika na stronie logowania */\nexport async function usernameValidate(values) {\n  // Sprawdzenie błędów dla nazwy użytkownika\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    // Sprawdzenie, czy użytkownik istnieje\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status !== 200) {\n      // Jeśli użytkownik nie istnieje, wyświetlamy komunikat o błędzie\n      errors.exist = toast.error('User does not exist...!');\n    }\n  }\n  return errors;\n}\n\n/** Funkcja walidująca hasło */\nexport async function passwordValidate(values) {\n  // Sprawdzenie błędów dla hasła\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** Funkcja walidująca dane do resetowania hasła */\nexport async function resetPasswordValidation(values) {\n  // Sprawdzenie błędów dla hasła\n  const errors = passwordVerify({}, values);\n\n  // Sprawdzenie, czy hasło i jego potwierdzenie się zgadzają\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Password not match...!\");\n  }\n  return errors;\n}\n\n/** Funkcja walidująca formularz rejestracji */\nexport async function registerValidation(values) {\n  // Sprawdzenie błędów dla nazwy użytkownika\n  const errors = usernameVerify({}, values);\n  // Sprawdzenie błędów dla hasła\n  passwordVerify(errors, values);\n  // Sprawdzenie błędów dla adresu e-mail\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** Funkcja walidująca formularz profilu użytkownika */\nexport async function profileValidation(values) {\n  // Sprawdzenie błędów dla e-maila\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n/** ************************************************* */\n\n/** Funkcja walidująca hasło */\nfunction passwordVerify() {\n  let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  /* eslint-disable no-useless-escape */\n  // Wyrażenie regularne do sprawdzania specjalnych znaków w haśle\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    // Jeśli hasło nie zostało podane, wyświetlamy komunikat o błędzie\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    // Jeśli hasło zawiera spacje, wyświetlamy błąd\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    // Jeśli hasło jest krótsze niż 4 znaki, wyświetlamy błąd\n    errors.password = toast.error(\"Password must be more than 4 characters long\");\n  } else if (!specialChars.test(values.password)) {\n    // Jeśli hasło nie zawiera specjalnych znaków, wyświetlamy błąd\n    errors.password = toast.error(\"Password must have special character\");\n  }\n  return errors;\n}\n\n/** Funkcja walidująca nazwę użytkownika */\nfunction usernameVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    // Jeśli nazwa użytkownika nie została podana, wyświetlamy komunikat o błędzie\n    error.username = toast.error('Username Required...!');\n  } else if (values.username.includes(\" \")) {\n    // Jeśli nazwa użytkownika zawiera spacje, wyświetlamy błąd\n    error.username = toast.error('Invalid Username...!');\n  }\n  return error;\n}\n\n/** Funkcja walidująca e-mail */\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    // Jeśli e-mail nie został podany, wyświetlamy komunikat o błędzie\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    // Jeśli e-mail zawiera spacje, wyświetlamy błąd\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    // Jeśli e-mail nie jest poprawny, wyświetlamy błąd\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","errors","usernameVerify","username","status","exist","error","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","registerValidation","emailVerify","profileValidation","specialChars","includes","length","test","email"],"sources":["C:/Users/48664/source/repos/DawidPodpora/Stworki/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\r\nimport { authenticate } from './helper'\r\n\r\n/** Funkcja walidująca nazwę użytkownika na stronie logowania */\r\nexport async function usernameValidate(values){\r\n    // Sprawdzenie błędów dla nazwy użytkownika\r\n    const errors = usernameVerify({}, values);\r\n\r\n    if(values.username){\r\n        // Sprawdzenie, czy użytkownik istnieje\r\n        const { status } = await authenticate(values.username);\r\n        \r\n        if(status !== 200){\r\n            // Jeśli użytkownik nie istnieje, wyświetlamy komunikat o błędzie\r\n            errors.exist = toast.error('User does not exist...!')\r\n        }\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/** Funkcja walidująca hasło */\r\nexport async function passwordValidate(values){\r\n    // Sprawdzenie błędów dla hasła\r\n    const errors = passwordVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** Funkcja walidująca dane do resetowania hasła */\r\nexport async function resetPasswordValidation(values){\r\n    // Sprawdzenie błędów dla hasła\r\n    const errors = passwordVerify({}, values);\r\n\r\n    // Sprawdzenie, czy hasło i jego potwierdzenie się zgadzają\r\n    if(values.password !== values.confirm_pwd){\r\n        errors.exist = toast.error(\"Password not match...!\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/** Funkcja walidująca formularz rejestracji */\r\nexport async function registerValidation(values){\r\n    // Sprawdzenie błędów dla nazwy użytkownika\r\n    const errors = usernameVerify({}, values);\r\n    // Sprawdzenie błędów dla hasła\r\n    passwordVerify(errors, values);\r\n    // Sprawdzenie błędów dla adresu e-mail\r\n    emailVerify(errors, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** Funkcja walidująca formularz profilu użytkownika */\r\nexport async function profileValidation(values){\r\n    // Sprawdzenie błędów dla e-maila\r\n    const errors = emailVerify({}, values);\r\n    return errors;\r\n}\r\n\r\n/** ************************************************* */\r\n\r\n/** Funkcja walidująca hasło */\r\nfunction passwordVerify(errors = {}, values){\r\n    /* eslint-disable no-useless-escape */\r\n    // Wyrażenie regularne do sprawdzania specjalnych znaków w haśle\r\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if(!values.password){\r\n        // Jeśli hasło nie zostało podane, wyświetlamy komunikat o błędzie\r\n        errors.password = toast.error(\"Password Required...!\");\r\n    } else if(values.password.includes(\" \")){\r\n        // Jeśli hasło zawiera spacje, wyświetlamy błąd\r\n        errors.password = toast.error(\"Wrong Password...!\");\r\n    }else if(values.password.length < 4){\r\n        // Jeśli hasło jest krótsze niż 4 znaki, wyświetlamy błąd\r\n        errors.password = toast.error(\"Password must be more than 4 characters long\");\r\n    }else if(!specialChars.test(values.password)){\r\n        // Jeśli hasło nie zawiera specjalnych znaków, wyświetlamy błąd\r\n        errors.password = toast.error(\"Password must have special character\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/** Funkcja walidująca nazwę użytkownika */\r\nfunction usernameVerify(error = {}, values){\r\n    if(!values.username){\r\n        // Jeśli nazwa użytkownika nie została podana, wyświetlamy komunikat o błędzie\r\n        error.username = toast.error('Username Required...!');\r\n    }else if(values.username.includes(\" \")){\r\n        // Jeśli nazwa użytkownika zawiera spacje, wyświetlamy błąd\r\n        error.username = toast.error('Invalid Username...!')\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\n/** Funkcja walidująca e-mail */\r\nfunction emailVerify(error ={}, values){\r\n    if(!values.email){\r\n        // Jeśli e-mail nie został podany, wyświetlamy komunikat o błędzie\r\n        error.email = toast.error(\"Email Required...!\");\r\n    }else if(values.email.includes(\" \")){\r\n        // Jeśli e-mail zawiera spacje, wyświetlamy błąd\r\n        error.email = toast.error(\"Wrong Email...!\")\r\n    }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\r\n        // Jeśli e-mail nie jest poprawny, wyświetlamy błąd\r\n        error.email = toast.error(\"Invalid email address...!\")\r\n    }\r\n\r\n    return error;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}