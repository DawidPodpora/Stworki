{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\48664\\\\source\\\\repos\\\\DawidPodpora\\\\Stworki\\\\client\\\\src\\\\components\\\\ContentComponents\\\\PrivateMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateMessages() {\n  _s();\n  const [messages, setMessages] = useState([]); //Przechowywanie wiadomości użytkownika\n  const [newMessage, setNewMessage] = useState({\n    receiver: '',\n    title: '',\n    content: ''\n  }); //Nowa wiadomość\n  const [selectedMessage, setSelectedMessage] = useState(null); //wybrana wiadomość\n  const token = localStorage.getItem('token');\n\n  //Pobieranie wiadomości po załadowaniu komponentu\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/api/messages', {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Pobrane wiadomości: ');\n          setMessages(data); //Ustawienie wiadomości\n        } else {\n          console.error('Błąd podczas pobierania wiadomości');\n        }\n      } catch (error) {\n        console.error('Błąd serwera:', error);\n      }\n    };\n    fetchMessages();\n  }, [token]);\n\n  //Wysyłąnie nowej wiadomości\n  const sendMessage = async () => {\n    if (!newMessage.receiver || !newMessage.title || !newMessage.content) {\n      alert('Wszystkie pola są wymagane!');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:8080/api/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(newMessage)\n      });\n      if (response.ok) {\n        alert('Wiadomość wysłana!');\n        setNewMessage({\n          receiver: '',\n          title: '',\n          content: ''\n        }); //reset formularza\n      } else {\n        console.error('Błąd podczas wysyłania wiadomości');\n      }\n    } catch (error) {\n      console.error('Błąd serwera:', error);\n    }\n  };\n\n  //Usuwanie wiadomości\n  const deleteMessage = async messageId => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/${messageId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        setMessages(prevMessages => prevMessages.filter(msg => msg._id !== messageId));\n      } else {\n        console.error('Błąd podczas usuwania wiadomości');\n      }\n    } catch (error) {\n      console.error('Błąd serwera:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-screen bg-black flex flex-col p-4justify-center text-maincolor4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-[78vw] h-[95vh] bg-maincolor1 p-6 rounded-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n\n  /*\r\n      return (\r\n          <div className=\"p-6 bg-gray-100 h-screen\">\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Wiadomości prywatne</h2>\r\n      \r\n            {/* Lista wiadomości /}\r\n            <div className=\"mb-8\">\r\n              <h3 className=\"text-xl font-semibold text-gray-700 mb-4\">Twoje wiadomości</h3>\r\n              {messages.length > 0 ? (\r\n                <ul className=\"space-y-4\">\r\n                  {messages.map((msg) => (\r\n                    <li\r\n                      key={msg._id}\r\n                      className={`p-4 rounded-lg shadow-md border ${\r\n                        msg.isRead ? 'bg-white' : 'bg-blue-50'\r\n                      }`}\r\n                    >\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-bold text-gray-800\">{msg.title}</span>\r\n                        <button\r\n                          onClick={() => deleteMessage(msg._id)}\r\n                          className=\"text-red-500 hover:text-red-700 text-sm\"\r\n                        >\r\n                          Usuń\r\n                        </button>\r\n                      </div>\r\n                      <p className=\"text-sm text-gray-600 mt-2\">Od: {msg.senderId.username}</p>\r\n                      <button\r\n                        onClick={() => setSelectedMessage(msg)}\r\n                        className=\"text-blue-500 hover:underline mt-2\"\r\n                      >\r\n                        Zobacz szczegóły\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <p className=\"text-gray-600\">Brak wiadomości</p>\r\n              )}\r\n            </div>\r\n      \r\n            {/* Wyświetlanie szczegółów wiadomości /}\r\n            {selectedMessage && (\r\n              <div className=\"mb-8 bg-white shadow-md rounded-lg p-6 border\">\r\n                <h3 className=\"text-lg font-bold text-gray-800 mb-2\">Szczegóły wiadomości</h3>\r\n                <p>\r\n                  <strong>Od:</strong> {selectedMessage.senderUsername}\r\n                </p>\r\n                <p>\r\n                  <strong>Tytuł:</strong> {selectedMessage.title}\r\n                </p>\r\n                <p>\r\n                  <strong>Treść:</strong> {selectedMessage.content}\r\n                </p>\r\n                <button\r\n                  onClick={() => setSelectedMessage(null)}\r\n                  className=\"mt-4 bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\"\r\n                >\r\n                  Zamknij\r\n                </button>\r\n              </div>\r\n            )}\r\n      \r\n            {/* Formularz wysyłania nowej wiadomości /}\r\n            <div className=\"bg-white shadow-md rounded-lg p-6 border\">\r\n              <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Wyślij nową wiadomość</h3>\r\n              <div className=\"mb-4\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Odbiorca\"\r\n                  value={newMessage.receiver}\r\n                  onChange={(e) => setNewMessage({ ...newMessage, receiver: e.target.value })}\r\n                  className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n              <div className=\"mb-4\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Tytuł\"\r\n                  value={newMessage.title}\r\n                  onChange={(e) => setNewMessage({ ...newMessage, title: e.target.value })}\r\n                  className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n              <div className=\"mb-4\">\r\n                <textarea\r\n                  placeholder=\"Treść\"\r\n                  value={newMessage.content}\r\n                  onChange={(e) => setNewMessage({ ...newMessage, content: e.target.value })}\r\n                  className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n              <button\r\n                onClick={sendMessage}\r\n                className=\"bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\"\r\n              >\r\n                Wyślij\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n        */\n}\n_s(PrivateMessages, \"5HtSrmAiO3NjOtxhJShamTLqLfI=\");\n_c = PrivateMessages;\nexport default PrivateMessages;\nvar _c;\n$RefreshReg$(_c, \"PrivateMessages\");","map":{"version":3,"names":["React","useState","useEffect","PrivateMessages","messages","setMessages","newMessage","setNewMessage","receiver","title","content","selectedMessage","setSelectedMessage","token","localStorage","getItem","fetchMessages","response","fetch","method","headers","Authorization","ok","data","json","console","log","error","sendMessage","alert","body","JSON","stringify","deleteMessage","messageId","prevMessages","filter","msg","_id"],"sources":["C:/Users/48664/source/repos/DawidPodpora/Stworki/client/src/components/ContentComponents/PrivateMessages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction PrivateMessages() {\r\n    const [messages, setMessages] = useState([]); //Przechowywanie wiadomości użytkownika\r\n    const [newMessage, setNewMessage] = useState({receiver: '', title: '', content: ''});//Nowa wiadomość\r\n    const [selectedMessage, setSelectedMessage] = useState(null); //wybrana wiadomość\r\n    const token = localStorage.getItem('token');\r\n\r\n    //Pobieranie wiadomości po załadowaniu komponentu\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try{\r\n                const response = await fetch('http://localhost:8080/api/messages', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                });\r\n                if (response.ok){\r\n                    const data = await response.json();\r\n                    console.log('Pobrane wiadomości: ')\r\n                    setMessages(data);//Ustawienie wiadomości\r\n                }else{\r\n                    console.error('Błąd podczas pobierania wiadomości');\r\n                }\r\n            } catch(error){\r\n                console.error('Błąd serwera:',error);\r\n            }\r\n        };\r\n        fetchMessages();\r\n    }, [token]);\r\n\r\n    //Wysyłąnie nowej wiadomości\r\n    const sendMessage = async () => {\r\n        if(!newMessage.receiver || !newMessage.title || !newMessage.content){\r\n            alert('Wszystkie pola są wymagane!');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/message', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessage),\r\n            });\r\n            if(response.ok){\r\n                alert('Wiadomość wysłana!');\r\n                setNewMessage({receiver: '', title: '', content: ''}); //reset formularza\r\n            } else {\r\n                console.error('Błąd podczas wysyłania wiadomości');\r\n            }\r\n        } catch (error) {\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n\r\n    //Usuwanie wiadomości\r\n    const deleteMessage = async (messageId) => {\r\n        try{\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok) {\r\n                setMessages((prevMessages) => prevMessages.filter((msg) => msg._id !== messageId));\r\n            } else {\r\n                console.error('Błąd podczas usuwania wiadomości');\r\n            }\r\n        } catch (error){\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"w-full h-screen bg-black flex flex-col p-4justify-center text-maincolor4\">\r\n            {/*Zielony komponent na czarnym tle*/}\r\n            <div className=\"w-[78vw] h-[95vh] bg-maincolor1 p-6 rounded-lg\"></div>\r\n        </div>\r\n    );\r\n\r\n\r\n/*\r\n    return (\r\n        <div className=\"p-6 bg-gray-100 h-screen\">\r\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Wiadomości prywatne</h2>\r\n    \r\n          {/* Lista wiadomości /}\r\n          <div className=\"mb-8\">\r\n            <h3 className=\"text-xl font-semibold text-gray-700 mb-4\">Twoje wiadomości</h3>\r\n            {messages.length > 0 ? (\r\n              <ul className=\"space-y-4\">\r\n                {messages.map((msg) => (\r\n                  <li\r\n                    key={msg._id}\r\n                    className={`p-4 rounded-lg shadow-md border ${\r\n                      msg.isRead ? 'bg-white' : 'bg-blue-50'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"font-bold text-gray-800\">{msg.title}</span>\r\n                      <button\r\n                        onClick={() => deleteMessage(msg._id)}\r\n                        className=\"text-red-500 hover:text-red-700 text-sm\"\r\n                      >\r\n                        Usuń\r\n                      </button>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mt-2\">Od: {msg.senderId.username}</p>\r\n                    <button\r\n                      onClick={() => setSelectedMessage(msg)}\r\n                      className=\"text-blue-500 hover:underline mt-2\"\r\n                    >\r\n                      Zobacz szczegóły\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p className=\"text-gray-600\">Brak wiadomości</p>\r\n            )}\r\n          </div>\r\n    \r\n          {/* Wyświetlanie szczegółów wiadomości /}\r\n          {selectedMessage && (\r\n            <div className=\"mb-8 bg-white shadow-md rounded-lg p-6 border\">\r\n              <h3 className=\"text-lg font-bold text-gray-800 mb-2\">Szczegóły wiadomości</h3>\r\n              <p>\r\n                <strong>Od:</strong> {selectedMessage.senderUsername}\r\n              </p>\r\n              <p>\r\n                <strong>Tytuł:</strong> {selectedMessage.title}\r\n              </p>\r\n              <p>\r\n                <strong>Treść:</strong> {selectedMessage.content}\r\n              </p>\r\n              <button\r\n                onClick={() => setSelectedMessage(null)}\r\n                className=\"mt-4 bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\"\r\n              >\r\n                Zamknij\r\n              </button>\r\n            </div>\r\n          )}\r\n    \r\n          {/* Formularz wysyłania nowej wiadomości /}\r\n          <div className=\"bg-white shadow-md rounded-lg p-6 border\">\r\n            <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Wyślij nową wiadomość</h3>\r\n            <div className=\"mb-4\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Odbiorca\"\r\n                value={newMessage.receiver}\r\n                onChange={(e) => setNewMessage({ ...newMessage, receiver: e.target.value })}\r\n                className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Tytuł\"\r\n                value={newMessage.title}\r\n                onChange={(e) => setNewMessage({ ...newMessage, title: e.target.value })}\r\n                className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <textarea\r\n                placeholder=\"Treść\"\r\n                value={newMessage.content}\r\n                onChange={(e) => setNewMessage({ ...newMessage, content: e.target.value })}\r\n                className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={sendMessage}\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\"\r\n            >\r\n              Wyślij\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n      */\r\n    }\r\n    \r\n    export default PrivateMessages;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}