[{"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js":"1","C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js":"2","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js":"3","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js":"4","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js":"5","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js":"6","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js":"7","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js":"8","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js":"9","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js":"10","C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js":"11","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js":"12","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js":"13","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js":"14","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js":"15","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js":"16","C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js":"17","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js":"18","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js":"19","C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js":"20","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js":"21","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js":"22","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js":"23","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js":"24","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js":"25","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js":"26","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js":"27","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js":"28","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RequireAuth.js":"29","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FightScreen.js":"30","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RedirectIfLoggedIn.js":"31","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Misions.js":"32","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildView.js":"33","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildDetails.js":"34","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildInvitations.js":"35","C:\\Users\\48664\\Desktop\\project\\client\\src\\i18n.js":"36"},{"size":247,"mtime":1737385543193,"results":"37","hashOfConfig":"38"},{"size":3220,"mtime":1737315303854,"results":"39","hashOfConfig":"38"},{"size":5031,"mtime":1737315303862,"results":"40","hashOfConfig":"38"},{"size":2967,"mtime":1737315303866,"results":"41","hashOfConfig":"38"},{"size":3825,"mtime":1737315303864,"results":"42","hashOfConfig":"38"},{"size":6221,"mtime":1733462294000,"results":"43","hashOfConfig":"38"},{"size":4539,"mtime":1737315303866,"results":"44","hashOfConfig":"38"},{"size":4507,"mtime":1737315303863,"results":"45","hashOfConfig":"38"},{"size":113,"mtime":1731339676000,"results":"46","hashOfConfig":"38"},{"size":4792,"mtime":1737315303861,"results":"47","hashOfConfig":"38"},{"size":1623,"mtime":1737315303867,"results":"48","hashOfConfig":"38"},{"size":4929,"mtime":1737388057255,"results":"49","hashOfConfig":"38"},{"size":3874,"mtime":1737384729415,"results":"50","hashOfConfig":"38"},{"size":2399,"mtime":1737384063784,"results":"51","hashOfConfig":"38"},{"size":2181,"mtime":1737382775787,"results":"52","hashOfConfig":"38"},{"size":5662,"mtime":1733464357000,"results":"53","hashOfConfig":"38"},{"size":721,"mtime":1733462113000,"results":"54","hashOfConfig":"38"},{"size":4047,"mtime":1733462017000,"results":"55","hashOfConfig":"38"},{"size":711,"mtime":1733461908000,"results":"56","hashOfConfig":"38"},{"size":2671,"mtime":1733462052000,"results":"57","hashOfConfig":"38"},{"size":3317,"mtime":1737392499557,"results":"58","hashOfConfig":"38"},{"size":650,"mtime":1736542038798,"results":"59","hashOfConfig":"38"},{"size":21766,"mtime":1737395190072,"results":"60","hashOfConfig":"38"},{"size":12820,"mtime":1737397383961,"results":"61","hashOfConfig":"38"},{"size":17053,"mtime":1736688008572,"results":"62","hashOfConfig":"38"},{"size":3287,"mtime":1736610062972,"results":"63","hashOfConfig":"38"},{"size":4140,"mtime":1736450057831,"results":"64","hashOfConfig":"38"},{"size":21938,"mtime":1737374353440,"results":"65","hashOfConfig":"38"},{"size":365,"mtime":1737315303865,"results":"66","hashOfConfig":"38"},{"size":9298,"mtime":1737374403454,"results":"67","hashOfConfig":"38"},{"size":728,"mtime":1737315303864,"results":"68","hashOfConfig":"38"},{"size":11894,"mtime":1737374403454,"results":"69","hashOfConfig":"38"},{"size":17583,"mtime":1737374403453,"results":"70","hashOfConfig":"38"},{"size":9506,"mtime":1737374403452,"results":"71","hashOfConfig":"38"},{"size":5437,"mtime":1737374403452,"results":"72","hashOfConfig":"38"},{"size":8377,"mtime":1737397384632,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e4jrjj",{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"80"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"80"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"80"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"80"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js",[],[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js",["191"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js",["192","193"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js",["194","195"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js",[],["196","197"],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js",["198"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js",["199","200","201"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js",["202","203","204","205"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js",["206"],[],"import React, { useState, useEffect } from 'react';\r\nfunction PrivateMessages({data}) {\r\n    const [messages, setMessages] = useState([]); //Przechowywanie wiadomości użytkownika\r\n    const [newMessage, setNewMessage] = useState({receiver: '', title: '', content: ''});//Nowa wiadomość\r\n    const [newMessageToAll, setNewMessageToAll] = useState({title: '', content: ''});\r\n    const [selectedMessage, setSelectedMessage] = useState(null); //wybrana wiadomość\r\n    const [showSendModal, setShowSendModal] = useState(false);\r\n    const [showSendToAllModal, setShowSendToAllModal] = useState(false);\r\n    const [showReplyModal, setShowReplyModal] = useState(false);\r\n    const token = localStorage.getItem('token');\r\n    const currentUser = data.username;\r\n\r\n    const fetchMessages = async () => {\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messages', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok){\r\n                const data = await response.json();\r\n                console.log('Pobrane wiadomości: ')\r\n                setMessages(data);//Ustawienie wiadomości\r\n            }else{\r\n                console.error('Błąd podczas pobierania wiadomości');\r\n            }\r\n        } catch(error){\r\n            console.error('Błąd serwera:',error);\r\n        }\r\n    };\r\n    //Pobieranie wiadomości po załadowaniu komponentu\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [token]);\r\n    //Wysyłanie wiadomości do wszystkich\r\n    const sendMessageToAll = async() => {\r\n        if(!newMessageToAll.title || !newMessageToAll.content){\r\n            alert('Tytuł i treść są wymagane!');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messageToAll', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessageToAll),\r\n            });\r\n            if(response.ok){\r\n                //alert('Wiadomość do wszystkich została wysłana!');\r\n                setNewMessageToAll({title:'', content:''});\r\n                setShowSendToAllModal(false);\r\n            }else{\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości do wszystkich użytkowników.'}`);\r\n            }\r\n        }catch(error){\r\n            console.error('Błąd serwera: ',error);\r\n        }\r\n    };\r\n    //Wysyłąnie nowej wiadomości\r\n    const sendMessage = async () => {\r\n        if(!newMessage.receiver || !newMessage.title || !newMessage.content){\r\n            alert('Wszystkie pola są wymagane!');\r\n            return;\r\n        }\r\n        if(newMessage.receiver === currentUser) {\r\n            alert('Nie możesz wysłać wiadomości do samego siebie.');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/message', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessage),\r\n            });\r\n            if(response.ok){\r\n                alert('Wiadomość wysłana!');\r\n                setNewMessage({receiver: '', title: '', content: ''}); //reset formularza\r\n                setShowSendModal(false);\r\n                setShowReplyModal(false);\r\n            } else {\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości.'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Usuwanie wiadomości\r\n    const deleteMessage = async (messageId) => {\r\n        try{\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok) {\r\n                setMessages((prevMessages) => prevMessages.filter((msg) => msg._id !== messageId));\r\n            } else {\r\n                console.error('Błąd podczas usuwania wiadomości');\r\n            }\r\n        } catch (error){\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Oznaczanie wiadomości jako przeczytana\r\n    const markMessageAsReaded = async (messageId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}/read`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (!response.ok) \r\n            {\r\n                throw new Error('Nie udało się oznaczyć wiadomości jako przeczytanej.');\r\n            }\r\n            console.log(`Wiadomość ${messageId} oznaczona jako przeczytana.`);\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n\r\n    //Otwieranie modala do odpowiedzi\r\n    const openReplyModal = (senderUsername) => {\r\n        setNewMessage({receiver: senderUsername, title: '', content: ''});\r\n        setShowReplyModal(true);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"w-full h-screen bg-black flex flex-col p-5 justify-center text-maincolor4\">\r\n            {/* Zielony komponent na czarnym tle */}\r\n            <div className=\"w-full h-full bg-maincolor1 p-5 rounded-xl flex flex-col\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <h1 className=\"text-2xl font-bold\">Wiadomości prywatne</h1>\r\n                    <button\r\n                    onClick={() => fetchMessages()}\r\n                    className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Odśwież\r\n                    </button>\r\n                    <button\r\n                        onClick={() => setShowSendModal(true)}\r\n                        className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Wyślij wiadomość\r\n                    </button>\r\n                    {data.isAdmin && (\r\n                        <button\r\n                            onClick={() => setShowSendToAllModal(true)}\r\n                            className=\"bg-maincolor4 text-black border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                        >\r\n                            Wiadomość do wszystkich\r\n                        </button>\r\n                    )}\r\n                </div>\r\n    \r\n                {/* Lista wiadomości */}\r\n                <div className=\"p-4 rounded-xl overflow-y-auto space-y-4 flex-grow\">\r\n                {messages.length > 0 ? (\r\n                    messages.map((msg) => (\r\n                        msg.senderId ? (\r\n                            <div\r\n                                key={msg._id}\r\n                                className={`p-4 rounded-lg shadow-md border ${\r\n                                    msg.isRead ? \"border-maincolor2\" : \"border-maincolor5\"\r\n                                }`}\r\n                            >\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <div>\r\n                                        <p className=\"font-bold\">{msg.title}</p>\r\n                                        <p className=\"text-sm\">Od: {msg.senderId ? msg.senderId.username : \"Nieznany użytkownik\"}</p>\r\n                                        <p className=\"text-xs\">{new Date(msg.createdAt).toLocaleString()}</p>\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={() => deleteMessage(msg._id)}\r\n                                        className=\"text-red-500 hover:text-red-700 text-sm\"\r\n                                    >\r\n                                        Usuń\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"space-x-4 mt-2\">\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            setSelectedMessage(selectedMessage === msg ? null : msg);\r\n                                            if (!msg.isRead) markMessageAsReaded(msg._id);\r\n                                        }}\r\n                                        className=\"mt-2 text-blue-500 hover:underline\"\r\n                                    >\r\n                                        {selectedMessage === msg ? \"Zwiń\" : \"Zobacz szczegóły\"}\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => openReplyModal(msg.senderId.username)}\r\n                                        className=\"text-green-500 hover:underline\"\r\n                                    >\r\n                                        Odpowiedz\r\n                                    </button>\r\n                                </div>\r\n                                {selectedMessage === msg && (\r\n                                    <div className=\"mt-4\">\r\n                                        <p className=\"text-sm\">{msg.content}</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ) : null // Dodaj odpowiednie zachowanie, gdy senderId jest null\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-center\">Brak wiadomości</p>\r\n                )}\r\n                </div>\r\n            </div>\r\n    \r\n            {/*Modal do odpowiedzi */}\r\n            {showReplyModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\"> Odpowiedź do {newMessage.receiver}</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                            />\r\n                            <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => setShowReplyModal(false)}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Modal do wysyłania wiadomości do wszystkich */}\r\n            {showSendToAllModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość do wszystkich</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessageToAll.title}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessageToAll.content}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendToAllModal(false);\r\n                                    setNewMessageToAll({title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessageToAll}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n    \r\n            {/* Modal do wysyłania wiadomości */}\r\n            {showSendModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Odbiorca\"\r\n                            value={newMessage.receiver}\r\n                            onChange={(e) => setNewMessage({...newMessage, receiver: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendModal(false);\r\n                                    setNewMessage({receiver: '', title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default PrivateMessages;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js",["207","208"],[],"import React, { useState } from 'react'; // Import biblioteki React\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction FirstOrb({firsOrbActiveButton,  NewCreatureActiveButton}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n  const [choice, setChoice] = useState(null);\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n    const elements=[\r\n        \"water\",\r\n        \"fire\",\r\n        \"nature\",\r\n        \"light\",\r\n        \"dark\",\r\n    ]\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  const orbChecked =(element)=>{\r\n    setChoice(element);\r\n  }\r\n  const sendFirstOrb = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n    console.log(\"cos\");\r\n    try{\r\n        console.log(\"cos1\");\r\n        const response = await fetch('http://localhost:8080/api/OrbDraw',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({orb: choice}),\r\n        });\r\n        console.log(\"cos2\");\r\n        if (!response.ok) {\r\n            throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n          }\r\n        const data = await response.json();\r\n        return data;\r\n    }catch(error){\r\n        console.error('Błąd podczas wysyłania danych:', error);\r\n        setResponseMessage('Wystąpił błąd podczas wysyłania danych.');\r\n    }\r\n    \r\n  };\r\n  const doubleFunctionClick = () =>\r\n  {\r\n    if(choice)\r\n    {\r\n        console.log(\"działa\");\r\n       \r\n        firsOrbActiveButton();\r\n        sendFirstOrb().then((response)=>{\r\n          NewCreatureActiveButton(response.NewCreature);\r\n        })\r\n    }\r\n  }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col justify-center\">\r\n      <div className=\"relative bg-maincolor1 w-3/4 h-[25vw] mt-[10vh] text-maincolor4  rounded-3xl border-2 p-4 flex flex-col justify-between text-2xl items-center\">\r\n      <div className=\"flex justify-between w-full h-2/3 items-center bg-black px-8  rounded-3xl bg-opacity-70\">\r\n        {elements.map((element, index) =>\r\n        <button onClick ={()=> orbChecked(element)}className={`w-1/6 h-[11.5vw] rounded-full hover:shadow-custom-main hover:bg-maincolor4 ${choice === element?\r\n            \"shadow-custom-main bg-maincolor4\":\"\"\r\n        }`}>\r\n    \r\n            <img src={`images/${element}orb.png`} alt={element}/>\r\n        </button>\r\n        )}\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <button onClick={doubleFunctionClick} className=\"px-9 py-2 bg-maincolor5 text-black1 rounded-lg hover:bg-maincolor4 transition\">\r\n            OK\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstOrb; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js",["209","210","211"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction NewCreatureWindow({ newCreatureData , windowSwicher}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n    const [photoName, setPhotoName] = useState(null);\r\n    const [name,setName] = useState();\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  useEffect(() => {\r\n        const fetchSpeciesPhoto = async () => {\r\n            const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/speciesPhoto?speciesName=${newCreatureData.species}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n                    },\r\n                });\r\n    \r\n                if (!response.ok) {\r\n                    console.error('Błąd pobierania danych obrazka:', response.statusText);\r\n                    return;\r\n                }\r\n                \r\n                const photo = await response.json();\r\n                setPhotoName(photo.photoName);\r\n                console.log(photoName);\r\n            } catch (error) {\r\n                console.error('Błąd podczas pobierania danych obrazka:', error);\r\n            }\r\n  \r\n        };\r\n    \r\n        fetchSpeciesPhoto(); // Wywołanie funkcji\r\n    }, []);\r\n    const sendNewName = async()=>\r\n    {\r\n        const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n            try{\r\n                const response = await fetch('http://localhost:8080/api/setNewName',{\r\n                    method: 'POST',\r\n                    headers:{\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({newName: name,\r\n                    creatureid: newCreatureData._id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n                  }\r\n            }catch(error){\r\n                console.error('Błąd podczas wysyłania danych:', error);\r\n            }\r\n\r\n    }\r\n    const okClickActions = () =>\r\n    {\r\n        windowSwicher();\r\n        sendNewName();\r\n    }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col\">\r\n      {/* Główne okno opcji */}\r\n      <div className=\"relative bg-maincolor1 w-1/2 h-2/3 mt-[10vh] text-maincolor4 flex flex-col items-center rounded-3xl border-2 text-2xl space-y-4\">\r\n        {newCreatureData.species}\r\n        <div className=\"relative h-[27vw] aspect-square bg-black1 rounded-xl border-maincolor5 border-2\">\r\n        {photoName &&(\r\n        <img src={`images/${photoName}.png` } className=\"absolute w-full h-full object-cover rounded-xl\"/>\r\n        )\r\n        }\r\n        </div>\r\n        Nadaj imie:\r\n        <input type=\"text\" value={name} onChange={(e)=> setName(e.target.value)} className='bg-black text-maincolor4 border border-maincolor5 rounded-xl'/>\r\n        <button onClick={okClickActions} className='bottom-10 border-2 rounded-3xl w-1/6 border-maincolor5 hover:shadow-maincolor5 shadow-buttonshadow transition duration-300 hover:text-maincolor5'>OK</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewCreatureWindow; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js",["212","213","214"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Market = () => {\r\n    const [activeTab, setActiveTab] = useState(\"market\"); // Domyślnie otwieramy Market\r\n    const [tooltipVisible, setTooltipVisible] = useState(false);\r\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\r\n    const [tooltipContent, setTooltipContent] = useState(null);\r\n    const [userItems, setUserItems] = useState([]); // Przedmioty użytkownika\r\n    const [marketItems, setMarketItems] = useState([]); // Przedmioty na markecie\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [isSellModalOpen, setIsSellModalOpen] = useState(false);\r\n    const [sellData, setSellData] = useState({ type: \"fixed\", price: \"\", duration: \"2\" });\r\n    const [timers, setTimers] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(activeTab === \"market\"){\r\n            fetchMarketItems();\r\n        } else if (activeTab === \"inventory\"){\r\n            fetchUserItems();\r\n        }\r\n        const interval = setInterval(() => updateTimers(), 1000); //aktualizacja co sekundę\r\n        return () => clearInterval(interval);\r\n    }, [activeTab]);\r\n\r\n    /** 🔥 Pobieranie przedmiotów z marketu */\r\n    const fetchMarketItems = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.warn('Brak tokenu w localStorage');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(\"🔄 Pobieram przedmioty z marketu...\");\r\n            const response = await fetch(\"http://localhost:8080/api/market\", { \r\n                method: 'GET',\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('❌ Błąd pobierania przedmiotów na markecie:', response.statusText);\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(\"✅ Market items API response:\", data);\r\n            \r\n            // Naprawione mapowanie itemów, jeśli są zagnieżdżone\r\n            setMarketItems(data.map(item => ({\r\n                ...item,\r\n                item: item.item?.item || item.item || {} // Upewniamy się, że `item` istnieje\r\n            })));\r\n            updateTimers();\r\n        } catch (error) {\r\n            console.error('❌ Błąd pobierania przedmiotów na markecie:', error);\r\n        }\r\n    };\r\n\r\n    /** 🔥 Pobieranie ekwipunku użytkownika */\r\n    const fetchUserItems = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.warn('Brak tokenu w localStorage');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(\"🔄 Pobieram ekwipunek użytkownika...\");\r\n            const response = await fetch(\"http://localhost:8080/api/usersCreaturesAndItemsData\", { \r\n                method: 'GET',\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error('❌ Błąd pobierania ekwipunku:', response.statusText);\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(\"✅ User items API response:\", data);\r\n            setUserItems(data.items || []);\r\n        } catch (error) {\r\n            console.error('❌ Błąd pobierania ekwipunku:', error);\r\n        }\r\n    };\r\n\r\n    /** 🔥 Tooltipy */\r\n    const handleMouseEnter = (actualEvent, item) =>{\r\n        const rect = actualEvent.currentTarget.getBoundingClientRect();\r\n        setTooltipPosition({ x: actualEvent.pageX, y: actualEvent.pageY });\r\n        setTooltipContent(item);\r\n        setTooltipVisible(true);\r\n    };\r\n    \r\n    const handleMouseMove = (event) => {\r\n        setTooltipPosition({ x: event.pageX, y: event.pageY }); // Aktualizuj pozycję tooltipa podczas ruchu myszy\r\n    };\r\n    const handleMouseLeave = () => {\r\n        setTooltipVisible(false);\r\n    };\r\n\r\n    /** Obliczanie pozostałego czasu */\r\n    const calculateTimeLeft = (endtime) => {\r\n        const now = new Date();\r\n        const end = new Date(endtime);\r\n        const diff = end - now;\r\n\r\n        if (diff <= 0) return \"Zakończono\";\r\n\r\n        const hours = Math.floor(diff / (1000*60*60));\r\n        const minutes = Math.floor((diff % (1000*60*60)) / (1000*60));\r\n        const seconds = Math.floor((diff % (1000*60)) / 1000);\r\n\r\n        return`${hours}h ${minutes}m ${seconds}s`;\r\n    };\r\n\r\n    /** Aktualizowanie czasu pozostałego */\r\n    const updateTimers = () => {\r\n        setTimers(prevTimers => {\r\n            const newTimers = { ...prevTimers }; // Kopia obiektu stanu\r\n            marketItems.forEach(item => {\r\n                if (item.endTime) { // Upewnij się, że masz poprawną nazwę pola\r\n                    newTimers[item._id] = calculateTimeLeft(item.endTime);\r\n                }\r\n            });\r\n            return newTimers;\r\n        });\r\n    };\r\n\r\n    /** Wystawianie przedmiotu na sprzedaż */\r\n    const handleSell = async (type) => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token || !selectedItem) {\r\n            console.warn('Brak tokenu lub nie wybrano przedmiotu');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/api/market/sell\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    ...sellData,\r\n                    itemId: selectedItem._id,\r\n                    type\r\n                })\r\n            });\r\n            if (!response.ok) {\r\n                console.error('Błąd wystawiania przedmiotu:', response.statusText);\r\n                return;\r\n            }\r\n            alert('Przedmiot został wystawiony!');\r\n            fetchMarketItems();\r\n            setIsSellModalOpen(false);\r\n        } catch (error) {\r\n            console.error('Błąd wystawiania przedmiotu:', error);\r\n        }\r\n    };\r\n\r\n    const handleBuy = async (marketItem) => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.warn('Brak tokenu w localStorage');\r\n            return;\r\n        }\r\n        console.log(\"🛒 Kupuję przedmiot:\", marketItem);\r\n    \r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/api/market/buy\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ marketItemId: marketItem._id }) // 🔥 Poprawiony klucz!\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                console.error('Błąd zakupu przedmiotu:', response.statusText);\r\n                return;\r\n            }\r\n    \r\n            alert('Przedmiot został kupiony!');\r\n            fetchMarketItems();\r\n            fetchUserItems();\r\n        } catch (error) {\r\n            console.error('Błąd zakupu przedmiotu:', error);\r\n        }\r\n    };\r\n    \r\n    const handleBid = async (marketItem, bidAmount) => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.warn('Brak tokenu w localStorage');\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/api/market/bid\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ \r\n                    marketItemId: marketItem._id,\r\n                    bidAmount: parseInt(bidAmount) // Konwertujemy wartość do liczby\r\n                })\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                console.error('Błąd licytacji:', response.statusText);\r\n                return;\r\n            }\r\n    \r\n            alert('Oferta została złożona!');\r\n            fetchMarketItems();\r\n        } catch (error) {\r\n            console.error('Błąd licytacji:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    return (\r\n        <div className=\"w-full h-full bg-black1 flex justify-center p-5 flex-col space-y-4\">\r\n            {/* Panel nawigacyjny */}\r\n            <div className=\"flex justify-around w-full p-4 bg-maincolor1 rounded-xl mb-4 shadow-lg sticky top-0 z-10\">\r\n                <button onClick={() => setActiveTab(\"market\")} className=\"text-maincolor4 text-lg hover:text-blue-600 transition-all\">\r\n                    Market\r\n                </button>\r\n                <button onClick={() => setActiveTab(\"inventory\")} className=\"text-maincolor4 text-lg hover:text-blue-600 transition-all\">\r\n                    Inventory\r\n                </button>\r\n            </div>\r\n\r\n            {/* Widok Marketu */}\r\n            {activeTab === \"market\" && (\r\n                <div className=\"flex-grow overflow-y-auto\">\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 max-h-[80vh] overflow-y-auto p-4\">\r\n                        {marketItems.length === 0 ? (\r\n                            <p className=\"text-maincolor4 text-center\">Brak przedmiotów na markecie.</p>\r\n                        ) : (\r\n                            marketItems.map((item) => {\r\n                                const marketItem = item.item || {}; // Upewniamy się, że `item` istnieje\r\n\r\n                                return (\r\n                                    <div key={item._id} className=\"bg-gradient-to-r from-maincolor1 to-black border-2 border-maincolor1 rounded-xl p-4 shadow-xl transform hover:scale-105 transition-all\"\r\n                                        onMouseEnter={(event) => handleMouseEnter(event, marketItem)}\r\n                                        onMouseLeave={handleMouseLeave}\r\n                                        onMouseMove={handleMouseMove}>\r\n                                        <img src={`images/${marketItem.photo || \"default\"}.png`} \r\n                                            alt={marketItem.name || \"Brak zdjęcia\"} \r\n                                            className=\"w-full h-32 object-cover rounded-xl mb-2 border-4 border-maincolor4 shadow-md\" />\r\n                                            <h3 className=\"text-xl text-maincolor4 mb-2 font-bold\">{marketItem.name || \"Brak nazwy\"}</h3>\r\n                                        \r\n                                        {/* Poprawne wyświetlanie ceny */}\r\n                                        <p className=\"text-maincolor4 font-bold mt-2\">\r\n                                            {item.type === \"fixed\" ? (\r\n                                                <>Cena: {item.buyoutPrice}</>\r\n                                            ) : (\r\n                                                <>\r\n                                                    {item.currentBid ? (\r\n                                                        <>Aktualna oferta: {item.currentBid}</>\r\n                                                    ) : (\r\n                                                        <>Cena startowa: {item.startingPrice}</>\r\n                                                    )}\r\n                                                </>\r\n                                            )}\r\n                                        </p>\r\n                                        {/* Wyświetlanie czasu do końca */}\r\n                                        <p className=\"text-maincolor4 font-bold mt-2\">\r\n                                        Czas do końca: {timers[item._id] !== undefined ? timers[item._id] : \"Ładowanie...\"}\r\n                                        </p>\r\n                                        \r\n                                        {/* Przycisk kupna lub licytacji */}\r\n                                        {item.type === \"fixed\" ? (\r\n                                            <button\r\n                                                onClick={() => handleBuy(item)}\r\n                                                className=\"mt-3 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-all\"\r\n                                            >\r\n                                                Kup\r\n                                            </button>\r\n                                        ) : (\r\n                                            <>\r\n                                                <input \r\n                                                    type=\"number\" \r\n                                                    placeholder=\"Twoja oferta\" \r\n                                                    className=\"w-full p-2 border rounded mb-2 text-black\"\r\n                                                    onChange={(e) => setSellData({ ...sellData, price: e.target.value })}\r\n                                                />\r\n                                                <button\r\n                                                    onClick={() => handleBid(item, sellData.price)}\r\n                                                    className=\"mt-3 bg-yellow-500 text-black py-2 px-4 rounded-lg hover:bg-yellow-600 transition-all\"\r\n                                                >\r\n                                                    Licytuj\r\n                                                </button>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {/* Widok Inventory */}\r\n            {activeTab === \"inventory\" && (\r\n                <div className=\"flex-grow overflow-y-auto\">\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 max-h-[60vh]\">\r\n                        {userItems.length === 0 ? (\r\n                            <p className=\"text-maincolor4 text-center\">Twój ekwipunek jest pusty.</p>\r\n                        ) : (\r\n                            userItems.map((item) => (\r\n                                <div key={item._id} className=\"bg-maincolor1 rounded-xl p-4 shadow-xl transform hover:scale-105 transition-all\"\r\n                                    onMouseEnter={(event) => handleMouseEnter(event, item)}\r\n                                    onMouseLeave={handleMouseLeave}\r\n                                    onMouseMove={handleMouseMove}>\r\n                                    <h3 className=\"text-xl text-maincolor4 mb-2 font-bold\">{item.name}</h3>\r\n                                    <img src={`images/${item.photo || \"default\"}.png`} \r\n                                        alt={item.name} \r\n                                        className=\"w-full h-32 object-cover rounded-xl mb-2 border-4 border-maincolor4 shadow-md\" />\r\n                                    <p className=\"text-maincolor4 font-bold mt-2\">Cena sprzedaży: {Math.round(item.price / 3)} coins</p>\r\n                                    <button onClick={() => {setSelectedItem(item); setIsSellModalOpen(true);}}\r\n                                        className=\"mt-3 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-all\">\r\n                                        Sprzedaj\r\n                                    </button>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tooltip */}\r\n            {tooltipVisible && (\r\n                <div\r\n                    style={{\r\n                    position: \"fixed\",\r\n                    top: tooltipPosition.y+10,\r\n                    left: tooltipPosition.x+10,\r\n                    zIndex: 10,\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n                    color: \"white\",\r\n                    padding: \"8px\",\r\n                    borderRadius: \"20px\",\r\n                    \r\n                    }}\r\n                    className={`border-4  ${tooltipContent?.element === \"fire\"\r\n                    ? \"border-red-500\"\r\n                    : tooltipContent?.element === \"water\"\r\n                    ? \"border-cyan-500\"\r\n                    : tooltipContent?.element === \"nature\"\r\n                    ? \"border-green-400\"\r\n                    : tooltipContent?.element === \"light\"\r\n                    ? \"border-yellow-500\"\r\n                    : tooltipContent?.element === \"dark\"\r\n                    ? \"border-purple-900\"\r\n                    : \"border-white\"} `}\r\n                >\r\n                    <h4 className=\"text-2xl font-bold\">{tooltipContent?.name}</h4>\r\n                    <img className=\"w-20 h-20\" src={`images/${tooltipContent?.photo}.png`}></img>\r\n                    <p className=\"text-lg font-bold\">TYPE: {tooltipContent?.type} </p>\r\n                    {tooltipContent?.power !== 0  &&(\r\n                    <p>POWER: +{tooltipContent?.power}</p>)}\r\n                    {tooltipContent?.vitality !== 0  &&(\r\n                    <p>VITALITY: +{tooltipContent?.vitality}</p>)}\r\n                    {tooltipContent?.strength !== 0  &&(\r\n                    <p>STRENGTH: +{tooltipContent?.strength}</p>)}\r\n                    {tooltipContent?.dexterity !== 0  &&(\r\n                    <p>DEXTERITY: +{tooltipContent?.dexterity}</p>)}\r\n                    {tooltipContent?.intelligence !== 0  &&(\r\n                    <p>INTELLIGENCE: +{tooltipContent?.intelligence}</p>)}\r\n                    {tooltipContent?.armor !== 0  &&(\r\n                    <p>ARMOR: +{tooltipContent?.armor}</p>)}\r\n                    <p><span>ELEMENT: </span>{\" \"}<span className={` ${\r\n                        tooltipContent?.element === \"fire\"\r\n                        ? \"text-red-500\"\r\n                        : tooltipContent?.element === \"water\"\r\n                        ? \"text-cyan-500\"\r\n                        : tooltipContent?.element === \"nature\"\r\n                        ? \"text-green-400\"\r\n                        : tooltipContent?.element === \"light\"\r\n                        ? \"text-yellow-500\"\r\n                        : tooltipContent?.element === \"dark\"\r\n                        ? \"text-purple-900\"\r\n                        : \"text-white\"} font-bold`}>{tooltipContent?.element}</span></p>\r\n        \r\n                </div>\r\n            )}\r\n\r\n        {/*Modal do wystawiania przedmiotów */}\r\n        {isSellModalOpen && selectedItem && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n            <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/4\">\r\n                <h2 className=\"text-lg font-bold mb-4 text-maincolor4\">Sprzedaj lub Licytuj</h2>\r\n                <h3 className=\"font-bold mb-4 text-maincolor4\">{selectedItem.name}</h3>\r\n                <label className=\"block mb-2 text-maincolor4\">Cena</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={sellData.price}\r\n                    onChange={(e) => setSellData({ ...sellData, price: e.target.value})}\r\n                    className=\"w-full p-2 border rounded mb-4 text-black\"\r\n                />\r\n                <label className=\"block mb-2 text-maincolor4\">Czas trwania</label>\r\n                <select\r\n                    value={sellData.duration}\r\n                    onChange={(e) => setSellData({ ...sellData, duration: e.target.value })}\r\n                    className=\"w-full p-2 border rounded mb-4 text-black\"\r\n                >\r\n                    <option value=\"2\">2 godziny</option>\r\n                    <option value=\"8\">8 godzin</option>\r\n                    <option value=\"24\">24 godziny</option>\r\n                </select>\r\n                <p className=\"text-maincolor4 font-bold\">Prowizja: {Math.floor(sellData.price * (sellData.duration === \"2\" ? 0.02 : sellData.duration === \"8\" ? 0.03 : 0.04))}</p>\r\n                <div className=\"flex flex-col md:flex-row justify-end mt-4 p-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n                    <button\r\n                        onClick={() => handleSell('fixed')}\r\n                        className=\"border-maincolor2 rounded-xl text-maincolor4 border py-2 px-4 w-full md:w-1/3 hover:border-maincolor5 hover:shadow-maincolor5 hover:bg-maincolor4 shadow-buttonshadow transition duration-300 hover:text-black1 hover:bg-opacity-75\"\r\n                    >\r\n                        Sprzedaj\r\n                    </button>\r\n                    <button\r\n                        onClick={() => handleSell('auction')}\r\n                        className=\"border-maincolor2 rounded-xl text-maincolor4 border py-2 px-4 w-full md:w-1/3 hover:border-maincolor5 hover:shadow-maincolor5 hover:bg-maincolor4 shadow-buttonshadow transition duration-300 hover:text-black1 hover:bg-opacity-75\"\r\n                    >\r\n                        Licytuj\r\n                    </button>\r\n                    <button\r\n                        onClick={() =>{\r\n                            setIsSellModalOpen(false);\r\n                            setSelectedItem(null);\r\n                        }}\r\n                        className=\"border-maincolor2 rounded-xl text-maincolor4 border py-2 px-4 w-full md:w-1/3 hover:border-maincolor5 hover:shadow-maincolor5 hover:bg-maincolor4 shadow-buttonshadow transition duration-300 hover:text-black1 hover:bg-opacity-75\"\r\n                    >\r\n                        Anuluj\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Market;\r\n","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RequireAuth.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FightScreen.js",["215","216","217","218","219","220","221","222"],[],"import React, { useState, useEffect,useRef } from 'react'\r\nimport create from 'zustand';\r\n\r\nfunction FightScreen({creatureFightData, creatureFightCloseButton}){\r\n    const [visibleItems, setVisibleItems] = useState(0);\r\n    const fullFightLenght = creatureFightData.fight.fightData.creature1.info.length + creatureFightData.fight.fightData.creature2.info.length;\r\n    const [creature1ActualHp ,setCreature1ActualHp] = useState(creatureFightData.fight.fullhpcreature1);\r\n    const [creature2ActualHp ,setCreature2ActualHp] = useState(creatureFightData.fight.fullhpcreature2);\r\n    const [infoSpeed, setInfoSpeed] = useState(1000);\r\n    const scrollRef = useRef(null);\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        if (visibleItems < fullFightLenght) {\r\n            const timer = setTimeout(() => {\r\n                setVisibleItems((prev) => prev + 1);\r\n                if(visibleItems%2 === 0)\r\n                {\r\n                    changeCreature2Life(creatureFightData.fight.fightData.creature1.dmg[visibleItems/2])\r\n                }\r\n                else\r\n                {\r\n                    changeCreature1Life(creatureFightData.fight.fightData.creature2.dmg[Math.floor(visibleItems/2)])\r\n                }\r\n            }, infoSpeed); // Zwiększa licznik co sekundę\r\n            \r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [visibleItems, creatureFightData.fight.fightData.creature1.info.length]);\r\n    useEffect(() => {\r\n        if (scrollRef.current) {\r\n          scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n        }\r\n      }, [visibleItems]);\r\n    const SkipClick=()=>{\r\n        setInfoSpeed(10);\r\n    }\r\n    const changeCreature1Life =(life)=>\r\n    {\r\n        if(creature1ActualHp - life >=0){\r\n        setCreature1ActualHp(creature1ActualHp - life);\r\n        }else(setCreature1ActualHp(0))\r\n    }\r\n    const changeCreature2Life =(life)=>\r\n    {\r\n        if(creature2ActualHp - life >=0){\r\n            setCreature2ActualHp(creature2ActualHp - life);\r\n            }else(setCreature2ActualHp(0));\r\n    }\r\n    return(<div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col\">\r\n        <div className=\"relative w-[85vw] h-[65vh] mt-[10vw] items-center justify-center text-maincolor4 flex rounded-3xl z-10 \">\r\n            {/*Panel ze zdjęciami*/}\r\n            \r\n            <div className='absolute mt-[1vw] top-0 left-1/2 transform -translate-x-1/2 w-[83vw] h-[32vw] '>\r\n                <div className='h-full aspect-square border-4 border-maincolor2 left-0 rounded-3xl '>\r\n                    <img src={`images/${creatureFightData.speciesPhotos[0][0]}.png`} className='rounded-2xl'></img>\r\n                </div>\r\n                <div className='absolute h-full aspect-square border-4 border-maincolor5 right-0 top-0 rounded-3xl'>\r\n                    <img src={`images/${creatureFightData.speciesPhotos[1][0]}.png`} className='rounded-2xl'></img>\r\n                </div>\r\n            </div>\r\n            {/*Panel z informacjami */}\r\n            <div className=' p-2 absolute left-1/2 transform -translate-x-1/2 top-0 mt-[1vw]  w-[16vw] h-[57vh] bg-gradient-to-r from-maincolor2 via-black to-maincolor5 rounded-3xl '>\r\n                <div   ref={scrollRef} className='w-full h-full bg-black rounded-2xl overflow-y-auto scrollbar-thin scrollbar-thumb-maincolor5 scrollbar-track-black'>\r\n                {Array.from({ length: visibleItems }).map((_, index)=>(\r\n                    <div key={index}>\r\n                        {index%2===0 ?(\r\n                            <>\r\n                            {creatureFightData.fight.fightData.creature1.info[index/2] === \"Dodge\"?(\r\n                        <div className='relative w-full h-[2hw]  p-1 flex justify-between'>\r\n                            <div  className='text-maincolor3'>Atak for 0</div>\r\n                            <div className='text-maincolor5  '>{creatureFightData.fight.fightData.creature1.info[index/2]}</div>\r\n                        </div>\r\n                    ):(<div className='relative w-full h-[2hw]  p-1'><div className='text-maincolor3'>{creatureFightData.fight.fightData.creature1.info[index/2]}  {creatureFightData.fight.fightData.creature1.dmg[index/2]}</div></div>)\r\n                    }\r\n                            </>\r\n                ):(\r\n                    <>\r\n                    {creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)] === \"Dodge\"?(\r\n                        <div className='relative w-full h-[2hw]  p-1 flex justify-between'>\r\n                            <div className='text-maincolor3  '>{creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)]}</div>\r\n                            <div  className='text-maincolor5 '>Atak for 0</div>\r\n                        </div>\r\n                    ):(<div className='relative w-full h-[2hw] p-1'><div className='flex items-center justify-end text-maincolor5'>{creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)]}  {creatureFightData.fight.fightData.creature2.dmg[Math.floor(index/2)]}</div></div>)\r\n                    \r\n                    }\r\n                    </>)}\r\n                    </div>\r\n                ))}\r\n                    {visibleItems === fullFightLenght &&(\r\n                        <div className='w-full h-[2hw] relative'>{creatureFightData.fight.whoWon === \"c1\"?(\r\n                            <>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 '>You Win</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[2vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/money.png\"></img><p>{creatureFightData.gold}</p>{creatureFightData.bonusGold > 0 &&(<span className='ml-2 text-green-300'>+ {creatureFightData.bonusGold} </span>)}</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[5vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/experience.png\"></img><p>{creatureFightData.exp}</p>{creatureFightData.bonusExp > 0 && (<span className='ml-2 text-green-300'>+ {creatureFightData.bonusExp}</span>)}</div>\r\n                                </>\r\n                        ):(<>\r\n                        <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 '>You Lose</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[2vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/money.png\"></img><p>{creatureFightData.gold}</p>{creatureFightData.bonusGold > 0 &&(<span className='ml-2 text-green-300'>+ {creatureFightData.bonusGold}</span>)}</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[5vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/experience.png\"></img><p>{creatureFightData.exp}</p>{creatureFightData.bonusExp > 0 && (<span className='ml-2 text-green-300'>+ {creatureFightData.bonusExp}</span>)}</div>\r\n                            </>)}</div>\r\n                    )\r\n                    }\r\n                   \r\n                    {console.log(fullFightLenght)}\r\n                </div>\r\n            </div>\r\n            {visibleItems !== fullFightLenght ? (\r\n                <button onClick={()=>SkipClick()}className='absolute left-1/2 transform -translate-x-1/2 bottom-[0.1vw] w-[10vw] h-[4.5vh] bg-gradient-to-r from-maincolor3 to-maincolor5 mb-1 rounded-full border-4 border-black'>SKIP</button>\r\n            ):(\r\n                <button onClick={()=>creatureFightCloseButton()}className='absolute left-1/2 transform -translate-x-1/2 bottom-[0.1vw] w-[10vw] h-[4.5vh] bg-gradient-to-r from-maincolor3 to-maincolor5 mb-1 rounded-full border-4 border-black'>ACCEPT</button> \r\n            )\r\n            }\r\n            <div className='absolute left-[2vw] bottom-[0.8vh]  w-[30vw] h-[4.5vh] border-4 border-maincolor4 rounded-2xl'>\r\n                <div className='w-full h-full bg-maincolor3 rounded-lg relative'>\r\n                    <div className='h-full bg-maincolor4 rounded-lg' style={{width:`${(creatureFightData.fight.fullhpcreature1-creature1ActualHp)/creatureFightData.fight.fullhpcreature1 * 100}%`}}></div>\r\n                </div>\r\n                <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 text-black'>{creature1ActualHp}/{creatureFightData.fight.fullhpcreature1}</div>\r\n            </div>\r\n           \r\n                     \r\n            <div className='absolute right-[2vw] bottom-[0.8vh]  w-[30vw] h-[4.5vh] border-4 border-maincolor4 rounded-2xl'>\r\n                <div className='w-full h-full bg-maincolor5 rounded-lg relative '>\r\n                    <div className=' absolute h-full bg-maincolor4 rounded-lg right-0' \r\n                    style={{width:`${(creatureFightData.fight.fullhpcreature2-creature2ActualHp)/creatureFightData.fight.fullhpcreature2 *100}%`}}></div>\r\n                    <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 text-black'>{creature2ActualHp}/{creatureFightData.fight.fullhpcreature2}</div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>)\r\n}\r\nexport default FightScreen;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RedirectIfLoggedIn.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Misions.js",["223","224","225","226","227","228","229","230","231","232"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Misions({ data, creatureFightActiveButton }) {\r\n\r\n\r\n  const initialTimes = [10, 50, 70, 90, 300];\r\n  const [timeLeftTable, setTimeLeftTable] = useState(initialTimes);\r\n  const [remainingTimes, setRemainingTimes] = useState([]);\r\n  const [spiecesPhotos, setSpeciesPhoto] = useState(null);\r\n  const [creaturesData, setCreaturesData] = useState(null);\r\n  const [activeCreature, setActiveCreature] = useState(0);\r\n  const [missionChoose, setMissionChoose] = useState(null);\r\n  const [creaturesOnMission, setCreaturesOnMission] = useState([]);\r\n  const [creaturesOnMissionPhotos, setCreaturesOnMissionPhotos] = useState([]);\r\n  const [missionsFullTime, setMissionsFullTime] = useState([]);\r\n  const [fightData, setFightData] = useState(null);\r\n \r\n\r\nuseEffect(() => {\r\n  if (remainingTimes.length === 0) return; // Jeśli brak danych, nie uruchamiaj timera\r\n\r\n  const timer = setInterval(() => {\r\n    setRemainingTimes((prevTimes) =>\r\n      prevTimes.map((time) => Math.max(time - 1, 0)) // Zmniejsz czas o 1 sekundę, ale nie poniżej 0\r\n    );\r\n  }, 1000);\r\n\r\n  return () => clearInterval(timer); // Wyczyść timer przy odmontowaniu\r\n}, [remainingTimes]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    const loadData = async()=>{\r\n      await fetchData();\r\n      console.log(creaturesData);\r\n      console.log(spiecesPhotos);\r\n    };\r\n    loadData();\r\n  },[]);\r\n  const fetchData = async()=>{\r\n    const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/missionsInfo ', {\r\n          method: 'GET',\r\n          headers: {\r\n              'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n          },\r\n      });\r\n\r\n      if (!response.ok) {\r\n          console.error('Błąd pobierania danych użytkownika:', response.statusText);\r\n          return;\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(data);\r\n      setSpeciesPhoto(data.speciesPhotos)\r\n      setCreaturesData(data.creatures);\r\n      const creaturesOnMission = data.creatures.filter(\r\n        (creature) => creature.timeOfEndOfMission !== null\r\n      );\r\n      setCreaturesOnMission(creaturesOnMission);\r\n      const photosOnMission = data.creatures.reduce((result, creature, index) => {\r\n        if (creature.timeOfEndOfMission !== null) {\r\n          result.push(data.speciesPhotos[index]); // Dodaj zdjęcie odpowiadające indeksowi stworka\r\n        }\r\n        return result;\r\n      }, []);\r\n      console.log(creaturesOnMission);\r\n      setCreaturesOnMissionPhotos(photosOnMission);\r\n      const times = creaturesOnMission.map((creature) => {\r\n        const endTime = new Date(creature.timeOfEndOfMission);\r\n        const currentTime = new Date();\r\n        const diffInSeconds = Math.max(Math.floor((endTime - currentTime) / 1000), 0); // Pozostały czas w sekundach\r\n        return diffInSeconds;\r\n      });\r\n      console.log(times,\"times\");\r\n      setRemainingTimes(times);\r\n      const activeMissionTimes = creaturesOnMission.flatMap((creature) =>\r\n        creature.misions\r\n          .filter((mission) => mission.isThisMissionActive) // Filtruj tylko aktywne misje\r\n          .map((mission) => mission.timeOfMission)         // Pobierz timeOfMission\r\n      );\r\n      \r\n      console.log(activeMissionTimes, \"Czasy aktywnych misji\");\r\n      setMissionsFullTime(activeMissionTimes);\r\n    \r\n\r\n  } catch (error) {\r\n      console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n  }\r\n  }\r\n\r\n  const ClaimMission = async (creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/ClaimMission?creatureId=${creatureId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        if (response.bonusMessage) {\r\n          alert(response.bonusMessage);\r\n      }\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n\r\n  // Formatowanie czasu w minutach i sekundach\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n    return `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;\r\n  };\r\n  const sendCreatureOnMission = async(creature, mission)=>\r\n  {\r\n    const token = localStorage.getItem('token');\r\n      if (!token) {\r\n          console.warn('Brak tokenu w localStorage');\r\n          return;\r\n      }\r\n      try {\r\n        if(!creature)\r\n        {\r\n          console.warn('Creature not choosed');\r\n          return;\r\n        }\r\n        if(!mission)\r\n          {\r\n            console.warn('Mission not choosed');\r\n            return;\r\n          }\r\n        const creatureId = creature._id;\r\n        const missionId = mission._id;\r\n        console.log(missionId,\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\");\r\n        const response = await fetch(`http://localhost:8080/api/SendOnMission?missionId=${missionId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        const data = await response.json();\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  }\r\n  const changeCreature = (number)=>{\r\n    setActiveCreature(number);\r\n    setMissionChoose(null);\r\n  }\r\n  const changedMission = (number)=>{\r\n    setMissionChoose(number);\r\n  }\r\n  const acceptMissionClick = async(creature) =>{\r\n    const mission = creature.misions[missionChoose];\r\n    console.log(mission,\"AAAAAAAAAAAAAAAAAAAAAAAA\");\r\n    await sendCreatureOnMission(creature, mission);\r\n    await fetchData();\r\n  }\r\n\r\n  const claimMissionClick = async(creature) =>{\r\n    const creatureId = creature._id;\r\n    \r\n    await ClaimMission(creatureId).then((response)=>{\r\n      creatureFightActiveButton(response);\r\n    })\r\n    await fetchData();\r\n\r\n  }\r\n  const placeForMissions = Array(6).fill(\"\");\r\n  const missions = Array(3).fill(\"\");\r\n  return (\r\n    <div className=\"absolute w-full bg-black1 h-screen text-maincolor4\">\r\n    {creaturesData && spiecesPhotos?(\r\n      <div>\r\n      {placeForMissions.map((_, index) => (\r\n        <div\r\n          key={index} // Dodanie klucza\r\n          className=\"w-[55vw] bg-gradient-to-r from-black to-maincolor1 h-[15vh] m-[1.5vh] rounded-3xl p-[1vh] border-2 border-maincolor2\"\r\n        >\r\n          {creaturesOnMission[index] ?(\r\n\r\n          \r\n          <div className=\"w-full h-full bg-gradient-to-r from-maincolor1 to-black border border-maincolor1 rounded-3xl border-1 flex items-center justify-between px-4\">\r\n            \r\n            <div className=\"ml-[1vh] mr-[3vh] w-[10vh] h-[10vh] rounded-full\">\r\n              <img src={`images/${creaturesOnMissionPhotos[index][0]}.png`} className=\"rounded-full\" alt=\"Mission\" />\r\n            </div>\r\n            <div className=\"bg-gradient-to-r from-black to-maincolor5 w-4/5 h-2/5  rounded border-maincolor4 border-4 relative\">\r\n              <div\r\n                className={`h-full bg-maincolor1 absolute right-0  border-maincolor4 `}\r\n                style={{ width: `${(remainingTimes[index] / (missionsFullTime[index]*60)) * 100 }%` }}\r\n              ></div>\r\n            </div>\r\n            {remainingTimes[index] / (missionsFullTime[index]*60) > 0 ?\r\n            (<div className=\"text-white ml-auto text-[1.5vw] w-[6vh] ml-[3vh]\">{formatTime(remainingTimes[index])}</div>):(\r\n            <div className=\" w-[6vh] h-[3vh] ml-[3vh]\"><button onClick={()=>claimMissionClick(creaturesOnMission[index])} className=\"bg-gradient-to-r from-maincolor3 to-maincolor5 w-full h-[4vh] rounded-2xl text-black font-extrabold border-2\">CLAIM</button></div>) \r\n            }\r\n          </div>\r\n):(<div></div>)}\r\n        </div>\r\n      ))}\r\n      <div className=\"w-[22vw] h-[50vh] bg-maincolor1 absolute right-0 top-0 m-[1vw] rounded-3xl p-[1vw]\">\r\n        <div className=\"w-full h-full flex grid grid-cols-2 grid-rows-3 gap-[1vw]\">\r\n          {placeForMissions.map((_,index) => (\r\n          <div className=\" grid place-items-center  \">\r\n            <div className=\"relative h-[14vh] aspect-square bg-maincolor1 rounded-2xl outline outline-4 outline-maincolor4\">\r\n              {creaturesData[index]?(\r\n              <div onClick={()=>changeCreature(index)}>\r\n                {!creaturesData[index].timeOfEndOfMission ?(\r\n                <img src={`images/${spiecesPhotos[index][0]}.png`}className={`rounded-2xl ${activeCreature === index? \"border-8 border-maincolor5\":\"\"}`}></img>\r\n                ):(<img src={`images/${spiecesPhotos[index][0]}.png`} className={`rounded-2xl grayscale ${activeCreature === index? \"border-8 border-black\":\"\"}`}></img>)}\r\n                </div>):(<div></div>)\r\n              }\r\n            </div>\r\n          </div>\r\n          )\r\n          )\r\n          }\r\n        </div>\r\n      </div>\r\n        <div className=\"w-[22vw] h-[45vh] bg-maincolor1 absolute right-0 bottom-0 m-[1vw] rounded-3xl \">\r\n          <div className=\"h-[5vh] m-[1.5vh] rounded-lg border-4 border-black flex items-center justify-center bg-gradient-to-r from-maincolor5 via-black to-maincolor2 relative\"><span className=\"z-10\">{creaturesData[activeCreature].energy}</span><div className=\"h-full bg-maincolor1 rounded-sm absolute top-0 right-0 z-0\" style={{ width: `${100 - creaturesData[activeCreature].energy}%` }}></div></div>\r\n            {!creaturesData[activeCreature].timeOfEndOfMission ? (<div>\r\n            {missions.map((_,index)=>(\r\n              <div className={`h-[9vh] m-[1.5vh] p-2 rounded-3xl ${missionChoose === index?\"bg-gradient-to-r from-maincolor4 to-maincolor5\":\"bg-gradient-to-r from-black to-maincolor5\"}`} onClick={()=>changedMission(index)}>\r\n                <div className=\"w-full h-full bg-maincolor1 rounded-2xl p-[0.5vw] relative\">\r\n                  <div className=\"absolute right-0 bottom-1\"><img src=\"images/money.png\" className=\"w-[2vw]\"></img>{creaturesData[activeCreature].misions[index].goldForMission}</div>\r\n                  <div className=\"absolute left-1 bottom-1\"><img src=\"images/experience.png\" className=\"w-[2vw]\"></img>{creaturesData[activeCreature].misions[index].expForMission}</div>\r\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-xl font-extrabold\"><p>{creaturesData[activeCreature].misions[index].timeOfMission} MINUTES</p></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n          <div className=\"w-full h-[4vh] flex justify-center items-center\">\r\n            <button onClick={()=>acceptMissionClick(creaturesData[activeCreature])} className=\"w-[6vw] h-[4vh] bg-gradient-to-r from-maincolor2 to-maincolor5 text-black text-2xl font-extrabold rounded-3xl border-2 border-maincolor4 hover:text-maincolor4\">ACCEPT</button>\r\n          </div>\r\n          </div>):(<div className=\"ml-[2vh] mt-[12vh] w-[35vh] h-[6vh] bg-maincolor5 flex items-center justify-center text-black font-extrabold text-[3vh] rounded-xl\">IS ON MISSION</div>)}\r\n          </div>\r\n          </div>):(<div>LOADING</div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Misions;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildView.js",["233"],[],"import React, { useState, useEffect } from 'react';\r\nimport GuildDetails from './GuildDetails';\r\nimport GuildInvitations from './GuildInvitations';\r\n\r\nfunction GuildView() {\r\n    const [guilds, setGuilds] = useState([]);\r\n    const [selectedGuild, setSelectedGuild] = useState(null);\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const [newGuildName, setNewGuildName] = useState('');\r\n    const [newGuildGoal, setNewGuildGoal] = useState('');\r\n    const [newGuildMaxMembers, setNewGuildMaxMembers] = useState(10);\r\n    const [newGuildExpBonus, setNewGuildExpBonus] = useState(1);\r\n    const [newGuildGoldBonus, setNewGuildGoldBonus] = useState(1);\r\n    const [userExp, setUserExp] = useState(0);\r\n    const [userGold, setUserGold] = useState(0);\r\n    const userId = localStorage.getItem('userId');\r\n    const [userTezaInput, setUserTezaInput] = useState(\"\");\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            console.error('userId jest null! Użytkownik musi być zalogowany.');\r\n            console.log('Dostępne wartości localStorage:', localStorage);\r\n            console.log('Token:', localStorage.getItem('token'));\r\n            console.log('UserId:', localStorage.getItem('userId'));\r\n            return;\r\n        }\r\n        console.log('userId w localStorage:', userId); \r\n        fetchUserData();\r\n        fetchGuilds();\r\n        fetchOnlineUsers();\r\n\r\n        // Ustawienie interwału do odświeżania listy użytkowników online co 5 sekund\r\n        const intervalId = setInterval(fetchOnlineUsers, 5000);\r\n\r\n        // Czyszczenie interwału po odmontowaniu komponentu\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/userData', {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać danych użytkownika');\r\n\r\n            setUserExp(result.exp);\r\n            setUserGold(result.money);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania danych użytkownika:', error.message);\r\n        }\r\n    };\r\n\r\n    const fetchGuilds = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/userGuilds', {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać gildii');\r\n            console.log('Odpowiedz z backendu:', result.guilds); \r\n            setGuilds(result.guilds || []);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania gildii:', error.message);\r\n        }\r\n    };\r\n\r\n    const fetchOnlineUsers = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/api/onlineUsers\", {\r\n                method: \"GET\",\r\n                headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}`, 'Content-Type': 'application/json' }\r\n            });\r\n            const result = await response.json();\r\n    \r\n            console.log(\"Odpowiedź z backendu o online użytkownikach:\", result.onlineUsers);\r\n            setOnlineUsers(result.onlineUsers || []);\r\n        } catch (error) {\r\n            console.error(\"Błąd podczas pobierania użytkowników online:\", error.message);\r\n        }\r\n    };\r\n\r\n    const createGuild = async () => {\r\n        try {\r\n            if (!newGuildName || !newGuildGoal || !newGuildMaxMembers) {\r\n                alert('Wszystkie pola są wymagane!');\r\n                return;\r\n            }\r\n            const minBonus = userExp < 50 ? 1 : 10;\r\n            const maxBonus = userExp < 50 ? 10 : 20;\r\n\r\n            if (newGuildExpBonus < minBonus || newGuildExpBonus > maxBonus ||\r\n                newGuildGoldBonus < minBonus || newGuildGoldBonus > maxBonus) {\r\n                alert(`❌ Nieprawidłowe wartości bonusów. Dla Twojego poziomu EXP dozwolone są wartości między ${minBonus}% a ${maxBonus}%.`);\r\n                return;\r\n            }\r\n\r\n            if (userGold < 50) {\r\n                alert('⚠ Nie masz wystarczająco złota, aby stworzyć gildię, kwota - 20.');\r\n                return;\r\n            }\r\n            const token = localStorage.getItem('token');\r\n            const guildData = {\r\n                name: newGuildName,\r\n                goal: newGuildGoal,\r\n                maxMembers: Number(newGuildMaxMembers),\r\n                bonus_exp: newGuildExpBonus,\r\n                bonus_gold: newGuildGoldBonus\r\n            };\r\n            console.log(\"🚀 Wysyłane dane do backendu:\", guildData); // DEBUG\r\n            const response = await fetch('http://localhost:8080/api/createGuild', {\r\n                method: 'POST',\r\n                headers: { Authorization: `Bearer ${token}`,'Content-Type': 'application/json' },\r\n                body: JSON.stringify(guildData),\r\n            });\r\n\r\n            const result = await response.json();\r\n            \r\n\r\n            if (!response.ok) {\r\n                if (result.error.includes('Najpierw opuść swoją obecną gildię')) {\r\n                    alert('⚠ Najpierw opuść swoją obecną gildię lub ją usuń, aby stworzyć nową.');\r\n                } else {\r\n                    alert(`❌ Nie udało się utworzyć gildii: ${result.error}`);\r\n                }\r\n                throw new Error(result.error || 'Nie udało się utworzyć gildii');\r\n            }\r\n            alert('Gildia została pomyślnie stworzona!');\r\n            setNewGuildName('');\r\n            setNewGuildGoal('');\r\n            setNewGuildMaxMembers(10);\r\n            setNewGuildExpBonus(minBonus);\r\n            setNewGuildGoldBonus(minBonus);\r\n            await fetchGuilds();\r\n            await fetchUserData();\r\n        } catch (error) {\r\n            console.error('Błąd podczas tworzenia gildii:', error.message);\r\n            alert('Nie udało się utworzyć gildii');\r\n        }\r\n    };\r\n    const handleTezaSubmit = async () => {\r\n        if (!userTezaInput.trim()) return; // Nie pozwalamy zapisać pustej tezy\r\n    \r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/setTeza', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify({ teza: userTezaInput })\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(\"Nie udało się zapisać tezy.\");\r\n            }\r\n    \r\n            alert(\"Teza została zapisana i wygaśnie za 30 minut!\");\r\n            setUserTezaInput(\"\"); // Reset inputa po zapisaniu\r\n        } catch (error) {\r\n            console.error(\"Błąd podczas zapisywania tezy:\", error);\r\n        }\r\n    };\r\n\r\n    const leaveGuild = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/leaveGuild', {\r\n                method: 'POST',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}`, 'Content-Type': 'application/json'  },\r\n            });\r\n    \r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się opuścić gildii');\r\n    \r\n            alert('Opuściłeś gildię');\r\n            await fetchGuilds();\r\n        } catch (error) {\r\n            console.error('Błąd podczas opuszczania gildii:', error.message);\r\n            alert('Nie udało się opuścić gildii');\r\n        }\r\n    };\r\n\r\n    const deleteGuild = async (guildId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/deleteGuild/${guildId}`, {\r\n                method: 'DELETE',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się usunąć gildii');\r\n\r\n            alert('Gildia została usunięta');\r\n            await fetchGuilds();\r\n        } catch (error) {\r\n            console.error('Błąd podczas usuwania gildii:', error.message);\r\n            alert('Nie udało się usunąć gildii');\r\n        }\r\n    };\r\n\r\n    const userGuilds = guilds.filter((guild) =>\r\n        guild.members.some((memberId) => memberId.toString() === userId)\r\n    );\r\n\r\n    if (selectedGuild) {\r\n        return <GuildDetails guild={selectedGuild} goBack={() => setSelectedGuild(null)} />;\r\n    }\r\n    return (\r\n        <div className=\"w-full h-screen justify-center bg-black flex flex-col p-5 justify-center\">\r\n            \r\n            {/* Kontener główny - 3x3 układ */}\r\n            <div className=\"w-full h-full grid grid-cols-3 grid-rows-2 gap-4\">\r\n                    \r\n                {/* Twoja Gildia - (1 rząd, 2 kolumny szerokości) */}\r\n                <div className=\"row-span-1  h-[23vh] col-span-2 bg-gradient-to-r from-black to-maincolor1 rounded-[30px] p-4 border-2\">\r\n                    <h2 className=\"text-white text-2xl font-bold\">Twoja gildia</h2>\r\n                    <ul className=\"space-y-4 mt-4\">\r\n                        {userGuilds.length > 0 ? userGuilds.map((guild) => (\r\n                            <li key={guild._id} className=\"p-4 bg-gray-800 rounded-xl flex justify-between items-center hover:bg-maincolor1 cursor-pointer border-2 border-white\"\r\n                                onClick={() => setSelectedGuild(guild)}>\r\n                                <div className=\"w-full flex justify-between items-center\">\r\n                                    <span className=\"text-white  text-lg font-bold\">{guild.name}</span>\r\n                                    <div className=\"flex items-center text-sm text-gray-300 space-x-6\">\r\n                                        <span>🎖 Bonus EXP: <span className=\"text-green-400\">{guild.bonus_exp}%</span></span>\r\n                                        <span className=\"flex items-center\">\r\n                                            💰 Bonus złota: <span className=\"text-yellow-400 ml-1\">{guild.bonus_gold}%</span>\r\n                                            <span className=\"w-5 h-5 ml-2\" />\r\n                                        </span>\r\n                                        <span>👥 {guild.members.length}/{guild.maxMembers}</span>\r\n                                    </div>\r\n    \r\n                                    {/* Przycisk akcji */}\r\n                                    {guild.ownerId === userId ? (\r\n                                        <button onClick={(e) => { e.stopPropagation(); deleteGuild(guild._id); }} \r\n                                            className=\"bg-maincolor2 text-white px-3 py-1 rounded\">\r\n                                            Usuń\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button onClick={(e) => { e.stopPropagation(); leaveGuild(); }} \r\n                                            className=\"bg-maincolor2 text-white px-3 py-1 rounded\">\r\n                                            Opuść\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </li>\r\n                        )) : <li className=\"text-gray-400\">Nie jesteś członkiem żadnej gildii</li>}\r\n                    </ul>\r\n                </div>\r\n    {/* Użytkownicy Online - (2 rząd, 1 kolumna szerokości, zajmuje cały rząd) */}\r\n    \r\n    <div className=\"row-span-2 col-span-1 w-[49vh]  w-skreen  h-[95vh] bg-maincolor1 rounded-[30px]  w-skreen p-4 border-2 flex flex-col\">\r\n                    <h2 className=\"text-white text-xl font-bold\">Użytkownicy online</h2>\r\n                    <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\r\n                        <h3 className=\"text-white text-lg font-semibold mb-2\">Dodaj swoją tezę</h3>\r\n                        <input type=\"text\" placeholder=\"Wpisz swoją myśl...\" value={userTezaInput}\r\n                            onChange={(e) => setUserTezaInput(e.target.value)}\r\n                            className=\"w-full p-2 rounded bg-gray-700 text-white\" />\r\n                        <button onClick={handleTezaSubmit} className=\"w-full mt-2 p-2 bg-gradient-to-r from-maincolor2 to-maincolor1 rounded text-white font-bold hover:bg-green-700\">\r\n                            Zapisz tezę \r\n                        </button>\r\n                    </div>\r\n    \r\n                    {/* Lista użytkowników */}\r\n                    <ul className=\"space-y-2 overflow-auto max-h-[50vh]\">\r\n                        {onlineUsers.length > 0 ? onlineUsers.map((user, index) => {\r\n                            const funnyEmojis = ['⚔️', '🛡️', '🏹', '🧙‍♂️', '🐉', '🕵️‍♂️', '💀', '👹', '👾', '⚡', '🔥', '🌪️', '☠️', '🛠️', '🏰', '🎭', '💎', '🃏', '🔮', '🧛‍♂️', '🦸‍♂️', '🐺'];\r\n                            const emoji = funnyEmojis[index % funnyEmojis.length];\r\n    \r\n                            return (\r\n                                <li key={user._id} className=\"p-3 bg-gray-800 text-white rounded flex items-center space-x-3\">\r\n                                    <span className=\"text-xl\">{emoji}</span>\r\n                                    <div className=\"flex flex-col\">\r\n                                        <span className=\"font-bold text-lg\">{user.username}</span>\r\n                                        {user.teza && user.teza.trim() !== \"\" && (\r\n                                            <span className=\"text-gray-400 text-sm italic\">„{user.teza}”</span>\r\n                                        )}\r\n                                        <span className=\"text-yellow-300 text-sm\">EXP: {user.exp}</span>\r\n                                    </div>\r\n                                </li>\r\n                            );\r\n                        }) : <li className=\"text-gray-400\">🚫 Brak użytkowników online... gdzie oni wszyscy poszli? 🧐</li>}\r\n                    </ul>\r\n                </div>\r\n                {/* Stwórz Gildię - (2 rząd, 1 kolumna szerokości) */}\r\n                <div className=\"row-span-2 h-[70vh] col-span-1 w-skreen mt-[-22vh] bg-maincolor1 rounded-[30px] p-4 border-2 flex flex-col\">\r\n                <h2 className=\"text-white text-xl font-bold\">Stwórz gildię</h2>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Nazwa gildii\"\r\n                        className=\"block w-full p-2 bg-gray-700 rounded mt-2\"\r\n                        value={newGuildName}\r\n                        onChange={(e) => setNewGuildName(e.target.value)}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Opis gildii\"\r\n                        className=\"block w-full p-2 bg-gray-700 rounded mt-2\"\r\n                        value={newGuildGoal}\r\n                        onChange={(e) => setNewGuildGoal(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Maksymalna liczba członków\"\r\n                        className=\"block text-white w-full p-2 bg-gray-700 rounded mt-2\"\r\n                        value={newGuildMaxMembers}\r\n                        onChange={(e) => setNewGuildMaxMembers(Number(e.target.value))}\r\n                    />\r\n                    <label className=\"text-white block mt-2\">Bonus EXP:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        min={userExp < 50 ? 1 : 10}\r\n                        max={userExp < 50 ? 10 : 20}\r\n                        className=\"text-white block w-full p-2 bg-gray-700 rounded\"\r\n                        value={newGuildExpBonus}\r\n                        onChange={(e) => setNewGuildExpBonus(Number(e.target.value))}\r\n                    />\r\n                    <label className=\"text-white block mt-2\">Bonus złota:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        min={userExp < 50 ? 1 : 10}\r\n                        max={userExp < 50 ? 10 : 20}\r\n                        className=\" text-white block w-full p-2 bg-gray-700 rounded\"\r\n                        value={newGuildGoldBonus}\r\n                        onChange={(e) => setNewGuildGoldBonus(Number(e.target.value))}\r\n                    />\r\n                    <button onClick={createGuild} className=\"w-full bg-gradient-to-r from-maincolor2 to-maincolor5 p-2 mt-3 rounded\">\r\n                        Stwórz Gildię\r\n                    </button>\r\n                </div>\r\n                \r\n                {/* Zaproszenia - (2 rząd, 1 kolumna szerokości) */}\r\n                <div className=\"row-span-1 h-[70vh] col-span-1 w-skreen mt-[-22vh] bg-gray-900 rounded-[30px] p-4 border-2 flex flex-col\">\r\n               \r\n                    \r\n                    <GuildInvitations fetchGuilds={fetchGuilds} />\r\n                </div>\r\n    \r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n    \r\n}\r\n\r\nexport default GuildView;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildDetails.js",["234"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction GuildDetails({ guild, goBack }) {\r\n    const [inviteLink] = useState('');\r\n    const [newMaxMembers, setNewMaxMembers] = useState(guild.maxMembers);\r\n    const [inviteUsername, setInviteUsername] = useState('');\r\n    const [inviteStatus, setInviteStatus] = useState('');\r\n    const userId = localStorage.getItem('userId'); \r\n    const isOwner = guild.ownerId === userId;\r\n    const [guildMembersUsernames, setGuildMembersUsernames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchGuildMembersUsernames(guild._id);\r\n    }, [guild._id]);\r\n\r\n    const fetchGuildMembersUsernames = async (guildId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/guilds/${guildId}/members`, {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać nazw użytkowników członków gildii');\r\n            setGuildMembersUsernames(result.members || []);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania nazw użytkowników członków gildii:', error.message);\r\n        }\r\n    };\r\n\r\n    const updateMaxMembers = async () => {\r\n\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może zmieniać limit użytkowników');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/updateMaxMembers/${guild._id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ maxMembers: newMaxMembers }),\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się zaktualizować limitu');\r\n            alert('Limit użytkowników został zaktualizowany');\r\n        } catch (error) {\r\n            console.error('Błąd:', error.message);\r\n        }\r\n    };\r\n\r\n    const removeMember = async (memberId) => {\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może usuwać członków');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/removeMember/${guild._id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ memberId }),\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się usunąć członka');\r\n            alert('Członek został usunięty');\r\n            fetchGuildMembersUsernames(guild._id); \r\n        } catch (error) {\r\n            console.error('Błąd:', error.message);\r\n        }\r\n    };\r\n\r\n    const sendInvite = async () => {\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może wysyłać zaproszenia');\r\n            return;\r\n        }\r\n        try {\r\n            if (!inviteUsername) {\r\n                alert('Wpisz nazwę użytkownika');\r\n                return;\r\n            }\r\n            const response = await fetch('http://localhost:8080/api/inviteToGuild', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ username: inviteUsername }),\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Błąd podczas wysyłania zaproszenia');\r\n\r\n            setInviteStatus(`Zaproszenie wysłane do użytkownika ${inviteUsername}`);\r\n            setInviteUsername('');\r\n        } catch (error) {\r\n            console.error('Błąd podczas wysyłania zaproszenia:', error.message);\r\n            setInviteStatus(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"absolute w-full  bg-black1 mt-[-1vh] text-maincolor4 flex justify-center items-center\">\r\n            <div className=\"w-[85vw] h-[80vh] bg-gradient-to-r from-black to-maincolor1 flex flex-col p-4 rounded-3xl shadow-lg  border-gray-700\">\r\n                \r\n                {/* Powrót */}\r\n                <button\r\n                    onClick={goBack}\r\n                    className=\"bg-gray-800 text-white px-5 py-2 rounded-lg mb-4 hover:bg-maincolor2 transition-all font-bold border-2 border-white\"\r\n                >\r\n                    ⬅ Powrót\r\n                </button>\r\n    \r\n                {/* Informacje o gildii */}\r\n                <div className=\"bg-gray-900 p-4 rounded-xl border-2 border-gray-600 shadow-md\">\r\n                    <h2 className=\"text-white text-3xl font-extrabold\">{guild.name}</h2>\r\n                    <p className=\"text-maincolor4 text-md mt-1\">🎯 Opis gildii: <span className=\"text-white\">{guild.goal}</span></p>\r\n                </div>\r\n    \r\n                {/* Lista członków */}\r\n                <div className=\"mt-4\">\r\n                    <h3 className=\"text-maincolor4 text-xl font-semibold mb-3\">👥 Członkowie:</h3>\r\n                    <ul className=\"grid grid-cols-2 md:grid-cols-1 gap-2 max-h-[40vh] overflow-auto\">\r\n                        {guildMembersUsernames.map((member) => (\r\n                            <li key={member._id} className=\"p-3 bg-gray-800 rounded-xl flex justify-between items-center hover:bg-black transition-all border-2 border-white shadow-md\">\r\n                                <span className=\"text-white text-md font-semibold\">\r\n                                    {member.username} {member.isOwner && \"👑 (Lider)\"}\r\n                                </span>\r\n                                {!member.isOwner && isOwner && (\r\n                                    <button\r\n                                        className=\"bg-maincolor2 text-white px-3 py-1 rounded-lg hover:bg-red-500 transition-all\"\r\n                                        onClick={() => removeMember(member._id)}\r\n                                    >\r\n                                        ❌ Usuń\r\n                                    </button>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n    \r\n                <div className=\"border-t-2 border-gray-600 my-3\"></div>\r\n    \r\n                {/* Panel właściciela */}\r\n                {isOwner && (\r\n                    <div className=\"grid grid-cols-2 gap-4 md:grid-cols-1\">\r\n                        \r\n                        {/* Zmiana limitu użytkowników */}\r\n                        <div className=\"mt-2\">\r\n                            <h3 className=\"text-maincolor4 text-lg font-semibold mb-1\">⚙️ Limit użytkowników</h3>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"block w-full p-2 bg-gray-700 text-white rounded-lg border-2 border-gray-500 focus:ring-2 focus:ring-blue-500\"\r\n                                value={newMaxMembers}\r\n                                onChange={(e) => setNewMaxMembers(Number(e.target.value))}\r\n                            />\r\n                            <button\r\n                                onClick={updateMaxMembers}\r\n                                className=\"w-full mt-2 bg-gradient-to-r from-blue-900 to-maincolor2 text-black font-bold py-2 px-4 rounded-lg hover:text-maincolor4 transition-all\"\r\n                            >\r\n                                ✅ Zaktualizuj\r\n                            </button>\r\n                        </div>\r\n    \r\n                        {/* Wysyłanie zaproszeń */}\r\n                        <div className=\"mt-2\">\r\n                            <h3 className=\"text-maincolor4 text-lg font-semibold mb-1\">📩 Wyślij zaproszenie</h3>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Nazwa użytkownika\"\r\n                                className=\"block w-full p-2 bg-gray-700 text-white rounded-lg border-2 border-gray-500 focus:ring-2 focus:ring-blue-500\"\r\n                                value={inviteUsername}\r\n                                onChange={(e) => setInviteUsername(e.target.value)}\r\n                            />\r\n                            <button\r\n                                onClick={sendInvite}\r\n                                className=\"w-full mt-2 bg-gradient-to-r from-blue-900 to-maincolor2 text-black font-bold py-2 px-4 rounded-lg hover:text-maincolor4 transition-all\"\r\n                            >\r\n                                ✉ Wyślij\r\n                            </button>\r\n                            {inviteStatus && (\r\n                                <p className=\"text-gray-300 mt-1\">{inviteStatus}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuildDetails;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildInvitations.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\i18n.js",[],[],{"ruleId":"235","severity":1,"message":"236","line":17,"column":6,"nodeType":"237","endLine":17,"endColumn":8,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":8,"column":10,"nodeType":"241","messageId":"242","endLine":8,"endColumn":25},{"ruleId":"235","severity":1,"message":"243","line":17,"column":6,"nodeType":"237","endLine":17,"endColumn":21,"suggestions":"244"},{"ruleId":"239","severity":1,"message":"245","line":6,"column":11,"nodeType":"241","messageId":"242","endLine":6,"endColumn":12},{"ruleId":"235","severity":1,"message":"243","line":20,"column":6,"nodeType":"237","endLine":20,"endColumn":24,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":68,"column":44,"nodeType":"249","messageId":"250","endLine":68,"endColumn":45,"suggestions":"251","suppressions":"252"},{"ruleId":"247","severity":1,"message":"253","line":68,"column":61,"nodeType":"249","messageId":"250","endLine":68,"endColumn":62,"suggestions":"254","suppressions":"255"},{"ruleId":"239","severity":1,"message":"256","line":1,"column":46,"nodeType":"241","messageId":"242","endLine":1,"endColumn":59},{"ruleId":"239","severity":1,"message":"257","line":137,"column":15,"nodeType":"241","messageId":"242","endLine":137,"endColumn":19},{"ruleId":"235","severity":1,"message":"258","line":179,"column":6,"nodeType":"237","endLine":179,"endColumn":8,"suggestions":"259"},{"ruleId":"260","severity":1,"message":"261","line":422,"column":132,"nodeType":"262","endLine":422,"endColumn":179},{"ruleId":"235","severity":1,"message":"263","line":101,"column":5,"nodeType":"237","endLine":101,"endColumn":7,"suggestions":"264"},{"ruleId":"239","severity":1,"message":"265","line":116,"column":11,"nodeType":"241","messageId":"242","endLine":116,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":204,"column":9,"nodeType":"262","endLine":204,"endColumn":80},{"ruleId":"260","severity":1,"message":"261","line":294,"column":9,"nodeType":"262","endLine":294,"endColumn":80},{"ruleId":"235","severity":1,"message":"266","line":35,"column":8,"nodeType":"237","endLine":35,"endColumn":15,"suggestions":"267"},{"ruleId":"239","severity":1,"message":"268","line":8,"column":10,"nodeType":"241","messageId":"242","endLine":8,"endColumn":25},{"ruleId":"239","severity":1,"message":"269","line":17,"column":9,"nodeType":"241","messageId":"242","endLine":17,"endColumn":29},{"ruleId":"239","severity":1,"message":"269","line":10,"column":9,"nodeType":"241","messageId":"242","endLine":10,"endColumn":29},{"ruleId":"235","severity":1,"message":"270","line":44,"column":8,"nodeType":"237","endLine":44,"endColumn":10,"suggestions":"271"},{"ruleId":"260","severity":1,"message":"261","line":84,"column":9,"nodeType":"262","endLine":84,"endColumn":107},{"ruleId":"235","severity":1,"message":"272","line":23,"column":8,"nodeType":"237","endLine":23,"endColumn":19,"suggestions":"273"},{"ruleId":"239","severity":1,"message":"265","line":89,"column":15,"nodeType":"241","messageId":"242","endLine":89,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":363,"column":21,"nodeType":"262","endLine":363,"endColumn":92},{"ruleId":"239","severity":1,"message":"274","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"235","severity":1,"message":"275","line":30,"column":8,"nodeType":"237","endLine":30,"endColumn":79,"suggestions":"276"},{"ruleId":"260","severity":1,"message":"261","line":57,"column":21,"nodeType":"262","endLine":57,"endColumn":110},{"ruleId":"260","severity":1,"message":"261","line":60,"column":21,"nodeType":"262","endLine":60,"endColumn":110},{"ruleId":"260","severity":1,"message":"261","line":95,"column":126,"nodeType":"262","endLine":95,"endColumn":181},{"ruleId":"260","severity":1,"message":"261","line":96,"column":126,"nodeType":"262","endLine":96,"endColumn":186},{"ruleId":"260","severity":1,"message":"261","line":100,"column":126,"nodeType":"262","endLine":100,"endColumn":181},{"ruleId":"260","severity":1,"message":"261","line":101,"column":126,"nodeType":"262","endLine":101,"endColumn":186},{"ruleId":"239","severity":1,"message":"277","line":7,"column":10,"nodeType":"241","messageId":"242","endLine":7,"endColumn":23},{"ruleId":"239","severity":1,"message":"278","line":7,"column":25,"nodeType":"241","messageId":"242","endLine":7,"endColumn":41},{"ruleId":"239","severity":1,"message":"279","line":16,"column":10,"nodeType":"241","messageId":"242","endLine":16,"endColumn":19},{"ruleId":"239","severity":1,"message":"280","line":16,"column":21,"nodeType":"241","messageId":"242","endLine":16,"endColumn":33},{"ruleId":"235","severity":1,"message":"281","line":46,"column":5,"nodeType":"237","endLine":46,"endColumn":7,"suggestions":"282"},{"ruleId":"239","severity":1,"message":"257","line":176,"column":15,"nodeType":"241","messageId":"242","endLine":176,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":246,"column":17,"nodeType":"262","endLine":246,"endColumn":154},{"ruleId":"260","severity":1,"message":"261","line":247,"column":20,"nodeType":"262","endLine":247,"endColumn":163},{"ruleId":"260","severity":1,"message":"261","line":263,"column":62,"nodeType":"262","endLine":263,"endColumn":110},{"ruleId":"260","severity":1,"message":"261","line":264,"column":61,"nodeType":"262","endLine":264,"endColumn":114},{"ruleId":"235","severity":1,"message":"283","line":36,"column":8,"nodeType":"237","endLine":36,"endColumn":10,"suggestions":"284"},{"ruleId":"239","severity":1,"message":"285","line":4,"column":12,"nodeType":"241","messageId":"242","endLine":4,"endColumn":22},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.","ArrayExpression",["286"],"no-unused-vars","'currentLanguage' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'i18n'. Either include it or remove the dependency array.",["287"],"'t' is assigned a value but never used.",["288"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["289","290"],["291"],"Unnecessary escape character: \\/.",["292","293"],["294"],"'useTransition' is defined but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserData'. Either include it or remove the dependency array.",["295"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'ShopData'. Either include it or remove the dependency array.",["296"],"'rect' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["297"],"'responseMessage' is assigned a value but never used.","'handleLanguageChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'newCreatureData.species' and 'photoName'. Either include them or remove the dependency array.",["298"],"React Hook useEffect has missing dependencies: 'fetchMarketItems' and 'updateTimers'. Either include them or remove the dependency array.",["299"],"'create' is defined but never used.","React Hook useEffect has missing dependencies: 'changeCreature1Life', 'changeCreature2Life', 'creatureFightData.fight.fightData.creature1.dmg', 'creatureFightData.fight.fightData.creature2.dmg', 'fullFightLenght', and 'infoSpeed'. Either include them or remove the dependency array.",["300"],"'timeLeftTable' is assigned a value but never used.","'setTimeLeftTable' is assigned a value but never used.","'fightData' is assigned a value but never used.","'setFightData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'creaturesData' and 'spiecesPhotos'. Either include them or remove the dependency array.",["301"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["302"],"'inviteLink' is assigned a value but never used.",{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"messageId":"309","fix":"310","desc":"311"},{"messageId":"312","fix":"313","desc":"314"},{"kind":"315","justification":"316"},{"messageId":"309","fix":"317","desc":"311"},{"messageId":"312","fix":"318","desc":"314"},{"kind":"315","justification":"316"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},"Update the dependencies array to be: [t]",{"range":"335","text":"336"},"Update the dependencies array to be: [i18n, i18n.language]",{"range":"337","text":"338"},"Update the dependencies array to be: [i18n, selectedLanguage]",{"range":"339","text":"340"},"removeEscape",{"range":"341","text":"316"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"342","text":"343"},"Replace the `\\` with `\\\\` to include the actual backslash character.","directive","",{"range":"344","text":"316"},{"range":"345","text":"343"},"Update the dependencies array to be: [fetchUserData]",{"range":"346","text":"347"},"Update the dependencies array to be: [ShopData]",{"range":"348","text":"349"},"Update the dependencies array to be: [fetchMessages, token]",{"range":"350","text":"351"},"Update the dependencies array to be: [newCreatureData.species, photoName]",{"range":"352","text":"353"},"Update the dependencies array to be: [activeTab, fetchMarketItems, updateTimers]",{"range":"354","text":"355"},"Update the dependencies array to be: [visibleItems, creatureFightData.fight.fightData.creature1.info.length, fullFightLenght, infoSpeed, changeCreature2Life, creatureFightData.fight.fightData.creature1.dmg, creatureFightData.fight.fightData.creature2.dmg, changeCreature1Life]",{"range":"356","text":"357"},"Update the dependencies array to be: [creaturesData, spiecesPhotos]",{"range":"358","text":"359"},"Update the dependencies array to be: [userId]",{"range":"360","text":"361"},[698,700],"[t]",[800,815],"[i18n, i18n.language]",[895,913],"[i18n, selectedLanguage]",[2088,2089],[2088,2088],"\\",[2105,2106],[2105,2105],[5655,5657],"[fetchUserData]",[2969,2971],"[ShopData]",[1553,1560],"[fetchMessages, token]",[1876,1878],"[newCreatureData.species, photoName]",[1138,1149],"[activeTab, fetchMarketItems, updateTimers]",[1349,1420],"[visibleItems, creatureFightData.fight.fightData.creature1.info.length, fullFightLenght, infoSpeed, changeCreature2Life, creatureFightData.fight.fightData.creature1.dmg, creatureFightData.fight.fightData.creature2.dmg, changeCreature1Life]",[1408,1410],"[creaturesData, spiecesPhotos]",[1655,1657],"[userId]"]