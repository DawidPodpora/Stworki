[{"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js":"1","C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js":"2","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js":"3","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js":"4","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js":"5","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js":"6","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js":"7","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js":"8","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js":"9","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js":"10","C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js":"11","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js":"12","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js":"13","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js":"14","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js":"15","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js":"16","C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js":"17","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js":"18","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js":"19","C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js":"20","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js":"21","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js":"22","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js":"23","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js":"24","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js":"25","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js":"26","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js":"27","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js":"28","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RequireAuth.js":"29","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FightScreen.js":"30","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RedirectIfLoggedIn.js":"31","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Misions.js":"32","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildView.js":"33","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildDetails.js":"34","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildInvitations.js":"35"},{"size":230,"mtime":1733455277000,"results":"36","hashOfConfig":"37"},{"size":3220,"mtime":1737315303854,"results":"38","hashOfConfig":"37"},{"size":5031,"mtime":1737315303862,"results":"39","hashOfConfig":"37"},{"size":2967,"mtime":1737315303866,"results":"40","hashOfConfig":"37"},{"size":3825,"mtime":1737315303864,"results":"41","hashOfConfig":"37"},{"size":6221,"mtime":1733462294000,"results":"42","hashOfConfig":"37"},{"size":4539,"mtime":1737315303866,"results":"43","hashOfConfig":"37"},{"size":4507,"mtime":1737315303863,"results":"44","hashOfConfig":"37"},{"size":113,"mtime":1731339676000,"results":"45","hashOfConfig":"37"},{"size":4792,"mtime":1737315303861,"results":"46","hashOfConfig":"37"},{"size":1623,"mtime":1737315303867,"results":"47","hashOfConfig":"37"},{"size":4890,"mtime":1736614352539,"results":"48","hashOfConfig":"37"},{"size":3709,"mtime":1737315481318,"results":"49","hashOfConfig":"37"},{"size":2028,"mtime":1733461430000,"results":"50","hashOfConfig":"37"},{"size":2181,"mtime":1737316789913,"results":"51","hashOfConfig":"37"},{"size":5662,"mtime":1733464357000,"results":"52","hashOfConfig":"37"},{"size":721,"mtime":1733462113000,"results":"53","hashOfConfig":"37"},{"size":4047,"mtime":1733462017000,"results":"54","hashOfConfig":"37"},{"size":711,"mtime":1733461908000,"results":"55","hashOfConfig":"37"},{"size":2671,"mtime":1733462052000,"results":"56","hashOfConfig":"37"},{"size":3225,"mtime":1736614352537,"results":"57","hashOfConfig":"37"},{"size":650,"mtime":1736542038798,"results":"58","hashOfConfig":"37"},{"size":21999,"mtime":1737315303859,"results":"59","hashOfConfig":"37"},{"size":12811,"mtime":1737315303860,"results":"60","hashOfConfig":"37"},{"size":17053,"mtime":1736688008572,"results":"61","hashOfConfig":"37"},{"size":3287,"mtime":1736610062972,"results":"62","hashOfConfig":"37"},{"size":4140,"mtime":1736450057831,"results":"63","hashOfConfig":"37"},{"size":21938,"mtime":1737324697507,"results":"64","hashOfConfig":"37"},{"size":365,"mtime":1737315303865,"results":"65","hashOfConfig":"37"},{"size":8834,"mtime":1737315303860,"results":"66","hashOfConfig":"37"},{"size":728,"mtime":1737315303864,"results":"67","hashOfConfig":"37"},{"size":11808,"mtime":1737315303858,"results":"68","hashOfConfig":"37"},{"size":11035,"mtime":1737315303857,"results":"69","hashOfConfig":"37"},{"size":8519,"mtime":1737315303855,"results":"70","hashOfConfig":"37"},{"size":4698,"mtime":1737315303855,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1e4jrjj",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"75"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"75"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"75"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js",[],[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js",["190"],[],"import React, { useState, useEffect } from 'react' // Import biblioteki React\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\nimport { useNavigate } from 'react-router-dom'; \r\n// Komponent Menu\r\n// `toogleOptions` - funkcja do przełączania opcji\r\n// `onButtonClick` - funkcja obsługująca kliknięcia przycisków w menu\r\nfunction Menu({ toogleOptions, onButtonClick, username, creatureFightActiveButton}) {\r\n  const { t } = useTranslation(); // Funkcja `t` służy do tłumaczeń w `react-i18next`\r\n  const navigate = useNavigate(); // Hook do nawigacji\r\n  \r\n  const handleLogout = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:8080/api/logout', {\r\n            method: 'POST',\r\n            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n        });\r\n\r\n        const result = await response.json();\r\n        if (!response.ok) throw new Error(result.error || 'Nie udało się wylogować');\r\n\r\n        // Usuń token i userId z localStorage\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userId');\r\n\r\n        // Przekieruj użytkownika na stronę logowania lub główną\r\n        navigate('/');\r\n    } catch (error) {\r\n        console.error('Błąd podczas wylogowywania:', error.message);\r\n        alert('Nie udało się wylogować');\r\n    }\r\n};\r\n\r\n  // Lista etykiet dla przycisków menu, przetłumaczona za pomocą `t`\r\n  const buttonLabels = [\r\n    t('Strona główna'),       // Tłumaczenie dla \"Strona główna\"\r\n    t('Moje stworki'),        // Tłumaczenie dla \"Moje stworki\"\r\n    t('Sklep'),               // Tłumaczenie dla \"Sklep\"\r\n    t('Wiadomości prywatne'), // Tłumaczenie dla dodatkowej opcji D\r\n    t('Market'),             // Tłumaczenie dla dodatkowej opcji E\r\n    t('Misje'),             // Tłumaczenie dla dodatkowej opcji E\r\n    t('Gildie'),             // Tłumaczenie dla dodatkowej opcji F\r\n  ];\r\n  const [buttonPressed, setButtonPressed] = useState(0);\r\n  const changeButton =(number)=>{\r\n    setButtonPressed(number);\r\n  }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"relative flex flex-col items-center bg-gradient-to-r from-maincolor1 via-black to-maincolor1 text-maincolor4 space-y-4 w-1/5 h-screen rounded-xl pt-10 border-r-2 border-maincolor5\">\r\n      {/* Przyciski menu */}\r\n      <div>\r\n            {username ? <h1>Witaj, {username}!</h1> : <p>Ładowanie danych użytkownika...</p>}\r\n        </div>\r\n        {buttonLabels.map((label, index) => (\r\n  <button\r\n    key={index}\r\n    onClick={() => { onButtonClick(index + 1); changeButton(index); }}\r\n    className={`border-maincolor2 rounded-xl border py-2 px-4 w-4/5 transition duration-300 ${\r\n      buttonPressed === index \r\n        ? \"border-maincolor5 shadow-maincolor5 bg-maincolor4 text-black1 bg-opacity-75\" // Kolor aktywnego przycisku\r\n        : \"hover:border-maincolor5 hover:shadow-maincolor5 hover:bg-maincolor4 shadow-buttonshadow hover:text-black1 hover:bg-opacity-75\"\r\n    }`}\r\n  >\r\n    {label}\r\n  </button>\r\n))}\r\n\r\n      \r\n      {/* Przyciski na dole menu */}\r\n      <div className=\"flex justify-between absolute bottom-10 w-3/5\">\r\n        {/* Przycisk opcji */}\r\n        <button onClick={toogleOptions} className=\"w-1/3 border-maincolor5 border rounded-full\">\r\n          {t('options')} {/* Tłumaczenie dla \"options\" */}\r\n        </button>\r\n        \r\n       \r\n        {/* Przycisk wylogowania */}\r\n        <button onClick={handleLogout} className=\"w-1/3 border-maincolor5 border rounded-full\">\r\n          {t('logout')}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu; // Eksport komponentu\r\n","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js",[],[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js",[],["191","192"],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js",["193","194","195"],[],"import React, { useEffect, useState } from \"react\";  // Importujemy React oraz useState do obsługi stanów.\r\n\r\nfunction TestButton2({data, NewCreatureActiveButton}) {\r\n  const [creatures, setCreatures] = useState(null);\r\n  const [species, setSpecies] = useState(null);\r\n  const [itemsFromUser, setItemsFromUser] = useState(null);\r\n  const [visibleCreature, setVisibleCreature] = useState(0);\r\n  const [itemActionVisible, setItemActionVisible] = useState(false);\r\n  const [actualItem, setActualItem] = useState([]);\r\n  const [playerLevel, setPlayerLevel] = useState(0);\r\n  // DODANE (1) – Stany związane z tooltipem:\r\n  const maxHeight = window.innerHeight;\r\n  const maxWidth = window.innerWidth;\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);          // Czy tooltip jest widoczny\r\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 }); // Pozycja tooltipa\r\n  const [tooltipContent, setTooltipContent] = useState(null);           // Zawartość (item) tooltipa\r\n  const [whatItemPanel, setWhatItemPanel] = useState(null);\r\n  const [exp, setExp] = useState(0);\r\n  const [gold, setGold] = useState(0);\r\n  const [name, setName] = useState(null);\r\n  const [expToNextLevel, setExpToNextLevel] = useState(0);\r\n  const fetchUserData = async () => {\r\n    const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch('http://localhost:8080/api/usersCreaturesAndItemsData ', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych użytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        setCreatures(data.creatures);\r\n        setSpecies(data.species);\r\n        setItemsFromUser(data.items);\r\n        setExp(data.exp);\r\n        setGold(data.gold);\r\n        setName(data.username);\r\n        setExpToNextLevel(data.expToNextLevel);\r\n        setPlayerLevel(data.level);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const equipeItem = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/equipeItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const ItemUse = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/useItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const unequipeItem = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/unequipeItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const OrbUse = async (itemId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/useOrb?itemId=${itemId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const loadCreaturesAndItemData = async () =>{\r\n      await fetchUserData();\r\n      console.log(creatures, \"creatures\");\r\n      console.log(species, \"species\");\r\n      console.log(itemsFromUser, \" items\");\r\n    };\r\n    loadCreaturesAndItemData();\r\n  }, []);\r\n\r\n  // Nazwy statystyk postaci\r\n  const statsNames = [\"POW\", \"VIT\", \"STR\", \"DEX\", \"INT\"];\r\n  \r\n  // Strzałki do przesuwania panelu\r\n  const arrows = [\"◂\", \"▸\"];\r\n  \r\n  // Puste tablice dla przedmiotów (15 przedmiotów w sklepie) oraz aktywnych przedmiotów (3 przedmioty aktywne)\r\n  const items = Array(15).fill(\"\");\r\n  const itemsActive = Array(3).fill(\"\");\r\n\r\n  // Funkcja zmieniająca widocznego stwora\r\n  const newCreature = (buttonNumber) => {\r\n    setVisibleCreature(buttonNumber);\r\n  };\r\n\r\n  // Stan do zarządzania widocznością panelu (przesuwany panel)\r\n  const [panelVisible, setPanelVisible] = useState(false);\r\n\r\n  // Funkcja zmieniająca stan widoczności panelu\r\n  const makePanelVisible = () => {\r\n    setPanelVisible(!panelVisible);\r\n  };\r\n\r\n  const makeItemPanelVisible =(itemData)=>{\r\n    setItemActionVisible(!itemActionVisible);\r\n    console.log(\"panel widoczny\", itemData);\r\n    setActualItem(itemData);\r\n  };\r\n\r\n  // Zakładanie i zdejmowanie przedmiotu\r\n  const equiqeItemClick = async (itemId, creatureId)=>{\r\n    await equipeItem(itemId, creatureId);\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  };\r\n\r\n  const unequiqeItemClick = async (itemId, creatureId)=>{\r\n    await unequipeItem(itemId, creatureId);\r\n    await fetchUserData(); \r\n  };\r\n\r\n  const handleItemClick = async (itemId, creatureId)=>{\r\n    await ItemUse(itemId, creatureId);\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  };\r\n  const handleOrbClick = async(itemId)=>{\r\n    await OrbUse(itemId).then((response)=>{\r\n      NewCreatureActiveButton(response.NewCreature);\r\n    });\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  }\r\n  // DODANE (2) – Funkcje do obsługi zdarzeń myszy (hover) dla tooltipa\r\n  const handleMouseEnter = (event, item, type) => {\r\n    // Ustaw pozycję tooltipa\r\n    setTooltipPosition({ x: event.pageX, y: event.pageY });\r\n    // Przekazujemy cały obiekt item, by wyświetlić jego dane w tooltipie\r\n    setTooltipContent(item);\r\n    setTooltipVisible(true);\r\n    setWhatItemPanel(type);\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    setTooltipPosition({ x: event.pageX, y: event.pageY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setTooltipVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-full bg-black1 flex justify-center p-5 flex-col space-y-4 relative\">\r\n      {console.log(itemsFromUser, \"items\")}\r\n      {creatures ? (\r\n        <>\r\n          {/* Górny panel (stwór, aktywne przedmioty, statystyki) */}\r\n          <div className=\"w-full h-1/2 bg-gradient-to-r from-maincolor1 via-black to-maincolor1 rounded-xl p-4 flex items-center z-0 border-2 border-maincolor1\">\r\n            {/* Obrazek stwora */}\r\n            <div className=\"h-[45vh] aspect-square bg-maincolor4 rounded-xl border-2 border-maincolor5\">\r\n              <img\r\n                src={`images/${species[visibleCreature].photos[0]}.png` || `images/${species[0].photos[0]}.png`}\r\n                alt=\"Displayed Creature\"\r\n                className=\"w-full h-full object-cover rounded-xl\"\r\n              />\r\n            </div>\r\n            \r\n            {/* Panel aktywnych przedmiotów */}\r\n            <div className=\"w-1/6 h-full\">\r\n              {itemsActive.map((_, index) => (\r\n                <div key={index} className=\"w-full h-1/3 p-4 flex flex-wrap justify-center\">\r\n                  <div className=\"h-[12vh] aspect-square bg-black1 bg-opacity-50 rounded-xl border-maincolor4 border-2\">\r\n                    {creatures[visibleCreature].items[index] && (\r\n                      <button\r\n                        onClick={() => unequiqeItemClick(creatures[visibleCreature].items[index]._id, creatures[visibleCreature]._id)}\r\n                        // DODANE (3) – Obsługa eventów dla tooltipa:\r\n                        onMouseEnter={(event) => handleMouseEnter(event, creatures[visibleCreature].items[index], false)}\r\n                        onMouseLeave={handleMouseLeave}\r\n                        onMouseMove={handleMouseMove}\r\n                      >\r\n                        <img src={`images/${creatures[visibleCreature].items[index].photo}.png`} alt=\"\" />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Panel statystyk */}\r\n            <div className=\"h-full flex-grow rounded-xl border-2 border-maincolor4 flex-col\">\r\n              <div className=\"h-2/3 w-full flex\">\r\n                {/* Nazwy statystyk */}\r\n                <div className=\"w-1/5 h-full text-maincolor4 text-[3vh] flex flex-col items-center\">\r\n                  {statsNames.map((stat, index) => (\r\n                    <div key={index} className=\"w-full h-1/5 text-center\">\r\n                      {stat}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Wartości statystyk */}\r\n                <div className=\"w-4/5 h-full text-[3vh] text-maincolor4 flex\">\r\n                  <div className=\"w-1/5 h-full flex flex-col items-start\">\r\n                    {statsNames.map((_, index) => (\r\n                      <div key={index} className=\"w-full h-1/5 text-center\">\r\n                        {creatures[visibleCreature].staty[index]\r\n                          + species[visibleCreature].baseStats[index]\r\n                          + ((creatures[visibleCreature].level - 1) * species[visibleCreature].statsAfterLevel[index])\r\n                        }\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <div className=\"w-4/5 h-full\">\r\n                    <div className=\"w-full h-3/4 text-center\">{creatures[visibleCreature].name}\r\n                      <div className=\" mt-[3vh] ml-[3vw] w-4/5 h-1/4 bg-gradient-to-r from-maincolor2 via-black to-maincolor5 border-4 relative\" ><div className=\"bg-maincolor1 h-full absolute right-0\" style={{width:`${(creatures[visibleCreature].expToNextLevel -creatures[visibleCreature].exp)/creatures[visibleCreature].expToNextLevel * 100}%`}}></div></div>\r\n                      <div className=\"mt-[2vh]\">{creatures[visibleCreature].exp}/{creatures[visibleCreature].expToNextLevel}</div>\r\n                      <div className=\"mt-[2vh]\">LEVEL: {creatures[visibleCreature].level}</div>\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Panel pasywny */}\r\n              <div className=\"w-full h-1/3 p-2\">\r\n                <p className=\"h-1/6 text-maincolor4 text-[2vh] flex items-center justify-center\">PASIVE</p>\r\n                <div className=\"border-2 border-maincolor5 bg-black1 bg-opacity-50 w-full h-5/6 rounded-xl text-maincolor4 p-2\">\r\n                  MIEJSCE NA UMIEJĘTNOSĆ PASYWNĄ\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Panel z potworami i przedmiotami */}\r\n          <div className=\"w-full h-1/2 flex gap-4\">\r\n            {/* Obrazy potworów */}\r\n            <div className=\"w-1/2 h-full bg-gradient-to-r from-maincolor1 to-black border-2 border-maincolor1 rounded-xl flex flex-wrap justify-center\">\r\n              {species.map((a, index) => (\r\n                <div key={index} className=\"w-1/3 h-1/2 grid place-items-center\">\r\n                  <div\r\n                    onClick={() => newCreature(index)}\r\n                    className=\"relative h-[20vh] aspect-square bg-black1 rounded-xl border-black1 border-2\"\r\n                  >\r\n                    <img\r\n                      src={`images/${a.photos[0]}.png`}\r\n                      alt={`Monster ${index + 1}`}\r\n                      className=\"absolute w-full h-full object-cover rounded-xl\"\r\n                    />\r\n                    <div className=\"p-3 flex flex-col absolute bg-black1 text-maincolor4 w-full h-full text-opacity-0 bg-opacity-0 hover:bg-opacity-70 hover:text-opacity-100 rounded-xl\">\r\n                      {statsNames.map((statName, ind) => (\r\n                        <p key={ind}>\r\n                          {statName}{\" \"}\r\n                          {creatures[index].staty[ind]\r\n                            + species[index].baseStats[ind]\r\n                            + ((creatures[index].level -1) * species[index].statsAfterLevel[ind])}\r\n                        </p>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Panel z przedmiotami */}\r\n            <div className=\"relative w-1/2 h-full bg-gradient-to-r from-black to-maincolor1 border-2 border-maincolor1 rounded-xl flex flex-wrap justify-center gap-4 p-4 overflow-y-auto max-h-[60vh]\">\r\n              {items.map((_, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"w-[6vw] h-[6vw] min-h-[70px] min-w-[70px] bg-black1 bg-opacity-50 rounded-xl border-maincolor4 border-2\"\r\n                >\r\n                  {itemsFromUser && itemsFromUser[index] && (\r\n                    <button\r\n                      onClick={() => makeItemPanelVisible(itemsFromUser[index])}\r\n                      // DODANE (4) – Obsługa eventów dla tooltipa także na itemy w panelu\r\n                      onMouseEnter={(event) => handleMouseEnter(event, itemsFromUser[index], true)}\r\n                      onMouseLeave={handleMouseLeave}\r\n                      onMouseMove={handleMouseMove}\r\n                    >\r\n                      <img src={`images/${itemsFromUser[index].photo}.png`} alt=\"\" />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              {itemActionVisible && (\r\n                <div className=\"absolute top-0 left-0 w-full h-full bg-black1 bg-opacity-90 z-10 flex justify-center items-center\">\r\n                  <div className=\"w-[80%] h-[80%] bg-maincolor1 text-maincolor4 p-4 rounded-xl border border-maincolor5 shadow-lg flex justify-center items-center relative\">\r\n                    <p>{actualItem.name}</p>\r\n                    <img className=\"w-1/2\" src={`images/${actualItem.photo}.png`} alt=\"\" />\r\n                    {\r\n                      console.log(actualItem.type)\r\n                    }\r\n                    {actualItem.type === \"orb\" &&(\r\n                      <button onClick={() => handleOrbClick(actualItem._id)}>Use</button>)\r\n                    }\r\n                    {actualItem.type === \"equipable\" &&\r\n                       (<button onClick={() => equiqeItemClick(actualItem._id, creatures[visibleCreature]._id)}>Equipe</button>)\r\n                    }\r\n                    {actualItem.type === \"usable\" &&\r\n                       (<button onClick={() => handleItemClick(actualItem._id, creatures[visibleCreature]._id)}>Use</button>)\r\n                    }\r\n                    <button\r\n                      className=\"absolute top-4 right-4 text-maincolor4 font-bold\"\r\n                      onClick={() => setItemActionVisible(false)}\r\n                    >\r\n                      X\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Przesuwany panel */}\r\n          <div\r\n            className={`fixed top-[-1vw] right-0 w-[79vw] h-1/2 bg-black1 text-maincolor4 transform transition-transform duration-500 rounded-xl \r\n            bg-opacity-90 border-maincolor5 border-2 ${\r\n              panelVisible ? \"translate-x-0\" : \"translate-x-full\"\r\n            }`}\r\n          >\r\n            <div className=\"text-[3vw] w-full flex items justify-center h-1/5\">{name} LEVEL: {playerLevel}</div>\r\n            <div className=\"text-[1.5vw] flex justify-between m-[3vw] h-1/3 \"><div className=\"w-1/6 flex justify-between relative\"><img src=\"images/money.png\" className=\"h-full\"></img><div className=\"absolute top-1/2 left-[7vw]\">{gold} </div></div>\r\n              <div className=\"relative w-1/2\"><div className=\"absolute top-1/2\">{exp}/{expToNextLevel}</div><div className=\"w-3/4 h-1/4 border-2 top-1/2 absolute ml-[8vw]\"><div className = \"bg-maincolor2 h-full\" style={{width:`${exp/expToNextLevel*100}%`}}></div></div></div>\r\n            </div>\r\n            <div\r\n              className={`absolute h-[15vh] bg-maincolor1 top-[15.5vh] rounded flex justify-center -p-[5vh] border-maincolor5 border-2 ${\r\n                panelVisible ? \"left-[-1vw]\" : \"left-[-2vw]\"\r\n              }`}\r\n            >\r\n              <div className=\"w-full h-full relative flex justify-center text-[5vh] text-maincolor5\">\r\n                <button onClick={makePanelVisible}>\r\n                  {panelVisible ? arrows[1] : arrows[0]}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div> // Wyświetlanie komunikatu ładowania\r\n      )}\r\n\r\n      {/* DODANE (5) – Render samego tooltipa */}\r\n      {tooltipVisible && tooltipContent && (\r\n        <div\r\n          style={\r\n            whatItemPanel ?\r\n            {\r\n            position: \"fixed\",\r\n            bottom: maxHeight-tooltipPosition.y - 10,\r\n            right: maxWidth-tooltipPosition.x + 10,\r\n            zIndex: 9999,\r\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n            color: \"white\",\r\n            padding: \"8px\",\r\n            borderRadius: \"20px\",\r\n            }:{\r\n              position: \"fixed\",\r\n            top: tooltipPosition.y + 10,\r\n            left: tooltipPosition.x + 10,\r\n            zIndex: 9999,\r\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n            color: \"white\",\r\n            padding: \"8px\",\r\n            borderRadius: \"20px\",\r\n            }\r\n          }\r\n          className={`border-4 ${\r\n            tooltipContent.element === \"fire\"\r\n              ? \"border-red-500\"\r\n              : tooltipContent.element === \"water\"\r\n              ? \"border-cyan-500\"\r\n              : tooltipContent.element === \"nature\"\r\n              ? \"border-green-400\"\r\n              : tooltipContent.element === \"light\"\r\n              ? \"border-yellow-500\"\r\n              : tooltipContent.element === \"dark\"\r\n              ? \"border-purple-900\"\r\n              : \"border-white\"\r\n          }`}\r\n        >\r\n          <h4 className=\"text-2xl font-bold\">{tooltipContent.name}</h4>\r\n          <img\r\n            className=\"w-20 h-20\"\r\n            src={`images/${tooltipContent.photo}.png`}\r\n            alt=\"\"\r\n          />\r\n          <p className=\"text-lg font-bold\">TYPE: {tooltipContent.type}</p>\r\n          {tooltipContent.power !== 0 && <p>POWER: +{tooltipContent.power}</p>}\r\n          {tooltipContent.vitality !== 0 && (\r\n            <p>VITALITY: +{tooltipContent.vitality}</p>\r\n          )}\r\n          {tooltipContent.strength !== 0 && (\r\n            <p>STRENGTH: +{tooltipContent.strength}</p>\r\n          )}\r\n          {tooltipContent.dexterity !== 0 && (\r\n            <p>DEXTERITY: +{tooltipContent.dexterity}</p>\r\n          )}\r\n          {tooltipContent.intelligence !== 0 && (\r\n            <p>INTELLIGENCE: +{tooltipContent.intelligence}</p>\r\n          )}\r\n          {tooltipContent.armor !== 0 && <p>ARMOR: +{tooltipContent.armor}</p>}\r\n          <p>\r\n            <span>ELEMENT: </span>{\" \"}\r\n            <span\r\n              className={`${\r\n                tooltipContent.element === \"fire\"\r\n                  ? \"text-red-500\"\r\n                  : tooltipContent.element === \"water\"\r\n                  ? \"text-cyan-500\"\r\n                  : tooltipContent.element === \"nature\"\r\n                  ? \"text-green-400\"\r\n                  : tooltipContent.element === \"light\"\r\n                  ? \"text-yellow-500\"\r\n                  : tooltipContent.element === \"dark\"\r\n                  ? \"text-purple-900\"\r\n                  : \"text-white\"\r\n              } font-bold`}\r\n            >\r\n              {tooltipContent.element}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {/* KONIEC tooltipa */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestButton2;  // Eksportujemy komponent\r\n","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js",["196","197","198","199"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\n// Zestaw przedmiotów w sklepie\r\n\r\n\r\nfunction Shop({data}) {\r\n  // Stan przechowujący przedmioty w inventarzu\r\n  const [activeTab, setActiveTab] = useState(\"shop\"); // Stan kontrolujący aktywną zakładkę (\"shop\" lub \"inventory\")\r\n  const [shopItems, setShopItems] = useState([]);\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);\r\n  const [tooltipPosition, setTooltipPosition] = useState({x:0, y: 0});\r\n  const [tooltipContent, setTooltipContent] = useState(null);\r\n  const [userItems, setUserItems] = useState([]);\r\n  const ShopData = async (newShopForMoney = false) =>{\r\n    const token = localStorage.getItem('token');\r\n    if(!token){\r\n      console.warn('Brak tokenu w localStorage');\r\n      return;\r\n    }\r\n    try{\r\n      const response = await fetch(`http://localhost:8080/api/ItemShop?newShopForMoney=${newShopForMoney}`,{\r\n        method: 'GET',\r\n        headers:{\r\n            'Authorization': `Bearer ${token}`,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n      console.error('Błąd pobierania sklepu:', response.statusText);\r\n      return;\r\n  }\r\n    const data = await response.json();\r\n    console.log(data);\r\n    setShopItems(data.ShopItems);\r\n    setUserItems(data.userItems);\r\n    console.log(shopItems);\r\n    }catch(error){\r\n        console.error('Błąd pobierania sklepu:');\r\n        return;\r\n    }\r\n  }\r\n  const BuyItem = async (itemId) =>{\r\n    const token = localStorage.getItem('token');\r\n    if(!token){\r\n      console.warn('Brak tokenu w localStorage');\r\n      return;\r\n    }\r\n    try{\r\n      const response = await fetch(`http://localhost:8080/api/BuyItem?itemId=${itemId}`,{\r\n        method: 'GET',\r\n        headers:{\r\n            'Authorization': `Bearer ${token}`,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n      console.error('Błąd kupna:', response.statusText);\r\n      return;\r\n  }\r\n    const data = await response.json();\r\n    console.log(data, \"dddddddd\");\r\n    setShopItems(data.ShopItems);\r\n    setUserItems(data.userItems);\r\n    console.log(shopItems);\r\n    }catch(error){\r\n        console.error('Błąd pobierania sklepu:');\r\n        return;\r\n    }\r\n  }\r\n\r\n  const SellItem = async (itemId) =>{\r\n    const token = localStorage.getItem('token');\r\n    if(!token){\r\n      console.warn('Brak tokenu w localStorage');\r\n      return;\r\n    }\r\n    try{\r\n      const response = await fetch(`http://localhost:8080/api/SellItem?itemId=${itemId}`,{\r\n        method: 'GET',\r\n        headers:{\r\n            'Authorization': `Bearer ${token}`,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n      console.error('Błąd kupna:', response.statusText);\r\n      return;\r\n  }\r\n    const data = await response.json();\r\n    console.log(data, \"dddddddd\");\r\n    setShopItems(data.ShopItems);\r\n    setUserItems(data.userItems);\r\n    console.log(shopItems);\r\n    }catch(error){\r\n        console.error('Błąd pobierania sklepu:');\r\n        return;\r\n    }\r\n  }\r\n  // Funkcja dodająca przedmioty do inventarza\r\n  \r\n\r\nuseEffect(()=>{\r\n     const fetchShopData = async () => {\r\n      await ShopData();\r\n      \r\n    } \r\n    fetchShopData();\r\n  },[]);\r\n\r\n  const NewShopRoll = async () =>{\r\n    \r\n    await ShopData(true);\r\n     \r\n  }\r\n  const BuyItemClick = async (itemId) =>{\r\n    await BuyItem(itemId);\r\n  }\r\n  const SellItemClick = async (itemId)=>{\r\n    await SellItem(itemId);\r\n  }\r\n\r\n  const handleMouseEnter = (actualEvent, item) =>{\r\n    const rect = actualEvent.currentTarget.getBoundingClientRect();\r\n    setTooltipPosition({ x: actualEvent.pageX, y: actualEvent.pageY });\r\n    setTooltipContent(item);\r\n    setTooltipVisible(true);\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    setTooltipPosition({ x: event.pageX, y: event.pageY }); // Aktualizuj pozycję tooltipa podczas ruchu myszy\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setTooltipVisible(false);\r\n  };\r\n  return (\r\n    \r\n    <div className=\"w-full h-full bg-black1 flex justify-center p-5 flex-col space-y-4\">\r\n      \r\n      {shopItems ?(<>\r\n      {/* Panel nawigacyjny */}\r\n      \r\n      <div className=\"flex justify-around w-full p-4 bg-maincolor1 rounded-xl mb-4 shadow-lg sticky top-0 z-10\">\r\n        {/* Przycisk przełączający na widok sklepu */}\r\n        <button onClick={() => setActiveTab(\"shop\")} className=\"text-maincolor4 text-lg hover:text-blue-600 transition-all\">\r\n          Shop\r\n        </button>\r\n        {/* Przycisk przełączający na widok inventarza */}\r\n        <button onClick={() => setActiveTab(\"inventory\")} className=\"text-maincolor4 text-lg hover:text-blue-600 transition-all\">\r\n          Inventory\r\n        </button>\r\n\r\n        <button onClick={NewShopRoll} className=\"text-maincolor4 text-lg hover:text-blue-600 transition-all\">\r\n          New Shop\r\n        </button>\r\n      </div>\r\n\r\n      {/* Widok sklepu */}\r\n      {activeTab === \"shop\" && (\r\n        <div className=\"flex-grow overflow-y-auto\">\r\n          {/* Lista przedmiotów do kupienia */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 max-h-[60vh]\">\r\n            {shopItems.map((item, index) => (\r\n              <div key={item._id} className=\"bg-gradient-to-r from-maincolor1 to-black border-2 border-maincolor1 rounded-xl p-4 shadow-xl transform hover:scale-105 transition-all\" \r\n              onMouseEnter={(event) => handleMouseEnter(event, item)} onMouseLeave={handleMouseLeave} onMouseMove={handleMouseMove}>\r\n                {/* Obraz przedmiotu */}\r\n                <img src={`images/${item.photo}.png`} alt={item.name} className=\"w-full h-32 object-cover rounded-xl mb-2 border-4 border-maincolor4 shadow-md\" />\r\n                {/* Nazwa przedmiotu */}\r\n                <h3 className=\"text-xl text-maincolor4 mb-2 font-bold\">{item.name}</h3>\r\n                {/* Opis przedmiotu */}\r\n                <p className=\"text-maincolor4 text-sm mb-2\">{item.description}</p>\r\n                {/* Cena przedmiotu */}\r\n                <p className=\"text-maincolor4 font-bold mt-2\">Price: {item.price} coins</p>\r\n                {/* Przycisk dodania do inventarza */}\r\n                \r\n                <button\r\n                  onClick={()=>BuyItemClick(item._id)}\r\n                  className=\"mt-3  bg-gradient-to-r from-maincolor2 to-maincolor5 text-black py-2 px-4 rounded-lg hover:bg-green-700 transition-all\"\r\n                >\r\n                  Buy item\r\n                </button>\r\n              </div>\r\n              \r\n            ))}\r\n          </div>\r\n          {tooltipVisible && (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: tooltipPosition.y+10,\r\n          left: tooltipPosition.x+10,\r\n          zIndex: 10,\r\n          backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n          color: \"white\",\r\n          padding: \"8px\",\r\n          borderRadius: \"20px\",\r\n          \r\n        }}\r\n        className={`border-4  ${tooltipContent?.element === \"fire\"\r\n        ? \"border-red-500\"\r\n        : tooltipContent?.element === \"water\"\r\n        ? \"border-cyan-500\"\r\n        : tooltipContent?.element === \"nature\"\r\n        ? \"border-green-400\"\r\n        : tooltipContent?.element === \"light\"\r\n        ? \"border-yellow-500\"\r\n        : tooltipContent?.element === \"dark\"\r\n        ? \"border-purple-900\"\r\n        : \"border-white\"} `}\r\n      >\r\n        <h4 className=\"text-2xl font-bold\">{tooltipContent?.name}</h4>\r\n        <img className=\"w-20 h-20\" src={`images/${tooltipContent?.photo}.png`}></img>\r\n        <p className=\"text-lg font-bold\">TYPE: {tooltipContent?.type} </p>\r\n        {tooltipContent?.power !== 0  &&(\r\n        <p>POWER: +{tooltipContent?.power}</p>)}\r\n        {tooltipContent?.vitality !== 0  &&(\r\n        <p>VITALITY: +{tooltipContent?.vitality}</p>)}\r\n        {tooltipContent?.strength !== 0  &&(\r\n        <p>STRENGTH: +{tooltipContent?.strength}</p>)}\r\n        {tooltipContent?.dexterity !== 0  &&(\r\n        <p>DEXTERITY: +{tooltipContent?.dexterity}</p>)}\r\n        {tooltipContent?.intelligence !== 0  &&(\r\n        <p>INTELLIGENCE: +{tooltipContent?.intelligence}</p>)}\r\n        {tooltipContent?.armor !== 0  &&(\r\n        <p>ARMOR: +{tooltipContent?.armor}</p>)}\r\n        <p><span>ELEMENT: </span>{\" \"}<span className={` ${\r\n    tooltipContent?.element === \"fire\"\r\n      ? \"text-red-500\"\r\n      : tooltipContent?.element === \"water\"\r\n      ? \"text-cyan-500\"\r\n      : tooltipContent?.element === \"nature\"\r\n      ? \"text-green-400\"\r\n      : tooltipContent?.element === \"light\"\r\n      ? \"text-yellow-500\"\r\n      : tooltipContent?.element === \"dark\"\r\n      ? \"text-purple-900\"\r\n      : \"text-white\"} font-bold`}>{tooltipContent?.element}</span></p>\r\n        \r\n      </div>\r\n    )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Widok inventarza */}\r\n      {activeTab === \"inventory\" && (\r\n        <div className=\"flex-grow overflow-y-auto \">\r\n          {/* Lista przedmiotów w inventarzu */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            {userItems.length === 0 ? (\r\n              // Wyświetla komunikat, gdy inventarz jest pusty\r\n              <p className=\"text-maincolor4 text-center\">Twój inventarz jest pusty!</p>\r\n            ) : (\r\n              // Wyświetla przedmioty w inventarzu\r\n              userItems.map((item, index) => (\r\n                <div key={item._id} className=\"bg-maincolor1 rounded-xl p-4 shadow-xl transform hover:scale-105 transition-all\"\r\n                onMouseEnter={(event) => handleMouseEnter(event, item)} onMouseLeave={handleMouseLeave} onMouseMove={handleMouseMove}>\r\n                  {/* Obraz przedmiotu */}\r\n                  <img src={`images/${item.photo}.png`} alt={item.name} className=\"w-full h-32 object-cover rounded-xl mb-2 border-4 border-maincolor4 shadow-md\" />\r\n                  {/* Nazwa przedmiotu */}\r\n                  <h3 className=\"text-xl text-maincolor4 mb-2 font-bold\">{item.name}</h3>\r\n                  {/* Opis przedmiotu */}\r\n                  <p className=\"text-maincolor4 text-sm mb-2\">{item.description}</p>\r\n                  <p className=\"text-maincolor4 font-bold mt-2\">Sell value: {Math.round(item.price / 3)} coins</p>\r\n                {/* Przycisk dodania do inventarza */}\r\n                \r\n                <button\r\n                  onClick={()=>SellItemClick(item._id)}\r\n                  className=\"mt-3 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-all\"\r\n                >\r\n                  Sell item\r\n                </button>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n          {tooltipVisible && (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: tooltipPosition.y+10,\r\n          left: tooltipPosition.x+10,\r\n          zIndex: 10,\r\n          backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n          color: \"white\",\r\n          padding: \"8px\",\r\n          borderRadius: \"20px\",\r\n          \r\n        }}\r\n        className={`border-4  ${tooltipContent?.element === \"fire\"\r\n        ? \"border-red-500\"\r\n        : tooltipContent?.element === \"water\"\r\n        ? \"border-cyan-500\"\r\n        : tooltipContent?.element === \"nature\"\r\n        ? \"border-green-400\"\r\n        : tooltipContent?.element === \"light\"\r\n        ? \"border-yellow-500\"\r\n        : tooltipContent?.element === \"dark\"\r\n        ? \"border-purple-900\"\r\n        : \"border-white\"} `}\r\n      >\r\n        <h4 className=\"text-2xl font-bold\">{tooltipContent?.name}</h4>\r\n        <img className=\"w-20 h-20\" src={`images/${tooltipContent?.photo}.png`}></img>\r\n        <p className=\"text-lg font-bold\">TYPE: {tooltipContent?.type} </p>\r\n        {tooltipContent?.power !== 0  &&(\r\n        <p>POWER: +{tooltipContent?.power}</p>)}\r\n        {tooltipContent?.vitality !== 0  &&(\r\n        <p>VITALITY: +{tooltipContent?.vitality}</p>)}\r\n        {tooltipContent?.strength !== 0  &&(\r\n        <p>STRENGTH: +{tooltipContent?.strength}</p>)}\r\n        {tooltipContent?.dexterity !== 0  &&(\r\n        <p>DEXTERITY: +{tooltipContent?.dexterity}</p>)}\r\n        {tooltipContent?.intelligence !== 0  &&(\r\n        <p>INTELLIGENCE: +{tooltipContent?.intelligence}</p>)}\r\n        {tooltipContent?.armor !== 0  &&(\r\n        <p>ARMOR: +{tooltipContent?.armor}</p>)}\r\n        <p><span>ELEMENT: </span>{\" \"}<span className={` ${\r\n    tooltipContent?.element === \"fire\"\r\n      ? \"text-red-500\"\r\n      : tooltipContent?.element === \"water\"\r\n      ? \"text-cyan-500\"\r\n      : tooltipContent?.element === \"nature\"\r\n      ? \"text-green-400\"\r\n      : tooltipContent?.element === \"light\"\r\n      ? \"text-yellow-500\"\r\n      : tooltipContent?.element === \"dark\"\r\n      ? \"text-purple-900\"\r\n      : \"text-white\"} font-bold`}>{tooltipContent?.element}</span></p>\r\n        \r\n      </div>\r\n    )}\r\n        </div>\r\n      )}\r\n      </>\r\n    ): (\r\n  <div>Loading...</div> // Wyświetlanie komunikatu ładowania\r\n)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop; ","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js",["200"],[],"import React, { useState, useEffect } from 'react';\r\nfunction PrivateMessages({data}) {\r\n    const [messages, setMessages] = useState([]); //Przechowywanie wiadomości użytkownika\r\n    const [newMessage, setNewMessage] = useState({receiver: '', title: '', content: ''});//Nowa wiadomość\r\n    const [newMessageToAll, setNewMessageToAll] = useState({title: '', content: ''});\r\n    const [selectedMessage, setSelectedMessage] = useState(null); //wybrana wiadomość\r\n    const [showSendModal, setShowSendModal] = useState(false);\r\n    const [showSendToAllModal, setShowSendToAllModal] = useState(false);\r\n    const [showReplyModal, setShowReplyModal] = useState(false);\r\n    const token = localStorage.getItem('token');\r\n    const currentUser = data.username;\r\n\r\n    const fetchMessages = async () => {\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messages', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok){\r\n                const data = await response.json();\r\n                console.log('Pobrane wiadomości: ')\r\n                setMessages(data);//Ustawienie wiadomości\r\n            }else{\r\n                console.error('Błąd podczas pobierania wiadomości');\r\n            }\r\n        } catch(error){\r\n            console.error('Błąd serwera:',error);\r\n        }\r\n    };\r\n    //Pobieranie wiadomości po załadowaniu komponentu\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [token]);\r\n    //Wysyłanie wiadomości do wszystkich\r\n    const sendMessageToAll = async() => {\r\n        if(!newMessageToAll.title || !newMessageToAll.content){\r\n            alert('Tytuł i treść są wymagane!');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messageToAll', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessageToAll),\r\n            });\r\n            if(response.ok){\r\n                //alert('Wiadomość do wszystkich została wysłana!');\r\n                setNewMessageToAll({title:'', content:''});\r\n                setShowSendToAllModal(false);\r\n            }else{\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości do wszystkich użytkowników.'}`);\r\n            }\r\n        }catch(error){\r\n            console.error('Błąd serwera: ',error);\r\n        }\r\n    };\r\n    //Wysyłąnie nowej wiadomości\r\n    const sendMessage = async () => {\r\n        if(!newMessage.receiver || !newMessage.title || !newMessage.content){\r\n            alert('Wszystkie pola są wymagane!');\r\n            return;\r\n        }\r\n        if(newMessage.receiver === currentUser) {\r\n            alert('Nie możesz wysłać wiadomości do samego siebie.');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/message', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessage),\r\n            });\r\n            if(response.ok){\r\n                alert('Wiadomość wysłana!');\r\n                setNewMessage({receiver: '', title: '', content: ''}); //reset formularza\r\n                setShowSendModal(false);\r\n                setShowReplyModal(false);\r\n            } else {\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości.'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Usuwanie wiadomości\r\n    const deleteMessage = async (messageId) => {\r\n        try{\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok) {\r\n                setMessages((prevMessages) => prevMessages.filter((msg) => msg._id !== messageId));\r\n            } else {\r\n                console.error('Błąd podczas usuwania wiadomości');\r\n            }\r\n        } catch (error){\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Oznaczanie wiadomości jako przeczytana\r\n    const markMessageAsReaded = async (messageId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}/read`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (!response.ok) \r\n            {\r\n                throw new Error('Nie udało się oznaczyć wiadomości jako przeczytanej.');\r\n            }\r\n            console.log(`Wiadomość ${messageId} oznaczona jako przeczytana.`);\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n\r\n    //Otwieranie modala do odpowiedzi\r\n    const openReplyModal = (senderUsername) => {\r\n        setNewMessage({receiver: senderUsername, title: '', content: ''});\r\n        setShowReplyModal(true);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"w-full h-screen bg-black flex flex-col p-5 justify-center text-maincolor4\">\r\n            {/* Zielony komponent na czarnym tle */}\r\n            <div className=\"w-full h-full bg-maincolor1 p-5 rounded-xl flex flex-col\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <h1 className=\"text-2xl font-bold\">Wiadomości prywatne</h1>\r\n                    <button\r\n                    onClick={() => fetchMessages()}\r\n                    className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Odśwież\r\n                    </button>\r\n                    <button\r\n                        onClick={() => setShowSendModal(true)}\r\n                        className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Wyślij wiadomość\r\n                    </button>\r\n                    {data.isAdmin && (\r\n                        <button\r\n                            onClick={() => setShowSendToAllModal(true)}\r\n                            className=\"bg-maincolor4 text-black border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                        >\r\n                            Wiadomość do wszystkich\r\n                        </button>\r\n                    )}\r\n                </div>\r\n    \r\n                {/* Lista wiadomości */}\r\n                <div className=\"p-4 rounded-xl overflow-y-auto space-y-4 flex-grow\">\r\n                {messages.length > 0 ? (\r\n                    messages.map((msg) => (\r\n                        msg.senderId ? (\r\n                            <div\r\n                                key={msg._id}\r\n                                className={`p-4 rounded-lg shadow-md border ${\r\n                                    msg.isRead ? \"border-maincolor2\" : \"border-maincolor5\"\r\n                                }`}\r\n                            >\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <div>\r\n                                        <p className=\"font-bold\">{msg.title}</p>\r\n                                        <p className=\"text-sm\">Od: {msg.senderId ? msg.senderId.username : \"Nieznany użytkownik\"}</p>\r\n                                        <p className=\"text-xs\">{new Date(msg.createdAt).toLocaleString()}</p>\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={() => deleteMessage(msg._id)}\r\n                                        className=\"text-red-500 hover:text-red-700 text-sm\"\r\n                                    >\r\n                                        Usuń\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"space-x-4 mt-2\">\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            setSelectedMessage(selectedMessage === msg ? null : msg);\r\n                                            if (!msg.isRead) markMessageAsReaded(msg._id);\r\n                                        }}\r\n                                        className=\"mt-2 text-blue-500 hover:underline\"\r\n                                    >\r\n                                        {selectedMessage === msg ? \"Zwiń\" : \"Zobacz szczegóły\"}\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => openReplyModal(msg.senderId.username)}\r\n                                        className=\"text-green-500 hover:underline\"\r\n                                    >\r\n                                        Odpowiedz\r\n                                    </button>\r\n                                </div>\r\n                                {selectedMessage === msg && (\r\n                                    <div className=\"mt-4\">\r\n                                        <p className=\"text-sm\">{msg.content}</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ) : null // Dodaj odpowiednie zachowanie, gdy senderId jest null\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-center\">Brak wiadomości</p>\r\n                )}\r\n                </div>\r\n            </div>\r\n    \r\n            {/*Modal do odpowiedzi */}\r\n            {showReplyModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\"> Odpowiedź do {newMessage.receiver}</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                            />\r\n                            <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => setShowReplyModal(false)}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Modal do wysyłania wiadomości do wszystkich */}\r\n            {showSendToAllModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość do wszystkich</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessageToAll.title}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessageToAll.content}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendToAllModal(false);\r\n                                    setNewMessageToAll({title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessageToAll}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n    \r\n            {/* Modal do wysyłania wiadomości */}\r\n            {showSendModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Odbiorca\"\r\n                            value={newMessage.receiver}\r\n                            onChange={(e) => setNewMessage({...newMessage, receiver: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendModal(false);\r\n                                    setNewMessage({receiver: '', title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default PrivateMessages;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js",["201","202"],[],"import React, { useState } from 'react'; // Import biblioteki React\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction FirstOrb({firsOrbActiveButton,  NewCreatureActiveButton}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n  const [choice, setChoice] = useState(null);\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n    const elements=[\r\n        \"water\",\r\n        \"fire\",\r\n        \"nature\",\r\n        \"light\",\r\n        \"dark\",\r\n    ]\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  const orbChecked =(element)=>{\r\n    setChoice(element);\r\n  }\r\n  const sendFirstOrb = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n    console.log(\"cos\");\r\n    try{\r\n        console.log(\"cos1\");\r\n        const response = await fetch('http://localhost:8080/api/OrbDraw',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({orb: choice}),\r\n        });\r\n        console.log(\"cos2\");\r\n        if (!response.ok) {\r\n            throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n          }\r\n        const data = await response.json();\r\n        return data;\r\n    }catch(error){\r\n        console.error('Błąd podczas wysyłania danych:', error);\r\n        setResponseMessage('Wystąpił błąd podczas wysyłania danych.');\r\n    }\r\n    \r\n  };\r\n  const doubleFunctionClick = () =>\r\n  {\r\n    if(choice)\r\n    {\r\n        console.log(\"działa\");\r\n       \r\n        firsOrbActiveButton();\r\n        sendFirstOrb().then((response)=>{\r\n          NewCreatureActiveButton(response.NewCreature);\r\n        })\r\n    }\r\n  }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col justify-center\">\r\n      <div className=\"relative bg-maincolor1 w-3/4 h-[25vw] mt-[10vh] text-maincolor4  rounded-3xl border-2 p-4 flex flex-col justify-between text-2xl items-center\">\r\n      <div className=\"flex justify-between w-full h-2/3 items-center bg-black px-8  rounded-3xl bg-opacity-70\">\r\n        {elements.map((element, index) =>\r\n        <button onClick ={()=> orbChecked(element)}className={`w-1/6 h-[11.5vw] rounded-full hover:shadow-custom-main hover:bg-maincolor4 ${choice === element?\r\n            \"shadow-custom-main bg-maincolor4\":\"\"\r\n        }`}>\r\n    \r\n            <img src={`images/${element}orb.png`} alt={element}/>\r\n        </button>\r\n        )}\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <button onClick={doubleFunctionClick} className=\"px-9 py-2 bg-maincolor5 text-black1 rounded-lg hover:bg-maincolor4 transition\">\r\n            OK\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstOrb; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js",["203","204","205"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction NewCreatureWindow({ newCreatureData , windowSwicher}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n    const [photoName, setPhotoName] = useState(null);\r\n    const [name,setName] = useState();\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  useEffect(() => {\r\n        const fetchSpeciesPhoto = async () => {\r\n            const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/speciesPhoto?speciesName=${newCreatureData.species}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n                    },\r\n                });\r\n    \r\n                if (!response.ok) {\r\n                    console.error('Błąd pobierania danych obrazka:', response.statusText);\r\n                    return;\r\n                }\r\n                \r\n                const photo = await response.json();\r\n                setPhotoName(photo.photoName);\r\n                console.log(photoName);\r\n            } catch (error) {\r\n                console.error('Błąd podczas pobierania danych obrazka:', error);\r\n            }\r\n  \r\n        };\r\n    \r\n        fetchSpeciesPhoto(); // Wywołanie funkcji\r\n    }, []);\r\n    const sendNewName = async()=>\r\n    {\r\n        const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n            try{\r\n                const response = await fetch('http://localhost:8080/api/setNewName',{\r\n                    method: 'POST',\r\n                    headers:{\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({newName: name,\r\n                    creatureid: newCreatureData._id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n                  }\r\n            }catch(error){\r\n                console.error('Błąd podczas wysyłania danych:', error);\r\n            }\r\n\r\n    }\r\n    const okClickActions = () =>\r\n    {\r\n        windowSwicher();\r\n        sendNewName();\r\n    }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col\">\r\n      {/* Główne okno opcji */}\r\n      <div className=\"relative bg-maincolor1 w-1/2 h-2/3 mt-[10vh] text-maincolor4 flex flex-col items-center rounded-3xl border-2 text-2xl space-y-4\">\r\n        {newCreatureData.species}\r\n        <div className=\"relative h-[27vw] aspect-square bg-black1 rounded-xl border-maincolor5 border-2\">\r\n        {photoName &&(\r\n        <img src={`images/${photoName}.png` } className=\"absolute w-full h-full object-cover rounded-xl\"/>\r\n        )\r\n        }\r\n        </div>\r\n        Nadaj imie:\r\n        <input type=\"text\" value={name} onChange={(e)=> setName(e.target.value)} className='bg-black text-maincolor4 border border-maincolor5 rounded-xl'/>\r\n        <button onClick={okClickActions} className='bottom-10 border-2 rounded-3xl w-1/6 border-maincolor5 hover:shadow-maincolor5 shadow-buttonshadow transition duration-300 hover:text-maincolor5'>OK</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewCreatureWindow; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js",["206","207","208"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RequireAuth.js",[],[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FightScreen.js",["209","210","211","212","213","214","215","216"],[],"import React, { useState, useEffect,useRef } from 'react'\r\nimport create from 'zustand';\r\n\r\nfunction FightScreen({creatureFightData, creatureFightCloseButton}){\r\n    const [visibleItems, setVisibleItems] = useState(0);\r\n    const fullFightLenght = creatureFightData.fight.fightData.creature1.info.length + creatureFightData.fight.fightData.creature2.info.length;\r\n    const [creature1ActualHp ,setCreature1ActualHp] = useState(creatureFightData.fight.fullhpcreature1);\r\n    const [creature2ActualHp ,setCreature2ActualHp] = useState(creatureFightData.fight.fullhpcreature2);\r\n    const [infoSpeed, setInfoSpeed] = useState(1000);\r\n    const scrollRef = useRef(null);\r\n    useEffect(() => {\r\n        if (visibleItems < fullFightLenght) {\r\n            const timer = setTimeout(() => {\r\n                setVisibleItems((prev) => prev + 1);\r\n                if(visibleItems%2 === 0)\r\n                {\r\n                    changeCreature2Life(creatureFightData.fight.fightData.creature1.dmg[visibleItems/2])\r\n                }\r\n                else\r\n                {\r\n                    changeCreature1Life(creatureFightData.fight.fightData.creature2.dmg[Math.floor(visibleItems/2)])\r\n                }\r\n            }, infoSpeed); // Zwiększa licznik co sekundę\r\n            \r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [visibleItems, creatureFightData.fight.fightData.creature1.info.length]);\r\n    useEffect(() => {\r\n        if (scrollRef.current) {\r\n          scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n        }\r\n      }, [visibleItems]);\r\n    const SkipClick=()=>{\r\n        setInfoSpeed(10);\r\n    }\r\n    const changeCreature1Life =(life)=>\r\n    {\r\n        if(creature1ActualHp - life >=0){\r\n        setCreature1ActualHp(creature1ActualHp - life);\r\n        }else(setCreature1ActualHp(0))\r\n    }\r\n    const changeCreature2Life =(life)=>\r\n    {\r\n        if(creature2ActualHp - life >=0){\r\n            setCreature2ActualHp(creature2ActualHp - life);\r\n            }else(setCreature2ActualHp(0));\r\n    }\r\n    return(<div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col\">\r\n        <div className=\"relative w-[85vw] h-[65vh] mt-[10vw] items-center justify-center text-maincolor4 flex rounded-3xl z-10 \">\r\n            {/*Panel ze zdjęciami*/}\r\n            \r\n            <div className='absolute mt-[1vw] top-0 left-1/2 transform -translate-x-1/2 w-[83vw] h-[32vw] '>\r\n                <div className='h-full aspect-square border-4 border-maincolor2 left-0 rounded-3xl '>\r\n                    <img src={`images/${creatureFightData.speciesPhotos[0][0]}.png`} className='rounded-2xl'></img>\r\n                </div>\r\n                <div className='absolute h-full aspect-square border-4 border-maincolor5 right-0 top-0 rounded-3xl'>\r\n                    <img src={`images/${creatureFightData.speciesPhotos[1][0]}.png`} className='rounded-2xl'></img>\r\n                </div>\r\n            </div>\r\n            {/*Panel z informacjami */}\r\n            <div className=' p-2 absolute left-1/2 transform -translate-x-1/2 top-0 mt-[1vw]  w-[16vw] h-[57vh] bg-gradient-to-r from-maincolor2 via-black to-maincolor5 rounded-3xl '>\r\n                <div   ref={scrollRef} className='w-full h-full bg-black rounded-2xl overflow-y-auto scrollbar-thin scrollbar-thumb-maincolor5 scrollbar-track-black'>\r\n                {Array.from({ length: visibleItems }).map((_, index)=>(\r\n                    <div key={index}>\r\n                        {index%2===0 ?(\r\n                            <>\r\n                            {creatureFightData.fight.fightData.creature1.info[index/2] === \"Dodge\"?(\r\n                        <div className='relative w-full h-[2hw]  p-1 flex justify-between'>\r\n                            <div  className='text-maincolor3'>Atak for 0</div>\r\n                            <div className='text-maincolor5  '>{creatureFightData.fight.fightData.creature1.info[index/2]}</div>\r\n                        </div>\r\n                    ):(<div className='relative w-full h-[2hw]  p-1'><div className='text-maincolor3'>{creatureFightData.fight.fightData.creature1.info[index/2]}  {creatureFightData.fight.fightData.creature1.dmg[index/2]}</div></div>)\r\n                    }\r\n                            </>\r\n                ):(\r\n                    <>\r\n                    {creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)] === \"Dodge\"?(\r\n                        <div className='relative w-full h-[2hw]  p-1 flex justify-between'>\r\n                            <div className='text-maincolor3  '>{creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)]}</div>\r\n                            <div  className='text-maincolor5 '>Atak for 0</div>\r\n                        </div>\r\n                    ):(<div className='relative w-full h-[2hw] p-1'><div className='flex items-center justify-end text-maincolor5'>{creatureFightData.fight.fightData.creature2.info[Math.floor(index/2)]}  {creatureFightData.fight.fightData.creature2.dmg[Math.floor(index/2)]}</div></div>)\r\n                    \r\n                    }\r\n                    </>)}\r\n                    </div>\r\n                ))}\r\n                    {visibleItems === fullFightLenght &&(\r\n                        <div className='w-full h-[2hw] relative'>{creatureFightData.fight.whoWon === \"c1\"?(\r\n                            <>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 '>You Win</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[2vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/money.png\"></img><p>{creatureFightData.gold}</p></div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[5vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/experience.png\"></img><p>{creatureFightData.exp}</p></div>\r\n                                </>\r\n                        ):(<>\r\n                        <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 '>You Lose</div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[2vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/money.png\"></img><p>{creatureFightData.gold}</p></div>\r\n                            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 mt-[5vh] flex items-center'><img className='w-[2vw] h-full' src=\"images/experience.png\"></img><p>{creatureFightData.exp}</p></div>\r\n                            </>)}</div>\r\n                    )\r\n                    }\r\n                   \r\n                    {console.log(fullFightLenght)}\r\n                </div>\r\n            </div>\r\n            {visibleItems !== fullFightLenght ? (\r\n                <button onClick={()=>SkipClick()}className='absolute left-1/2 transform -translate-x-1/2 bottom-[0.1vw] w-[10vw] h-[4.5vh] bg-gradient-to-r from-maincolor3 to-maincolor5 mb-1 rounded-full border-4 border-black'>SKIP</button>\r\n            ):(\r\n                <button onClick={()=>creatureFightCloseButton()}className='absolute left-1/2 transform -translate-x-1/2 bottom-[0.1vw] w-[10vw] h-[4.5vh] bg-gradient-to-r from-maincolor3 to-maincolor5 mb-1 rounded-full border-4 border-black'>ACCEPT</button> \r\n            )\r\n            }\r\n            <div className='absolute left-[2vw] bottom-[0.8vh]  w-[30vw] h-[4.5vh] border-4 border-maincolor4 rounded-2xl'>\r\n                <div className='w-full h-full bg-maincolor3 rounded-lg relative'>\r\n                    <div className='h-full bg-maincolor4 rounded-lg' style={{width:`${(creatureFightData.fight.fullhpcreature1-creature1ActualHp)/creatureFightData.fight.fullhpcreature1 * 100}%`}}></div>\r\n                </div>\r\n                <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 text-black'>{creature1ActualHp}/{creatureFightData.fight.fullhpcreature1}</div>\r\n            </div>\r\n           \r\n                     \r\n            <div className='absolute right-[2vw] bottom-[0.8vh]  w-[30vw] h-[4.5vh] border-4 border-maincolor4 rounded-2xl'>\r\n                <div className='w-full h-full bg-maincolor5 rounded-lg relative '>\r\n                    <div className=' absolute h-full bg-maincolor4 rounded-lg right-0' \r\n                    style={{width:`${(creatureFightData.fight.fullhpcreature2-creature2ActualHp)/creatureFightData.fight.fullhpcreature2 *100}%`}}></div>\r\n                    <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 text-black'>{creature2ActualHp}/{creatureFightData.fight.fullhpcreature2}</div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>)\r\n}\r\nexport default FightScreen;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\RedirectIfLoggedIn.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Misions.js",["217","218","219","220","221","222","223","224","225","226"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Misions({ data, creatureFightActiveButton }) {\r\n\r\n\r\n  const initialTimes = [10, 50, 70, 90, 300];\r\n  const [timeLeftTable, setTimeLeftTable] = useState(initialTimes);\r\n  const [remainingTimes, setRemainingTimes] = useState([]);\r\n  const [spiecesPhotos, setSpeciesPhoto] = useState(null);\r\n  const [creaturesData, setCreaturesData] = useState(null);\r\n  const [activeCreature, setActiveCreature] = useState(0);\r\n  const [missionChoose, setMissionChoose] = useState(null);\r\n  const [creaturesOnMission, setCreaturesOnMission] = useState([]);\r\n  const [creaturesOnMissionPhotos, setCreaturesOnMissionPhotos] = useState([]);\r\n  const [missionsFullTime, setMissionsFullTime] = useState([]);\r\n  const [fightData, setFightData] = useState(null);\r\n \r\n\r\nuseEffect(() => {\r\n  if (remainingTimes.length === 0) return; // Jeśli brak danych, nie uruchamiaj timera\r\n\r\n  const timer = setInterval(() => {\r\n    setRemainingTimes((prevTimes) =>\r\n      prevTimes.map((time) => Math.max(time - 1, 0)) // Zmniejsz czas o 1 sekundę, ale nie poniżej 0\r\n    );\r\n  }, 1000);\r\n\r\n  return () => clearInterval(timer); // Wyczyść timer przy odmontowaniu\r\n}, [remainingTimes]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    const loadData = async()=>{\r\n      await fetchData();\r\n      console.log(creaturesData);\r\n      console.log(spiecesPhotos);\r\n    };\r\n    loadData();\r\n  },[]);\r\n  const fetchData = async()=>{\r\n    const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/missionsInfo ', {\r\n          method: 'GET',\r\n          headers: {\r\n              'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n          },\r\n      });\r\n\r\n      if (!response.ok) {\r\n          console.error('Błąd pobierania danych użytkownika:', response.statusText);\r\n          return;\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(data);\r\n      setSpeciesPhoto(data.speciesPhotos)\r\n      setCreaturesData(data.creatures);\r\n      const creaturesOnMission = data.creatures.filter(\r\n        (creature) => creature.timeOfEndOfMission !== null\r\n      );\r\n      setCreaturesOnMission(creaturesOnMission);\r\n      const photosOnMission = data.creatures.reduce((result, creature, index) => {\r\n        if (creature.timeOfEndOfMission !== null) {\r\n          result.push(data.speciesPhotos[index]); // Dodaj zdjęcie odpowiadające indeksowi stworka\r\n        }\r\n        return result;\r\n      }, []);\r\n      console.log(creaturesOnMission);\r\n      setCreaturesOnMissionPhotos(photosOnMission);\r\n      const times = creaturesOnMission.map((creature) => {\r\n        const endTime = new Date(creature.timeOfEndOfMission);\r\n        const currentTime = new Date();\r\n        const diffInSeconds = Math.max(Math.floor((endTime - currentTime) / 1000), 0); // Pozostały czas w sekundach\r\n        return diffInSeconds;\r\n      });\r\n      console.log(times,\"times\");\r\n      setRemainingTimes(times);\r\n      const activeMissionTimes = creaturesOnMission.flatMap((creature) =>\r\n        creature.misions\r\n          .filter((mission) => mission.isThisMissionActive) // Filtruj tylko aktywne misje\r\n          .map((mission) => mission.timeOfMission)         // Pobierz timeOfMission\r\n      );\r\n      \r\n      console.log(activeMissionTimes, \"Czasy aktywnych misji\");\r\n      setMissionsFullTime(activeMissionTimes);\r\n    \r\n\r\n  } catch (error) {\r\n      console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n  }\r\n  }\r\n\r\n  const ClaimMission = async (creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/ClaimMission?creatureId=${creatureId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n\r\n  // Formatowanie czasu w minutach i sekundach\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n    return `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;\r\n  };\r\n  const sendCreatureOnMission = async(creature, mission)=>\r\n  {\r\n    const token = localStorage.getItem('token');\r\n      if (!token) {\r\n          console.warn('Brak tokenu w localStorage');\r\n          return;\r\n      }\r\n      try {\r\n        if(!creature)\r\n        {\r\n          console.warn('Creature not choosed');\r\n          return;\r\n        }\r\n        if(!mission)\r\n          {\r\n            console.warn('Mission not choosed');\r\n            return;\r\n          }\r\n        const creatureId = creature._id;\r\n        const missionId = mission._id;\r\n        console.log(missionId,\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\");\r\n        const response = await fetch(`http://localhost:8080/api/SendOnMission?missionId=${missionId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        const data = await response.json();\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  }\r\n  const changeCreature = (number)=>{\r\n    setActiveCreature(number);\r\n    setMissionChoose(null);\r\n  }\r\n  const changedMission = (number)=>{\r\n    setMissionChoose(number);\r\n  }\r\n  const acceptMissionClick = async(creature) =>{\r\n    const mission = creature.misions[missionChoose];\r\n    console.log(mission,\"AAAAAAAAAAAAAAAAAAAAAAAA\");\r\n    await sendCreatureOnMission(creature, mission);\r\n    await fetchData();\r\n  }\r\n\r\n  const claimMissionClick = async(creature) =>{\r\n    const creatureId = creature._id;\r\n    \r\n    await ClaimMission(creatureId).then((response)=>{\r\n      creatureFightActiveButton(response);\r\n    })\r\n    await fetchData();\r\n\r\n  }\r\n  const placeForMissions = Array(6).fill(\"\");\r\n  const missions = Array(3).fill(\"\");\r\n  return (\r\n    <div className=\"absolute w-full bg-black1 h-screen text-maincolor4\">\r\n    {creaturesData && spiecesPhotos?(\r\n      <div>\r\n      {placeForMissions.map((_, index) => (\r\n        <div\r\n          key={index} // Dodanie klucza\r\n          className=\"w-[55vw] bg-gradient-to-r from-black to-maincolor1 h-[15vh] m-[1.5vh] rounded-3xl p-[1vh] border-2 border-maincolor2\"\r\n        >\r\n          {creaturesOnMission[index] ?(\r\n\r\n          \r\n          <div className=\"w-full h-full bg-gradient-to-r from-maincolor1 to-black border border-maincolor1 rounded-3xl border-1 flex items-center justify-between px-4\">\r\n            \r\n            <div className=\"ml-[1vh] mr-[3vh] w-[10vh] h-[10vh] rounded-full\">\r\n              <img src={`images/${creaturesOnMissionPhotos[index][0]}.png`} className=\"rounded-full\" alt=\"Mission\" />\r\n            </div>\r\n            <div className=\"bg-gradient-to-r from-black to-maincolor5 w-4/5 h-2/5  rounded border-maincolor4 border-4 relative\">\r\n              <div\r\n                className={`h-full bg-maincolor1 absolute right-0  border-maincolor4 `}\r\n                style={{ width: `${(remainingTimes[index] / (missionsFullTime[index]*60)) * 100 }%` }}\r\n              ></div>\r\n            </div>\r\n            {remainingTimes[index] / (missionsFullTime[index]*60) > 0 ?\r\n            (<div className=\"text-white ml-auto text-[1.5vw] w-[6vh] ml-[3vh]\">{formatTime(remainingTimes[index])}</div>):(\r\n            <div className=\" w-[6vh] h-[3vh] ml-[3vh]\"><button onClick={()=>claimMissionClick(creaturesOnMission[index])} className=\"bg-gradient-to-r from-maincolor3 to-maincolor5 w-full h-[4vh] rounded-2xl text-black font-extrabold border-2\">CLAIM</button></div>) \r\n            }\r\n          </div>\r\n):(<div></div>)}\r\n        </div>\r\n      ))}\r\n      <div className=\"w-[22vw] h-[50vh] bg-maincolor1 absolute right-0 top-0 m-[1vw] rounded-3xl p-[1vw]\">\r\n        <div className=\"w-full h-full flex grid grid-cols-2 grid-rows-3 gap-[1vw]\">\r\n          {placeForMissions.map((_,index) => (\r\n          <div className=\" grid place-items-center  \">\r\n            <div className=\"relative h-[14vh] aspect-square bg-maincolor1 rounded-2xl outline outline-4 outline-maincolor4\">\r\n              {creaturesData[index]?(\r\n              <div onClick={()=>changeCreature(index)}>\r\n                {!creaturesData[index].timeOfEndOfMission ?(\r\n                <img src={`images/${spiecesPhotos[index][0]}.png`}className={`rounded-2xl ${activeCreature === index? \"border-8 border-maincolor5\":\"\"}`}></img>\r\n                ):(<img src={`images/${spiecesPhotos[index][0]}.png`} className={`rounded-2xl grayscale ${activeCreature === index? \"border-8 border-black\":\"\"}`}></img>)}\r\n                </div>):(<div></div>)\r\n              }\r\n            </div>\r\n          </div>\r\n          )\r\n          )\r\n          }\r\n        </div>\r\n      </div>\r\n        <div className=\"w-[22vw] h-[45vh] bg-maincolor1 absolute right-0 bottom-0 m-[1vw] rounded-3xl \">\r\n          <div className=\"h-[5vh] m-[1.5vh] rounded-lg border-4 border-black flex items-center justify-center bg-gradient-to-r from-maincolor5 via-black to-maincolor2 relative\"><span className=\"z-10\">{creaturesData[activeCreature].energy}</span><div className=\"h-full bg-maincolor1 rounded-sm absolute top-0 right-0 z-0\" style={{ width: `${100 - creaturesData[activeCreature].energy}%` }}></div></div>\r\n            {!creaturesData[activeCreature].timeOfEndOfMission ? (<div>\r\n            {missions.map((_,index)=>(\r\n              <div className={`h-[9vh] m-[1.5vh] p-2 rounded-3xl ${missionChoose === index?\"bg-gradient-to-r from-maincolor4 to-maincolor5\":\"bg-gradient-to-r from-black to-maincolor5\"}`} onClick={()=>changedMission(index)}>\r\n                <div className=\"w-full h-full bg-maincolor1 rounded-2xl p-[0.5vw] relative\">\r\n                  <div className=\"absolute right-0 bottom-1\"><img src=\"images/money.png\" className=\"w-[2vw]\"></img>{creaturesData[activeCreature].misions[index].goldForMission}</div>\r\n                  <div className=\"absolute left-1 bottom-1\"><img src=\"images/experience.png\" className=\"w-[2vw]\"></img>{creaturesData[activeCreature].misions[index].expForMission}</div>\r\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-xl font-extrabold\"><p>{creaturesData[activeCreature].misions[index].timeOfMission} MINUTES</p></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n          <div className=\"w-full h-[4vh] flex justify-center items-center\">\r\n            <button onClick={()=>acceptMissionClick(creaturesData[activeCreature])} className=\"w-[6vw] h-[4vh] bg-gradient-to-r from-maincolor2 to-maincolor5 text-black text-2xl font-extrabold rounded-3xl border-2 border-maincolor4 hover:text-maincolor4\">ACCEPT</button>\r\n          </div>\r\n          </div>):(<div className=\"ml-[2vh] mt-[12vh] w-[35vh] h-[6vh] bg-maincolor5 flex items-center justify-center text-black font-extrabold text-[3vh] rounded-xl\">IS ON MISSION</div>)}\r\n          </div>\r\n          </div>):(<div>LOADING</div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Misions;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildView.js",["227"],[],"import React, { useState, useEffect } from 'react';\r\nimport GuildDetails from './GuildDetails';\r\nimport GuildInvitations from './GuildInvitations';\r\n\r\nfunction GuildView() {\r\n    const [guilds, setGuilds] = useState([]);\r\n    const [selectedGuild, setSelectedGuild] = useState(null);\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const [newGuildName, setNewGuildName] = useState('');\r\n    const [newGuildGoal, setNewGuildGoal] = useState('');\r\n    const [newGuildMaxMembers, setNewGuildMaxMembers] = useState(10);\r\n\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            console.error('userId jest null! Użytkownik musi być zalogowany.');\r\n            console.log('Dostępne wartości localStorage:', localStorage);\r\n            console.log('Token:', localStorage.getItem('token'));\r\n            console.log('UserId:', localStorage.getItem('userId'));\r\n            return;\r\n        }\r\n        console.log('userId w localStorage:', userId); \r\n        fetchGuilds();\r\n        fetchOnlineUsers();\r\n\r\n        // Ustawienie interwału do odświeżania listy użytkowników online co 5 sekund\r\n        const intervalId = setInterval(fetchOnlineUsers, 5000);\r\n\r\n        // Czyszczenie interwału po odmontowaniu komponentu\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const fetchGuilds = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/userGuilds', {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać gildii');\r\n            console.log('Odpowiedz z backendu:', result.guilds); \r\n            setGuilds(result.guilds || []);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania gildii:', error.message);\r\n        }\r\n    };\r\n\r\n    const fetchOnlineUsers = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/onlineUsers', {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać użytkowników online');\r\n            console.log('Odpowiedz z backendu o online użytkownikach:', result.onlineUsers); \r\n            setOnlineUsers(result.onlineUsers || []);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania użytkowników online:', error.message);\r\n        }\r\n    };\r\n\r\n    const createGuild = async () => {\r\n        try {\r\n            if (!newGuildName || !newGuildGoal || !newGuildMaxMembers) {\r\n                alert('Wszystkie pola są wymagane!');\r\n                return;\r\n            }\r\n\r\n            const token = localStorage.getItem('token');\r\n            const guildData = {\r\n                name: newGuildName,\r\n                goal: newGuildGoal,\r\n                maxMembers: Number(newGuildMaxMembers),\r\n            };\r\n\r\n            const response = await fetch('http://localhost:8080/api/createGuild', {\r\n                method: 'POST',\r\n                headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(guildData),\r\n            });\r\n\r\n            const result = await response.json();\r\n            \r\n\r\n            if (!response.ok) {\r\n                if (result.error.includes('Najpierw opuść swoją obecną gildię')) {\r\n                    alert('⚠ Najpierw opuść swoją obecną gildię lub ją usuń, aby stworzyć nową.');\r\n                } else {\r\n                    alert(`❌ Nie udało się utworzyć gildii: ${result.error}`);\r\n                }\r\n                throw new Error(result.error || 'Nie udało się utworzyć gildii');\r\n            }\r\n            alert('Gildia została pomyślnie stworzona!');\r\n            setNewGuildName('');\r\n            setNewGuildGoal('');\r\n            setNewGuildMaxMembers(10);\r\n            await fetchGuilds();\r\n        } catch (error) {\r\n            console.error('Błąd podczas tworzenia gildii:', error.message);\r\n            alert('Nie udało się utworzyć gildii');\r\n        }\r\n    };\r\n\r\n    const leaveGuild = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/leaveGuild', {\r\n                method: 'POST',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}`, 'Content-Type': 'application/json'  },\r\n            });\r\n    \r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się opuścić gildii');\r\n    \r\n            alert('Opuściłeś gildię');\r\n            await fetchGuilds();\r\n        } catch (error) {\r\n            console.error('Błąd podczas opuszczania gildii:', error.message);\r\n            alert('Nie udało się opuścić gildii');\r\n        }\r\n    };\r\n\r\n    const deleteGuild = async (guildId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/deleteGuild/${guildId}`, {\r\n                method: 'DELETE',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się usunąć gildii');\r\n\r\n            alert('Gildia została usunięta');\r\n            await fetchGuilds();\r\n        } catch (error) {\r\n            console.error('Błąd podczas usuwania gildii:', error.message);\r\n            alert('Nie udało się usunąć gildii');\r\n        }\r\n    };\r\n\r\n    const userGuilds = guilds.filter((guild) =>\r\n        guild.members.some((memberId) => memberId.toString() === userId)\r\n    );\r\n\r\n    if (selectedGuild) {\r\n        return <GuildDetails guild={selectedGuild} goBack={() => setSelectedGuild(null)} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"absolute w-full bg-black1 h-screen text-maincolor4\">\r\n            <div className=\"w-full h-full flex p-5\">\r\n                {/* Sekcja gildii */}\r\n                <div className=\"w-[55vw] bg-gradient-to-r from-black to-maincolor1 h-skreen rounded-3xl m-[1.0vh]  p-[1vh] border-2 \">\r\n                <h2 className=\"text-white text-2xl font-bold mb-4 ml-4\">Twoje gildie</h2>\r\n\r\n                    <ul className=\"space-y-4\">\r\n                        {userGuilds.length > 0 ? userGuilds.map((guild) => (\r\n                            <li\r\n                                key={guild._id}\r\n                                className=\"p-4 bg-gray-800 rounded-xl flex justify-between items-center hover:bg-blue-900 cursor-pointer border-2 border-white\"\r\n                                onClick={() => setSelectedGuild(guild)}\r\n                            >\r\n                                <span>{guild.name}</span>\r\n                                <span>{guild.members.length}/{guild.maxMembers}</span>\r\n                                {guild.ownerId === userId ? (\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            deleteGuild(guild._id);\r\n                                        }}\r\n                                        className=\"bg-maincolor2 text-white px-2 py-1 rounded\"\r\n                                    >\r\n                                        Usuń\r\n                                    </button>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            leaveGuild();\r\n                                        }}\r\n                                        className=\"bg-maincolor2 text-white px-2 py-1 rounded\"\r\n                                    >\r\n                                        Opuść\r\n                                    </button>\r\n                                )}\r\n                            </li>\r\n                        )) : <li className=\"text-gray-400\">Nie jesteś członkiem żadnej gildii</li>}\r\n                    </ul>\r\n\r\n                    <GuildInvitations fetchGuilds={fetchGuilds} />\r\n                </div>\r\n\r\n                {/* Sekcja użytkowników online */}\r\n                <div className=\"w-[22vw] bg-maincolor1 h-skreen rounded-3xl m-[1.0vh]  p-[1vh] border-2 \">\r\n                    <h2 className=\"text-white text-2xl font-bold mb-4\">Użytkownicy online</h2>\r\n                    <ul className=\"space-y-2\">\r\n                        {onlineUsers.length > 0 ? onlineUsers.map((user) => (\r\n                            <li key={user._id} className=\"p-2 bg-gray-700 text-white rounded\">\r\n                                {user.username}\r\n                            </li>\r\n                        )) : <li className=\"text-gray-400\">Brak użytkowników online</li>}\r\n                    </ul>\r\n                </div>\r\n\r\n                {/* Sekcja tworzenia gildii */}\r\n                <div className=\"w-[22vw] bg-maincolor1 h-skreen  rounded-3xl m-[1.0vh]  p-[1vh] border-2 \">\r\n                    <h2 className=\"text-white text-2xl font-bold mb-4\">Stwórz Gildię</h2>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Nazwa gildii\"\r\n                        className=\"block w-full p-2 bg-gray-700 text-white rounded mb-4\"\r\n                        value={newGuildName}\r\n                        onChange={(e) => setNewGuildName(e.target.value)}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Opis gildii\"\r\n                        className=\"block w-full p-2 bg-gray-700 text-white rounded mb-4\"\r\n                        value={newGuildGoal}\r\n                        onChange={(e) => setNewGuildGoal(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Maksymalna liczba członków\"\r\n                        className=\"block w-full p-2 bg-gray-700 text-white rounded mb-4\"\r\n                        value={newGuildMaxMembers}\r\n                        onChange={(e) => setNewGuildMaxMembers(Number(e.target.value))}\r\n                    />\r\n                    <button\r\n                        onClick={createGuild}\r\n                        className=\"w-full bg-gradient-to-r from-blue-900 to-maincolor2 text-black font-bold py-2 rounded-xl hover:text-maincolor4\"\r\n                    >\r\n                        Stwórz Gildię\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuildView;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildDetails.js",["228"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction GuildDetails({ guild, goBack }) {\r\n    const [inviteLink] = useState('');\r\n    const [newMaxMembers, setNewMaxMembers] = useState(guild.maxMembers);\r\n    const [inviteUsername, setInviteUsername] = useState('');\r\n    const [inviteStatus, setInviteStatus] = useState('');\r\n    const userId = localStorage.getItem('userId'); \r\n    const isOwner = guild.ownerId === userId;\r\n    const [guildMembersUsernames, setGuildMembersUsernames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchGuildMembersUsernames(guild._id);\r\n    }, [guild._id]);\r\n\r\n    const fetchGuildMembersUsernames = async (guildId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/guilds/${guildId}/members`, {\r\n                method: 'GET',\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się pobrać nazw użytkowników członków gildii');\r\n            setGuildMembersUsernames(result.members || []);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania nazw użytkowników członków gildii:', error.message);\r\n        }\r\n    };\r\n\r\n    const updateMaxMembers = async () => {\r\n\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może zmieniać limit użytkowników');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/updateMaxMembers/${guild._id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ maxMembers: newMaxMembers }),\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się zaktualizować limitu');\r\n            alert('Limit użytkowników został zaktualizowany');\r\n        } catch (error) {\r\n            console.error('Błąd:', error.message);\r\n        }\r\n    };\r\n\r\n    const removeMember = async (memberId) => {\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może usuwać członków');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/removeMember/${guild._id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ memberId }),\r\n            });\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Nie udało się usunąć członka');\r\n            alert('Członek został usunięty');\r\n            fetchGuildMembersUsernames(guild._id); \r\n        } catch (error) {\r\n            console.error('Błąd:', error.message);\r\n        }\r\n    };\r\n\r\n    const sendInvite = async () => {\r\n        if (!isOwner) {\r\n            alert('Tylko właściciel gildii może wysyłać zaproszenia');\r\n            return;\r\n        }\r\n        try {\r\n            if (!inviteUsername) {\r\n                alert('Wpisz nazwę użytkownika');\r\n                return;\r\n            }\r\n            const response = await fetch('http://localhost:8080/api/inviteToGuild', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ username: inviteUsername }),\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (!response.ok) throw new Error(result.error || 'Błąd podczas wysyłania zaproszenia');\r\n\r\n            setInviteStatus(`Zaproszenie wysłane do użytkownika ${inviteUsername}`);\r\n            setInviteUsername('');\r\n        } catch (error) {\r\n            console.error('Błąd podczas wysyłania zaproszenia:', error.message);\r\n            setInviteStatus(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"absolute w-full bg-black1 h-screen text-maincolor4\">\r\n        <div className=\"w-full h-full flex p-5\">\r\n            {/* Sekcja gildii */}\r\n            <div className=\"w-[100vw] bg-maincolor1 h-skreen rounded-3xl m-[1.0vh]  p-[1vh] border-2 \">\r\n            <button\r\n                onClick={goBack}\r\n                className=\"bg-gray-800 text-white px-4 py-2 rounded-xl mb-4 hover:bg-blue-900 transition-all font-bold border-2 border-white\"\r\n            >\r\n                Powrót\r\n            </button>\r\n    \r\n            {/* Informacje o gildii */}\r\n            <h2 className=\"text-white text-3xl font-bold mb-4\">{guild.name}</h2>\r\n            <p className=\"text-maincolor4 text-lg mb-4\">Opis gildii: <span className=\"text-white\">{guild.goal}</span></p>\r\n    \r\n          {/* Lista członków */}\r\n         <h3 className=\"text-maincolor4 text-2xl font-semibold mb-2\">Członkowie:</h3>\r\n        <ul className=\"space-y-3\">\r\n    {guildMembersUsernames.map((member) => (\r\n        <li key={member._id}\r\n            className=\"flex justify-between items-center p-3 bg-gray-800 rounded-xl hover:bg-black transition-all border-2 border-white\"\r\n        >\r\n            {/* Oznaczenie właściciela */}\r\n            <span className=\"text-white\">\r\n                {member.username} {member.isOwner && \"(Owner)\"}\r\n            </span>\r\n\r\n            {/* Przycisk \"Usuń\" tylko dla nie-właścicieli */}\r\n            {!member.isOwner && isOwner && (\r\n                <button\r\n                    className=\"bg-blue-900 text-white px-3 py-1 rounded-xl hover:bg-red-400 transition-all\"\r\n                    onClick={() => removeMember(member._id)}\r\n                >\r\n                    Usuń\r\n                </button>\r\n            )}\r\n        </li>\r\n    ))}\r\n</ul>\r\n\r\n\r\n            <div className=\"border-t-2 border-gray-600 my-4\"></div>\r\n    \r\n            {/* Sekcja właściciela */}\r\n            {isOwner && (\r\n                <>\r\n                    {/* Zmiana limitu użytkowników */}\r\n                    <div className=\"mt-6\">\r\n                        <h3 className=\"text-maincolor4 text-2xl font-semibold mb-2\">Limit użytkowników</h3>\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"block w-full p-3 bg-gray-700 text-white rounded-xl mb-4\"\r\n                            value={newMaxMembers}\r\n                            onChange={(e) => setNewMaxMembers(Number(e.target.value))}\r\n                        />\r\n                        <button\r\n                            onClick={updateMaxMembers}\r\n                            className=\"bg-gradient-to-r from-blue-900 to-maincolor2 text-black font-bold py-2 px-6 rounded-xl hover:text-maincolor4\"\r\n                        >\r\n                            Zaktualizuj limit\r\n                        </button>\r\n                    </div>\r\n    \r\n                    {/* Wysyłanie zaproszeń */}\r\n                    <div className=\"mt-6\">\r\n                        <h3 className=\"text-maincolor4 text-2xl font-semibold mb-2\">Wyślij zaproszenie do gildii</h3>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Nazwa użytkownika\"\r\n                            className=\"block w-full p-3 bg-gray-700 text-white rounded-xl mb-4\"\r\n                            value={inviteUsername}\r\n                            onChange={(e) => setInviteUsername(e.target.value)}\r\n                        />\r\n                        <button\r\n                            onClick={sendInvite}\r\n                            className=\"bg-gradient-to-r from-blue-900 to-maincolor2 text-black font-bold py-2 px-6 rounded-xl hover:text-maincolor4\"\r\n                        >\r\n                            Wyślij zaproszenie\r\n                        </button>\r\n                        {inviteStatus && (\r\n                            <p className=\"text-gray-300 mt-2\">{inviteStatus}</p>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuildDetails;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\GuildInvitations.js",[],[],{"ruleId":"229","severity":1,"message":"230","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":68,"column":44,"nodeType":"235","messageId":"236","endLine":68,"endColumn":45,"suggestions":"237","suppressions":"238"},{"ruleId":"233","severity":1,"message":"239","line":68,"column":61,"nodeType":"235","messageId":"236","endLine":68,"endColumn":62,"suggestions":"240","suppressions":"241"},{"ruleId":"229","severity":1,"message":"242","line":134,"column":15,"nodeType":"231","messageId":"232","endLine":134,"endColumn":19},{"ruleId":"243","severity":1,"message":"244","line":180,"column":6,"nodeType":"245","endLine":180,"endColumn":8,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":424,"column":132,"nodeType":"249","endLine":424,"endColumn":179},{"ruleId":"243","severity":1,"message":"250","line":105,"column":5,"nodeType":"245","endLine":105,"endColumn":7,"suggestions":"251"},{"ruleId":"229","severity":1,"message":"252","line":120,"column":11,"nodeType":"231","messageId":"232","endLine":120,"endColumn":15},{"ruleId":"247","severity":1,"message":"248","line":208,"column":9,"nodeType":"249","endLine":208,"endColumn":80},{"ruleId":"247","severity":1,"message":"248","line":298,"column":9,"nodeType":"249","endLine":298,"endColumn":80},{"ruleId":"243","severity":1,"message":"253","line":35,"column":8,"nodeType":"245","endLine":35,"endColumn":15,"suggestions":"254"},{"ruleId":"229","severity":1,"message":"255","line":8,"column":10,"nodeType":"231","messageId":"232","endLine":8,"endColumn":25},{"ruleId":"229","severity":1,"message":"256","line":17,"column":9,"nodeType":"231","messageId":"232","endLine":17,"endColumn":29},{"ruleId":"229","severity":1,"message":"256","line":10,"column":9,"nodeType":"231","messageId":"232","endLine":10,"endColumn":29},{"ruleId":"243","severity":1,"message":"257","line":44,"column":8,"nodeType":"245","endLine":44,"endColumn":10,"suggestions":"258"},{"ruleId":"247","severity":1,"message":"248","line":84,"column":9,"nodeType":"249","endLine":84,"endColumn":107},{"ruleId":"243","severity":1,"message":"259","line":23,"column":8,"nodeType":"245","endLine":23,"endColumn":19,"suggestions":"260"},{"ruleId":"229","severity":1,"message":"252","line":89,"column":15,"nodeType":"231","messageId":"232","endLine":89,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":363,"column":21,"nodeType":"249","endLine":363,"endColumn":92},{"ruleId":"229","severity":1,"message":"261","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":14},{"ruleId":"243","severity":1,"message":"262","line":27,"column":8,"nodeType":"245","endLine":27,"endColumn":79,"suggestions":"263"},{"ruleId":"247","severity":1,"message":"248","line":54,"column":21,"nodeType":"249","endLine":54,"endColumn":110},{"ruleId":"247","severity":1,"message":"248","line":57,"column":21,"nodeType":"249","endLine":57,"endColumn":110},{"ruleId":"247","severity":1,"message":"248","line":92,"column":126,"nodeType":"249","endLine":92,"endColumn":181},{"ruleId":"247","severity":1,"message":"248","line":93,"column":126,"nodeType":"249","endLine":93,"endColumn":186},{"ruleId":"247","severity":1,"message":"248","line":97,"column":126,"nodeType":"249","endLine":97,"endColumn":181},{"ruleId":"247","severity":1,"message":"248","line":98,"column":126,"nodeType":"249","endLine":98,"endColumn":186},{"ruleId":"229","severity":1,"message":"264","line":7,"column":10,"nodeType":"231","messageId":"232","endLine":7,"endColumn":23},{"ruleId":"229","severity":1,"message":"265","line":7,"column":25,"nodeType":"231","messageId":"232","endLine":7,"endColumn":41},{"ruleId":"229","severity":1,"message":"266","line":16,"column":10,"nodeType":"231","messageId":"232","endLine":16,"endColumn":19},{"ruleId":"229","severity":1,"message":"267","line":16,"column":21,"nodeType":"231","messageId":"232","endLine":16,"endColumn":33},{"ruleId":"243","severity":1,"message":"268","line":46,"column":5,"nodeType":"245","endLine":46,"endColumn":7,"suggestions":"269"},{"ruleId":"229","severity":1,"message":"242","line":174,"column":15,"nodeType":"231","messageId":"232","endLine":174,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":244,"column":17,"nodeType":"249","endLine":244,"endColumn":154},{"ruleId":"247","severity":1,"message":"248","line":245,"column":20,"nodeType":"249","endLine":245,"endColumn":163},{"ruleId":"247","severity":1,"message":"248","line":261,"column":62,"nodeType":"249","endLine":261,"endColumn":110},{"ruleId":"247","severity":1,"message":"248","line":262,"column":61,"nodeType":"249","endLine":262,"endColumn":114},{"ruleId":"243","severity":1,"message":"270","line":32,"column":8,"nodeType":"245","endLine":32,"endColumn":10,"suggestions":"271"},{"ruleId":"229","severity":1,"message":"272","line":4,"column":12,"nodeType":"231","messageId":"232","endLine":4,"endColumn":22},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["273","274"],["275"],"Unnecessary escape character: \\/.",["276","277"],["278"],"'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'creatures', 'itemsFromUser', and 'species'. Either include them or remove the dependency array.","ArrayExpression",["279"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'ShopData'. Either include it or remove the dependency array.",["280"],"'rect' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["281"],"'responseMessage' is assigned a value but never used.","'handleLanguageChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'newCreatureData.species' and 'photoName'. Either include them or remove the dependency array.",["282"],"React Hook useEffect has missing dependencies: 'fetchMarketItems' and 'updateTimers'. Either include them or remove the dependency array.",["283"],"'create' is defined but never used.","React Hook useEffect has missing dependencies: 'changeCreature1Life', 'changeCreature2Life', 'creatureFightData.fight.fightData.creature1.dmg', 'creatureFightData.fight.fightData.creature2.dmg', 'fullFightLenght', and 'infoSpeed'. Either include them or remove the dependency array.",["284"],"'timeLeftTable' is assigned a value but never used.","'setTimeLeftTable' is assigned a value but never used.","'fightData' is assigned a value but never used.","'setFightData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'creaturesData' and 'spiecesPhotos'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["286"],"'inviteLink' is assigned a value but never used.",{"messageId":"287","fix":"288","desc":"289"},{"messageId":"290","fix":"291","desc":"292"},{"kind":"293","justification":"294"},{"messageId":"287","fix":"295","desc":"289"},{"messageId":"290","fix":"296","desc":"292"},{"kind":"293","justification":"294"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"removeEscape",{"range":"313","text":"294"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"314","text":"315"},"Replace the `\\` with `\\\\` to include the actual backslash character.","directive","",{"range":"316","text":"294"},{"range":"317","text":"315"},"Update the dependencies array to be: [creatures, itemsFromUser, species]",{"range":"318","text":"319"},"Update the dependencies array to be: [ShopData]",{"range":"320","text":"321"},"Update the dependencies array to be: [fetchMessages, token]",{"range":"322","text":"323"},"Update the dependencies array to be: [newCreatureData.species, photoName]",{"range":"324","text":"325"},"Update the dependencies array to be: [activeTab, fetchMarketItems, updateTimers]",{"range":"326","text":"327"},"Update the dependencies array to be: [visibleItems, creatureFightData.fight.fightData.creature1.info.length, fullFightLenght, infoSpeed, changeCreature2Life, creatureFightData.fight.fightData.creature1.dmg, creatureFightData.fight.fightData.creature2.dmg, changeCreature1Life]",{"range":"328","text":"329"},"Update the dependencies array to be: [creaturesData, spiecesPhotos]",{"range":"330","text":"331"},"Update the dependencies array to be: [userId]",{"range":"332","text":"333"},[2088,2089],[2088,2088],"\\",[2105,2106],[2105,2105],[5932,5934],"[creatures, itemsFromUser, species]",[3119,3121],"[ShopData]",[1553,1560],"[fetchMessages, token]",[1876,1878],"[newCreatureData.species, photoName]",[1138,1149],"[activeTab, fetchMarketItems, updateTimers]",[1340,1411],"[visibleItems, creatureFightData.fight.fightData.creature1.info.length, fullFightLenght, infoSpeed, changeCreature2Life, creatureFightData.fight.fightData.creature1.dmg, creatureFightData.fight.fightData.creature2.dmg, changeCreature1Life]",[1408,1410],"[creaturesData, spiecesPhotos]",[1340,1342],"[userId]"]