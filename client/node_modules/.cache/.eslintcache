[{"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js":"1","C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js":"2","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js":"3","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js":"4","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js":"5","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js":"6","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js":"7","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js":"8","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js":"9","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js":"10","C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js":"11","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js":"12","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js":"13","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js":"14","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js":"15","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js":"16","C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js":"17","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js":"18","C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js":"19","C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js":"20","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js":"21","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js":"22","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js":"23","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js":"24","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js":"25","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js":"26","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js":"27","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js":"28"},{"size":230,"mtime":1733455277000,"results":"29","hashOfConfig":"30"},{"size":3037,"mtime":1733462223000,"results":"31","hashOfConfig":"30"},{"size":4327,"mtime":1733461371000,"results":"32","hashOfConfig":"30"},{"size":2784,"mtime":1733460945000,"results":"33","hashOfConfig":"30"},{"size":6363,"mtime":1733461200000,"results":"34","hashOfConfig":"30"},{"size":6221,"mtime":1733462294000,"results":"35","hashOfConfig":"30"},{"size":4324,"mtime":1733461073000,"results":"36","hashOfConfig":"30"},{"size":4266,"mtime":1733461281000,"results":"37","hashOfConfig":"30"},{"size":113,"mtime":1731339676000,"results":"38","hashOfConfig":"30"},{"size":4208,"mtime":1736610062972,"results":"39","hashOfConfig":"30"},{"size":1422,"mtime":1733462090000,"results":"40","hashOfConfig":"30"},{"size":4890,"mtime":1736614352539,"results":"41","hashOfConfig":"30"},{"size":2621,"mtime":1736693645702,"results":"42","hashOfConfig":"30"},{"size":2028,"mtime":1733461430000,"results":"43","hashOfConfig":"30"},{"size":1838,"mtime":1736853302714,"results":"44","hashOfConfig":"30"},{"size":5662,"mtime":1733464357000,"results":"45","hashOfConfig":"30"},{"size":721,"mtime":1733462113000,"results":"46","hashOfConfig":"30"},{"size":4047,"mtime":1733462017000,"results":"47","hashOfConfig":"30"},{"size":711,"mtime":1733461908000,"results":"48","hashOfConfig":"30"},{"size":2671,"mtime":1733462052000,"results":"49","hashOfConfig":"30"},{"size":3225,"mtime":1736614352537,"results":"50","hashOfConfig":"30"},{"size":650,"mtime":1736542038798,"results":"51","hashOfConfig":"30"},{"size":20206,"mtime":1736610062971,"results":"52","hashOfConfig":"30"},{"size":12720,"mtime":1736987627046,"results":"53","hashOfConfig":"30"},{"size":17053,"mtime":1736688008572,"results":"54","hashOfConfig":"30"},{"size":3287,"mtime":1736610062972,"results":"55","hashOfConfig":"30"},{"size":4140,"mtime":1736450057831,"results":"56","hashOfConfig":"30"},{"size":18466,"mtime":1737248850316,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1e4jrjj",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"61"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"61"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"61"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"61"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\48664\\Desktop\\project\\client\\src\\index.js",[],[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\App.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Password.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Username.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Register.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Profile.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Reset.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Recovery.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\PageNotFound.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\MainPage.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\middleware\\auth.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\StartPage.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Menu.js",["148","149"],[],"import React, { useState, useEffect } from 'react' // Import biblioteki React\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent Menu\r\n// `toogleOptions` - funkcja do przełączania opcji\r\n// `onButtonClick` - funkcja obsługująca kliknięcia przycisków w menu\r\nfunction Menu({ toogleOptions, onButtonClick, username }) {\r\n  const { t } = useTranslation(); // Funkcja `t` służy do tłumaczeń w `react-i18next`\r\n  // Lista etykiet dla przycisków menu, przetłumaczona za pomocą `t`\r\n  const buttonLabels = [\r\n    t('Strona główna'),       // Tłumaczenie dla \"Strona główna\"\r\n    t('Moje stworki'),        // Tłumaczenie dla \"Moje stworki\"\r\n    t('Sklep'),               // Tłumaczenie dla \"Sklep\"\r\n    t('Wiadomości prywatne'), // Tłumaczenie dla dodatkowej opcji D\r\n    t('Market'),             // Tłumaczenie dla dodatkowej opcji E\r\n    t('optionF'),             // Tłumaczenie dla dodatkowej opcji F\r\n    t('optionG')              // Tłumaczenie dla dodatkowej opcji G\r\n  ];\r\n  \r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"relative flex flex-col items-center bg-maincolor1 text-maincolor4 space-y-4 w-1/5 h-screen rounded-xl pt-10 border-r-2 border-maincolor5\">\r\n      {/* Przyciski menu */}\r\n      <div>\r\n            {username ? <h1>Witaj, {username}!</h1> : <p>Ładowanie danych użytkownika...</p>}\r\n        </div>\r\n      {buttonLabels.map((label, index) => (\r\n        <button\r\n          key={index} // Unikalny klucz dla każdego przycisku\r\n          onClick={() => onButtonClick(index + 1)} // Wywołanie `onButtonClick` z numerem przycisku (indeks + 1)\r\n          className=\"border-maincolor2 rounded-xl border py-2 px-4 w-4/5 hover:border-maincolor5 hover:shadow-maincolor5 hover:bg-maincolor4 shadow-buttonshadow transition duration-300 hover:text-black1 hover:bg-opacity-75\"\r\n        >\r\n          {label} {/* Wyświetlana etykieta przycisku */}\r\n        </button>\r\n      ))}\r\n      \r\n      {/* Przyciski na dole menu */}\r\n      <div className=\"flex justify-between absolute bottom-10 w-3/5\">\r\n        {/* Przycisk opcji */}\r\n        <button onClick={toogleOptions} className=\"w-1/3 border-maincolor5 border rounded-full\">\r\n          {t('options')} {/* Tłumaczenie dla \"options\" */}\r\n        </button>\r\n        \r\n        {/* Przycisk wylogowania */}\r\n        <button className=\"w-1/3 border-maincolor5 border rounded-full\">\r\n          {t('logout')} {/* Tłumaczenie dla \"logout\" */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu; // Eksport komponentu\r\n","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Options.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\Content.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\helper.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\store\\store.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\validate.js",[],["150","151"],"C:\\Users\\48664\\Desktop\\project\\client\\src\\helper\\convert.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\hooks\\fetch.hook.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Chat.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\Notice.js",[],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton2.js",["152","153"],[],"import React, { useEffect, useState } from \"react\";  // Importujemy React oraz useState do obsługi stanów.\r\n\r\nfunction TestButton2({data, NewCreatureActiveButton}) {\r\n  const [creatures, setCreatures] = useState(null);\r\n  const [species, setSpecies] = useState(null);\r\n  const [itemsFromUser, setItemsFromUser] = useState(null);\r\n  const [visibleCreature, setVisibleCreature] = useState(0);\r\n  const [itemActionVisible, setItemActionVisible] = useState(false);\r\n  const [actualItem, setActualItem] = useState([]);\r\n\r\n  // DODANE (1) – Stany związane z tooltipem:\r\n  const maxHeight = window.innerHeight;\r\n  const maxWidth = window.innerWidth;\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);          // Czy tooltip jest widoczny\r\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 }); // Pozycja tooltipa\r\n  const [tooltipContent, setTooltipContent] = useState(null);           // Zawartość (item) tooltipa\r\n  const [whatItemPanel, setWhatItemPanel] = useState(null);\r\n  const fetchUserData = async () => {\r\n    const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch('http://localhost:8080/api/usersCreaturesAndItemsData ', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych użytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        setCreatures(data.creatures);\r\n        setSpecies(data.species);\r\n        setItemsFromUser(data.items);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const equipeItem = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/equipeItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const ItemUse = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/useItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const unequipeItem = async (itemId, creatureId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/unequipeItem?itemId=${itemId}&creatureId=${creatureId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  const OrbUse = async (itemId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`http://localhost:8080/api/useOrb?itemId=${itemId} `, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error('Błąd pobierania danych urzytkownika:', response.statusText);\r\n            return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        console.error('Błąd podczas pobierania danych użytkownika:', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const loadCreaturesAndItemData = async () =>{\r\n      await fetchUserData();\r\n      console.log(creatures, \"creatures\");\r\n      console.log(species, \"species\");\r\n      console.log(itemsFromUser, \" items\");\r\n    };\r\n    loadCreaturesAndItemData();\r\n  }, []);\r\n\r\n  // Nazwy statystyk postaci\r\n  const statsNames = [\"POW\", \"VIT\", \"STR\", \"DEX\", \"INT\"];\r\n  \r\n  // Strzałki do przesuwania panelu\r\n  const arrows = [\"◂\", \"▸\"];\r\n  \r\n  // Puste tablice dla przedmiotów (15 przedmiotów w sklepie) oraz aktywnych przedmiotów (3 przedmioty aktywne)\r\n  const items = Array(15).fill(\"\");\r\n  const itemsActive = Array(3).fill(\"\");\r\n\r\n  // Funkcja zmieniająca widocznego stwora\r\n  const newCreature = (buttonNumber) => {\r\n    setVisibleCreature(buttonNumber);\r\n  };\r\n\r\n  // Stan do zarządzania widocznością panelu (przesuwany panel)\r\n  const [panelVisible, setPanelVisible] = useState(false);\r\n\r\n  // Funkcja zmieniająca stan widoczności panelu\r\n  const makePanelVisible = () => {\r\n    setPanelVisible(!panelVisible);\r\n  };\r\n\r\n  const makeItemPanelVisible =(itemData)=>{\r\n    setItemActionVisible(!itemActionVisible);\r\n    console.log(\"panel widoczny\", itemData);\r\n    setActualItem(itemData);\r\n  };\r\n\r\n  // Zakładanie i zdejmowanie przedmiotu\r\n  const equiqeItemClick = async (itemId, creatureId)=>{\r\n    await equipeItem(itemId, creatureId);\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  };\r\n\r\n  const unequiqeItemClick = async (itemId, creatureId)=>{\r\n    await unequipeItem(itemId, creatureId);\r\n    await fetchUserData(); \r\n  };\r\n\r\n  const handleItemClick = async (itemId, creatureId)=>{\r\n    await ItemUse(itemId, creatureId);\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  };\r\n  const handleOrbClick = async(itemId)=>{\r\n    await OrbUse(itemId).then((response)=>{\r\n      NewCreatureActiveButton(response.NewCreature);\r\n    });\r\n    setItemActionVisible(false);\r\n    await fetchUserData(); \r\n  }\r\n  // DODANE (2) – Funkcje do obsługi zdarzeń myszy (hover) dla tooltipa\r\n  const handleMouseEnter = (event, item, type) => {\r\n    // Ustaw pozycję tooltipa\r\n    setTooltipPosition({ x: event.pageX, y: event.pageY });\r\n    // Przekazujemy cały obiekt item, by wyświetlić jego dane w tooltipie\r\n    setTooltipContent(item);\r\n    setTooltipVisible(true);\r\n    setWhatItemPanel(type);\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    setTooltipPosition({ x: event.pageX, y: event.pageY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setTooltipVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-full bg-black1 flex justify-center p-5 flex-col space-y-4 relative\">\r\n      {console.log(itemsFromUser, \"items\")}\r\n      {creatures ? (\r\n        <>\r\n          {/* Górny panel (stwór, aktywne przedmioty, statystyki) */}\r\n          <div className=\"w-full h-1/2 bg-maincolor1 rounded-xl p-4 flex items-center z-0\">\r\n            {/* Obrazek stwora */}\r\n            <div className=\"h-[45vh] aspect-square bg-maincolor4 rounded-xl border-2 border-maincolor5\">\r\n              <img\r\n                src={`images/${species[visibleCreature].photos[0]}.png` || `images/${species[0].photos[0]}.png`}\r\n                alt=\"Displayed Creature\"\r\n                className=\"w-full h-full object-cover rounded-xl\"\r\n              />\r\n            </div>\r\n            \r\n            {/* Panel aktywnych przedmiotów */}\r\n            <div className=\"w-1/6 h-full\">\r\n              {itemsActive.map((_, index) => (\r\n                <div key={index} className=\"w-full h-1/3 p-4 flex flex-wrap justify-center\">\r\n                  <div className=\"h-[12vh] aspect-square bg-black1 bg-opacity-50 rounded-xl border-maincolor4 border-2\">\r\n                    {creatures[visibleCreature].items[index] && (\r\n                      <button\r\n                        onClick={() => unequiqeItemClick(creatures[visibleCreature].items[index]._id, creatures[visibleCreature]._id)}\r\n                        // DODANE (3) – Obsługa eventów dla tooltipa:\r\n                        onMouseEnter={(event) => handleMouseEnter(event, creatures[visibleCreature].items[index], false)}\r\n                        onMouseLeave={handleMouseLeave}\r\n                        onMouseMove={handleMouseMove}\r\n                      >\r\n                        <img src={`images/${creatures[visibleCreature].items[index].photo}.png`} alt=\"\" />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Panel statystyk */}\r\n            <div className=\"h-full flex-grow rounded-xl border-2 border-maincolor4 flex-col\">\r\n              <div className=\"h-2/3 w-full flex\">\r\n                {/* Nazwy statystyk */}\r\n                <div className=\"w-1/5 h-full text-maincolor4 text-[3vh] flex flex-col items-center\">\r\n                  {statsNames.map((stat, index) => (\r\n                    <div key={index} className=\"w-full h-1/5 text-center\">\r\n                      {stat}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Wartości statystyk */}\r\n                <div className=\"w-4/5 h-full text-[3vh] text-maincolor4 flex\">\r\n                  <div className=\"w-1/5 h-full flex flex-col items-start\">\r\n                    {statsNames.map((_, index) => (\r\n                      <div key={index} className=\"w-full h-1/5 text-center\">\r\n                        {creatures[visibleCreature].staty[index]\r\n                          + species[visibleCreature].baseStats[index]\r\n                          + ((creatures[visibleCreature].level - 1) * species[visibleCreature].statsAfterLevel[index])\r\n                        }\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <div className=\"w-4/5 h-full\">\r\n                    <p className=\"w-full h-1/4 text-center\">NAME</p>\r\n                    <div className=\"w-full h-3/4 text-center\">{creatures[visibleCreature].name}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Panel pasywny */}\r\n              <div className=\"w-full h-1/3 p-2\">\r\n                <p className=\"h-1/6 text-maincolor4 text-[2vh] flex items-center justify-center\">PASIVE</p>\r\n                <div className=\"border-2 border-maincolor5 bg-black1 bg-opacity-50 w-full h-5/6 rounded-xl text-maincolor4 p-2\">\r\n                  MIEJSCE NA UMIEJĘTNOSĆ PASYWNĄ\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Panel z potworami i przedmiotami */}\r\n          <div className=\"w-full h-1/2 flex gap-4\">\r\n            {/* Obrazy potworów */}\r\n            <div className=\"w-1/2 h-full bg-maincolor1 rounded-xl flex flex-wrap justify-center\">\r\n              {species.map((a, index) => (\r\n                <div key={index} className=\"w-1/3 h-1/2 grid place-items-center\">\r\n                  <div\r\n                    onClick={() => newCreature(index)}\r\n                    className=\"relative h-[20vh] aspect-square bg-black1 rounded-xl border-black1 border-2\"\r\n                  >\r\n                    <img\r\n                      src={`images/${a.photos[0]}.png`}\r\n                      alt={`Monster ${index + 1}`}\r\n                      className=\"absolute w-full h-full object-cover rounded-xl\"\r\n                    />\r\n                    <div className=\"p-3 flex flex-col absolute bg-black1 text-maincolor4 w-full h-full text-opacity-0 bg-opacity-0 hover:bg-opacity-70 hover:text-opacity-100 rounded-xl\">\r\n                      {statsNames.map((statName, ind) => (\r\n                        <p key={ind}>\r\n                          {statName}{\" \"}\r\n                          {creatures[index].staty[ind]\r\n                            + species[index].baseStats[ind]\r\n                            + ((creatures[index].level -1) * species[index].statsAfterLevel[ind])}\r\n                        </p>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Panel z przedmiotami */}\r\n            <div className=\"relative w-1/2 h-full bg-maincolor1 rounded-xl flex flex-wrap justify-center gap-4 p-4 overflow-y-auto max-h-[60vh]\">\r\n              {items.map((_, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"w-[6vw] h-[6vw] min-h-[70px] min-w-[70px] bg-black1 bg-opacity-50 rounded-xl border-maincolor4 border-2\"\r\n                >\r\n                  {itemsFromUser && itemsFromUser[index] && (\r\n                    <button\r\n                      onClick={() => makeItemPanelVisible(itemsFromUser[index])}\r\n                      // DODANE (4) – Obsługa eventów dla tooltipa także na itemy w panelu\r\n                      onMouseEnter={(event) => handleMouseEnter(event, itemsFromUser[index], true)}\r\n                      onMouseLeave={handleMouseLeave}\r\n                      onMouseMove={handleMouseMove}\r\n                    >\r\n                      <img src={`images/${itemsFromUser[index].photo}.png`} alt=\"\" />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              {itemActionVisible && (\r\n                <div className=\"absolute top-0 left-0 w-full h-full bg-black1 bg-opacity-90 z-10 flex justify-center items-center\">\r\n                  <div className=\"w-[80%] h-[80%] bg-maincolor1 text-maincolor4 p-4 rounded-xl border border-maincolor5 shadow-lg flex justify-center items-center relative\">\r\n                    <p>{actualItem.name}</p>\r\n                    <img className=\"w-1/2\" src={`images/${actualItem.photo}.png`} alt=\"\" />\r\n                    {\r\n                      console.log(actualItem.type)\r\n                    }\r\n                    {actualItem.type === \"orb\" &&(\r\n                      <button onClick={() => handleOrbClick(actualItem._id)}>Use</button>)\r\n                    }\r\n                    {actualItem.type === \"equipable\" &&\r\n                       (<button onClick={() => equiqeItemClick(actualItem._id, creatures[visibleCreature]._id)}>Equipe</button>)\r\n                    }\r\n                    {actualItem.type === \"usable\" &&\r\n                       (<button onClick={() => handleItemClick(actualItem._id, creatures[visibleCreature]._id)}>Use</button>)\r\n                    }\r\n                    <button\r\n                      className=\"absolute top-4 right-4 text-maincolor4 font-bold\"\r\n                      onClick={() => setItemActionVisible(false)}\r\n                    >\r\n                      X\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Przesuwany panel */}\r\n          <div\r\n            className={`fixed top-[-1vw] right-0 w-[79vw] h-1/2 bg-black1 text-maincolor4 transform transition-transform duration-500 rounded-xl \r\n            bg-opacity-90 border-maincolor5 border-2 ${\r\n              panelVisible ? \"translate-x-0\" : \"translate-x-full\"\r\n            }`}\r\n          >\r\n            <div\r\n              className={`absolute h-[15vh] bg-maincolor1 top-[15.5vh] rounded flex justify-center -p-[5vh] border-maincolor5 border-2 ${\r\n                panelVisible ? \"left-[-1vw]\" : \"left-[-2vw]\"\r\n              }`}\r\n            >\r\n              <div className=\"w-full h-full relative flex justify-center text-[5vh] text-maincolor5\">\r\n                <button onClick={makePanelVisible}>\r\n                  {panelVisible ? arrows[1] : arrows[0]}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div> // Wyświetlanie komunikatu ładowania\r\n      )}\r\n\r\n      {/* DODANE (5) – Render samego tooltipa */}\r\n      {tooltipVisible && tooltipContent && (\r\n        <div\r\n          style={\r\n            whatItemPanel ?\r\n            {\r\n            position: \"fixed\",\r\n            bottom: maxHeight-tooltipPosition.y - 10,\r\n            right: maxWidth-tooltipPosition.x + 10,\r\n            zIndex: 9999,\r\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n            color: \"white\",\r\n            padding: \"8px\",\r\n            borderRadius: \"20px\",\r\n            }:{\r\n              position: \"fixed\",\r\n            top: tooltipPosition.y + 10,\r\n            left: tooltipPosition.x + 10,\r\n            zIndex: 9999,\r\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n            color: \"white\",\r\n            padding: \"8px\",\r\n            borderRadius: \"20px\",\r\n            }\r\n          }\r\n          className={`border-4 ${\r\n            tooltipContent.element === \"fire\"\r\n              ? \"border-red-500\"\r\n              : tooltipContent.element === \"water\"\r\n              ? \"border-cyan-500\"\r\n              : tooltipContent.element === \"nature\"\r\n              ? \"border-green-400\"\r\n              : tooltipContent.element === \"light\"\r\n              ? \"border-yellow-500\"\r\n              : tooltipContent.element === \"dark\"\r\n              ? \"border-purple-900\"\r\n              : \"border-white\"\r\n          }`}\r\n        >\r\n          <h4 className=\"text-2xl font-bold\">{tooltipContent.name}</h4>\r\n          <img\r\n            className=\"w-20 h-20\"\r\n            src={`images/${tooltipContent.photo}.png`}\r\n            alt=\"\"\r\n          />\r\n          <p className=\"text-lg font-bold\">TYPE: {tooltipContent.type}</p>\r\n          {tooltipContent.power !== 0 && <p>POWER: +{tooltipContent.power}</p>}\r\n          {tooltipContent.vitality !== 0 && (\r\n            <p>VITALITY: +{tooltipContent.vitality}</p>\r\n          )}\r\n          {tooltipContent.strength !== 0 && (\r\n            <p>STRENGTH: +{tooltipContent.strength}</p>\r\n          )}\r\n          {tooltipContent.dexterity !== 0 && (\r\n            <p>DEXTERITY: +{tooltipContent.dexterity}</p>\r\n          )}\r\n          {tooltipContent.intelligence !== 0 && (\r\n            <p>INTELLIGENCE: +{tooltipContent.intelligence}</p>\r\n          )}\r\n          {tooltipContent.armor !== 0 && <p>ARMOR: +{tooltipContent.armor}</p>}\r\n          <p>\r\n            <span>ELEMENT: </span>{\" \"}\r\n            <span\r\n              className={`${\r\n                tooltipContent.element === \"fire\"\r\n                  ? \"text-red-500\"\r\n                  : tooltipContent.element === \"water\"\r\n                  ? \"text-cyan-500\"\r\n                  : tooltipContent.element === \"nature\"\r\n                  ? \"text-green-400\"\r\n                  : tooltipContent.element === \"light\"\r\n                  ? \"text-yellow-500\"\r\n                  : tooltipContent.element === \"dark\"\r\n                  ? \"text-purple-900\"\r\n                  : \"text-white\"\r\n              } font-bold`}\r\n            >\r\n              {tooltipContent.element}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {/* KONIEC tooltipa */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestButton2;  // Eksportujemy komponent\r\n","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\TestButton3.js",["154","155","156","157"],[],"C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\PrivateMessages.js",["158"],[],"import React, { useState, useEffect } from 'react';\r\nfunction PrivateMessages({data}) {\r\n    const [messages, setMessages] = useState([]); //Przechowywanie wiadomości użytkownika\r\n    const [newMessage, setNewMessage] = useState({receiver: '', title: '', content: ''});//Nowa wiadomość\r\n    const [newMessageToAll, setNewMessageToAll] = useState({title: '', content: ''});\r\n    const [selectedMessage, setSelectedMessage] = useState(null); //wybrana wiadomość\r\n    const [showSendModal, setShowSendModal] = useState(false);\r\n    const [showSendToAllModal, setShowSendToAllModal] = useState(false);\r\n    const [showReplyModal, setShowReplyModal] = useState(false);\r\n    const token = localStorage.getItem('token');\r\n    const currentUser = data.username;\r\n\r\n    const fetchMessages = async () => {\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messages', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok){\r\n                const data = await response.json();\r\n                console.log('Pobrane wiadomości: ')\r\n                setMessages(data);//Ustawienie wiadomości\r\n            }else{\r\n                console.error('Błąd podczas pobierania wiadomości');\r\n            }\r\n        } catch(error){\r\n            console.error('Błąd serwera:',error);\r\n        }\r\n    };\r\n    //Pobieranie wiadomości po załadowaniu komponentu\r\n    useEffect(() => {\r\n        fetchMessages();\r\n    }, [token]);\r\n    //Wysyłanie wiadomości do wszystkich\r\n    const sendMessageToAll = async() => {\r\n        if(!newMessageToAll.title || !newMessageToAll.content){\r\n            alert('Tytuł i treść są wymagane!');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/messageToAll', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessageToAll),\r\n            });\r\n            if(response.ok){\r\n                //alert('Wiadomość do wszystkich została wysłana!');\r\n                setNewMessageToAll({title:'', content:''});\r\n                setShowSendToAllModal(false);\r\n            }else{\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości do wszystkich użytkowników.'}`);\r\n            }\r\n        }catch(error){\r\n            console.error('Błąd serwera: ',error);\r\n        }\r\n    };\r\n    //Wysyłąnie nowej wiadomości\r\n    const sendMessage = async () => {\r\n        if(!newMessage.receiver || !newMessage.title || !newMessage.content){\r\n            alert('Wszystkie pola są wymagane!');\r\n            return;\r\n        }\r\n        if(newMessage.receiver === currentUser) {\r\n            alert('Nie możesz wysłać wiadomości do samego siebie.');\r\n            return;\r\n        }\r\n        try{\r\n            const response = await fetch('http://localhost:8080/api/message', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(newMessage),\r\n            });\r\n            if(response.ok){\r\n                alert('Wiadomość wysłana!');\r\n                setNewMessage({receiver: '', title: '', content: ''}); //reset formularza\r\n                setShowSendModal(false);\r\n                setShowReplyModal(false);\r\n            } else {\r\n                const errorData = await response.json();\r\n                alert(`Błąd: ${errorData.error || 'Nie udało się wysłać wiadomości.'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Usuwanie wiadomości\r\n    const deleteMessage = async (messageId) => {\r\n        try{\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (response.ok) {\r\n                setMessages((prevMessages) => prevMessages.filter((msg) => msg._id !== messageId));\r\n            } else {\r\n                console.error('Błąd podczas usuwania wiadomości');\r\n            }\r\n        } catch (error){\r\n            console.error('Błąd serwera:', error);\r\n        }\r\n    };\r\n    //Oznaczanie wiadomości jako przeczytana\r\n    const markMessageAsReaded = async (messageId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/messages/${messageId}/read`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (!response.ok) \r\n            {\r\n                throw new Error('Nie udało się oznaczyć wiadomości jako przeczytanej.');\r\n            }\r\n            console.log(`Wiadomość ${messageId} oznaczona jako przeczytana.`);\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n\r\n    //Otwieranie modala do odpowiedzi\r\n    const openReplyModal = (senderUsername) => {\r\n        setNewMessage({receiver: senderUsername, title: '', content: ''});\r\n        setShowReplyModal(true);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"w-full h-screen bg-black flex flex-col p-5 justify-center text-maincolor4\">\r\n            {/* Zielony komponent na czarnym tle */}\r\n            <div className=\"w-full h-full bg-maincolor1 p-5 rounded-xl flex flex-col\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                    <h1 className=\"text-2xl font-bold\">Wiadomości prywatne</h1>\r\n                    <button\r\n                    onClick={() => fetchMessages()}\r\n                    className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Odśwież\r\n                    </button>\r\n                    <button\r\n                        onClick={() => setShowSendModal(true)}\r\n                        className=\"bg-maincolor1 text-maincolor4 border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                    >\r\n                        Wyślij wiadomość\r\n                    </button>\r\n                    {data.isAdmin && (\r\n                        <button\r\n                            onClick={() => setShowSendToAllModal(true)}\r\n                            className=\"bg-maincolor4 text-black border-maincolor2 border px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                        >\r\n                            Wiadomość do wszystkich\r\n                        </button>\r\n                    )}\r\n                </div>\r\n    \r\n                {/* Lista wiadomości */}\r\n                <div className=\"p-4 rounded-xl overflow-y-auto space-y-4 flex-grow\">\r\n                {messages.length > 0 ? (\r\n                    messages.map((msg) => (\r\n                        msg.senderId ? (\r\n                            <div\r\n                                key={msg._id}\r\n                                className={`p-4 rounded-lg shadow-md border ${\r\n                                    msg.isRead ? \"border-maincolor2\" : \"border-maincolor5\"\r\n                                }`}\r\n                            >\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <div>\r\n                                        <p className=\"font-bold\">{msg.title}</p>\r\n                                        <p className=\"text-sm\">Od: {msg.senderId ? msg.senderId.username : \"Nieznany użytkownik\"}</p>\r\n                                        <p className=\"text-xs\">{new Date(msg.createdAt).toLocaleString()}</p>\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={() => deleteMessage(msg._id)}\r\n                                        className=\"text-red-500 hover:text-red-700 text-sm\"\r\n                                    >\r\n                                        Usuń\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"space-x-4 mt-2\">\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            setSelectedMessage(selectedMessage === msg ? null : msg);\r\n                                            if (!msg.isRead) markMessageAsReaded(msg._id);\r\n                                        }}\r\n                                        className=\"mt-2 text-blue-500 hover:underline\"\r\n                                    >\r\n                                        {selectedMessage === msg ? \"Zwiń\" : \"Zobacz szczegóły\"}\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => openReplyModal(msg.senderId.username)}\r\n                                        className=\"text-green-500 hover:underline\"\r\n                                    >\r\n                                        Odpowiedz\r\n                                    </button>\r\n                                </div>\r\n                                {selectedMessage === msg && (\r\n                                    <div className=\"mt-4\">\r\n                                        <p className=\"text-sm\">{msg.content}</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ) : null // Dodaj odpowiednie zachowanie, gdy senderId jest null\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-center\">Brak wiadomości</p>\r\n                )}\r\n                </div>\r\n            </div>\r\n    \r\n            {/*Modal do odpowiedzi */}\r\n            {showReplyModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\"> Odpowiedź do {newMessage.receiver}</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                            />\r\n                            <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => setShowReplyModal(false)}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Modal do wysyłania wiadomości do wszystkich */}\r\n            {showSendToAllModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość do wszystkich</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessageToAll.title}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            placeholder=\"Treść\"\r\n                            value={newMessageToAll.content}\r\n                            onChange={(e) => setNewMessageToAll({...newMessageToAll, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendToAllModal(false);\r\n                                    setNewMessageToAll({title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessageToAll}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n    \r\n            {/* Modal do wysyłania wiadomości */}\r\n            {showSendModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center\">\r\n                    <div className=\"bg-maincolor1 p-6 rounded-lg shadow-md w-1/2\">\r\n                        <h2 className=\"text-lg font-bold mb-4\">Wyślij wiadomość</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Odbiorca\"\r\n                            value={newMessage.receiver}\r\n                            onChange={(e) => setNewMessage({...newMessage, receiver: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tytuł\"\r\n                            value={newMessage.title}\r\n                            onChange={(e) => setNewMessage({...newMessage, title: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Treść\"\r\n                            value={newMessage.content}\r\n                            onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\r\n                            className=\"w-full mb-4 p-2 border rounded bg-black text-maincolor4\"\r\n                        />\r\n                        <div className=\"flex justify-end space-x-2\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowSendModal(false);\r\n                                    setNewMessage({receiver: '', title: '', content: ''});\r\n                                }}\r\n                                className=\"bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600\"\r\n                            >\r\n                                Anuluj\r\n                            </button>\r\n                            <button\r\n                                onClick={sendMessage}\r\n                                className=\"bg-maincolor4 text-black px-4 py-2 rounded shadow hover:bg-opacity-80\"\r\n                            >\r\n                                Wyślij\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default PrivateMessages;","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\FirstOrb.js",["159","160"],[],"import React, { useState } from 'react'; // Import biblioteki React\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction FirstOrb({firsOrbActiveButton,  NewCreatureActiveButton}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n  const [choice, setChoice] = useState(null);\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n    const elements=[\r\n        \"water\",\r\n        \"fire\",\r\n        \"nature\",\r\n        \"light\",\r\n        \"dark\",\r\n    ]\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  const orbChecked =(element)=>{\r\n    setChoice(element);\r\n  }\r\n  const sendFirstOrb = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Brak tokenu w localStorage');\r\n        return;\r\n    }\r\n    console.log(\"cos\");\r\n    try{\r\n        console.log(\"cos1\");\r\n        const response = await fetch('http://localhost:8080/api/OrbDraw',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({orb: choice}),\r\n        });\r\n        console.log(\"cos2\");\r\n        if (!response.ok) {\r\n            throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n          }\r\n        const data = await response.json();\r\n        return data;\r\n    }catch(error){\r\n        console.error('Błąd podczas wysyłania danych:', error);\r\n        setResponseMessage('Wystąpił błąd podczas wysyłania danych.');\r\n    }\r\n    \r\n  };\r\n  const doubleFunctionClick = () =>\r\n  {\r\n    if(choice)\r\n    {\r\n        console.log(\"działa\");\r\n       \r\n        firsOrbActiveButton();\r\n        sendFirstOrb().then((response)=>{\r\n          NewCreatureActiveButton(response.NewCreature);\r\n        })\r\n    }\r\n  }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col justify-center\">\r\n      <div className=\"relative bg-maincolor1 w-3/4 h-[25vw] mt-[10vh] text-maincolor4  rounded-3xl border-2 p-4 flex flex-col justify-between text-2xl items-center\">\r\n      <div className=\"flex justify-between w-full h-2/3 items-center bg-black px-8  rounded-3xl bg-opacity-70\">\r\n        {elements.map((element, index) =>\r\n        <button onClick ={()=> orbChecked(element)}className={`w-1/6 h-[11.5vw] rounded-full hover:shadow-custom-main hover:bg-maincolor4 ${choice === element?\r\n            \"shadow-custom-main bg-maincolor4\":\"\"\r\n        }`}>\r\n    \r\n            <img src={`images/${element}orb.png`} alt={element}/>\r\n        </button>\r\n        )}\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <button onClick={doubleFunctionClick} className=\"px-9 py-2 bg-maincolor5 text-black1 rounded-lg hover:bg-maincolor4 transition\">\r\n            OK\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstOrb; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\NewCreatureWindow.js",["161","162","163"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next'; // Import hooka `useTranslation` z biblioteki do obsługi tłumaczeń\r\n\r\n// Komponent `Options`, który obsługuje wybór języka i posiada przycisk zamykający okno opcji\r\nfunction NewCreatureWindow({ newCreatureData , windowSwicher}) {\r\n  const { i18n } = useTranslation(); // Inicjalizacja tłumaczeń z `react-i18next`\r\n    const [photoName, setPhotoName] = useState(null);\r\n    const [name,setName] = useState();\r\n  // Funkcja obsługująca zmianę języka\r\n  const handleLanguageChange = (e) => {\r\n    i18n.changeLanguage(e.target.value); // Zmiana języka na wybrany w select\r\n  };\r\n  useEffect(() => {\r\n        const fetchSpeciesPhoto = async () => {\r\n            const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/speciesPhoto?speciesName=${newCreatureData.species}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`, // Wysłanie tokena w nagłówku\r\n                    },\r\n                });\r\n    \r\n                if (!response.ok) {\r\n                    console.error('Błąd pobierania danych obrazka:', response.statusText);\r\n                    return;\r\n                }\r\n                \r\n                const photo = await response.json();\r\n                setPhotoName(photo.photoName);\r\n                console.log(photoName);\r\n            } catch (error) {\r\n                console.error('Błąd podczas pobierania danych obrazka:', error);\r\n            }\r\n  \r\n        };\r\n    \r\n        fetchSpeciesPhoto(); // Wywołanie funkcji\r\n    }, []);\r\n    const sendNewName = async()=>\r\n    {\r\n        const token = localStorage.getItem('token'); // Pobranie tokena z localStorage\r\n            if (!token) {\r\n                console.warn('Brak tokenu w localStorage');\r\n                return;\r\n            }\r\n            try{\r\n                const response = await fetch('http://localhost:8080/api/setNewName',{\r\n                    method: 'POST',\r\n                    headers:{\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({newName: name,\r\n                    creatureid: newCreatureData._id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n                  }\r\n            }catch(error){\r\n                console.error('Błąd podczas wysyłania danych:', error);\r\n            }\r\n\r\n    }\r\n    const okClickActions = () =>\r\n    {\r\n        windowSwicher();\r\n        sendNewName();\r\n    }\r\n  // Wygląd i logika komponentu\r\n  return (\r\n    <div className=\"absolute bg-black1 bg-opacity-90 w-full h-screen items-center flex flex-col\">\r\n      {/* Główne okno opcji */}\r\n      <div className=\"relative bg-maincolor1 w-1/2 h-2/3 mt-[10vh] text-maincolor4 flex flex-col items-center rounded-3xl border-2 text-2xl space-y-4\">\r\n        {newCreatureData.species}\r\n        <div className=\"relative h-[27vw] aspect-square bg-black1 rounded-xl border-maincolor5 border-2\">\r\n        {photoName &&(\r\n        <img src={`images/${photoName}.png` } className=\"absolute w-full h-full object-cover rounded-xl\"/>\r\n        )\r\n        }\r\n        </div>\r\n        Nadaj imie:\r\n        <input type=\"text\" value={name} onChange={(e)=> setName(e.target.value)} className='bg-black text-maincolor4 border border-maincolor5 rounded-xl'/>\r\n        <button onClick={okClickActions} className='bottom-10 border-2 rounded-3xl w-1/6 border-maincolor5 hover:shadow-maincolor5 shadow-buttonshadow transition duration-300 hover:text-maincolor5'>OK</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewCreatureWindow; // Eksport komponentu","C:\\Users\\48664\\Desktop\\project\\client\\src\\components\\ContentComponents\\MarketPage.js",[],[],{"ruleId":"164","severity":1,"message":"165","line":1,"column":17,"nodeType":"166","messageId":"167","endLine":1,"endColumn":25},{"ruleId":"164","severity":1,"message":"168","line":1,"column":27,"nodeType":"166","messageId":"167","endLine":1,"endColumn":36},{"ruleId":"169","severity":1,"message":"170","line":68,"column":44,"nodeType":"171","messageId":"172","endLine":68,"endColumn":45,"suggestions":"173","suppressions":"174"},{"ruleId":"169","severity":1,"message":"175","line":68,"column":61,"nodeType":"171","messageId":"172","endLine":68,"endColumn":62,"suggestions":"176","suppressions":"177"},{"ruleId":"164","severity":1,"message":"178","line":125,"column":15,"nodeType":"166","messageId":"167","endLine":125,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":171,"column":6,"nodeType":"181","endLine":171,"endColumn":8,"suggestions":"182"},{"ruleId":"179","severity":1,"message":"183","line":105,"column":5,"nodeType":"181","endLine":105,"endColumn":7,"suggestions":"184"},{"ruleId":"164","severity":1,"message":"185","line":120,"column":11,"nodeType":"166","messageId":"167","endLine":120,"endColumn":15},{"ruleId":"186","severity":1,"message":"187","line":208,"column":9,"nodeType":"188","endLine":208,"endColumn":80},{"ruleId":"186","severity":1,"message":"187","line":298,"column":9,"nodeType":"188","endLine":298,"endColumn":80},{"ruleId":"179","severity":1,"message":"189","line":35,"column":8,"nodeType":"181","endLine":35,"endColumn":15,"suggestions":"190"},{"ruleId":"164","severity":1,"message":"191","line":8,"column":10,"nodeType":"166","messageId":"167","endLine":8,"endColumn":25},{"ruleId":"164","severity":1,"message":"192","line":17,"column":9,"nodeType":"166","messageId":"167","endLine":17,"endColumn":29},{"ruleId":"164","severity":1,"message":"192","line":10,"column":9,"nodeType":"166","messageId":"167","endLine":10,"endColumn":29},{"ruleId":"179","severity":1,"message":"193","line":44,"column":8,"nodeType":"181","endLine":44,"endColumn":10,"suggestions":"194"},{"ruleId":"186","severity":1,"message":"187","line":84,"column":9,"nodeType":"188","endLine":84,"endColumn":107},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["195","196"],["197"],"Unnecessary escape character: \\/.",["198","199"],["200"],"'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'creatures', 'itemsFromUser', and 'species'. Either include them or remove the dependency array.","ArrayExpression",["201"],"React Hook useEffect has a missing dependency: 'ShopData'. Either include it or remove the dependency array.",["202"],"'rect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["203"],"'responseMessage' is assigned a value but never used.","'handleLanguageChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'newCreatureData.species' and 'photoName'. Either include them or remove the dependency array.",["204"],{"messageId":"205","fix":"206","desc":"207"},{"messageId":"208","fix":"209","desc":"210"},{"kind":"211","justification":"212"},{"messageId":"205","fix":"213","desc":"207"},{"messageId":"208","fix":"214","desc":"210"},{"kind":"211","justification":"212"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"removeEscape",{"range":"223","text":"212"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"224","text":"225"},"Replace the `\\` with `\\\\` to include the actual backslash character.","directive","",{"range":"226","text":"212"},{"range":"227","text":"225"},"Update the dependencies array to be: [creatures, itemsFromUser, species]",{"range":"228","text":"229"},"Update the dependencies array to be: [ShopData]",{"range":"230","text":"231"},"Update the dependencies array to be: [fetchMessages, token]",{"range":"232","text":"233"},"Update the dependencies array to be: [newCreatureData.species, photoName]",{"range":"234","text":"235"},[2088,2089],[2088,2088],"\\",[2105,2106],[2105,2105],[5524,5526],"[creatures, itemsFromUser, species]",[3119,3121],"[ShopData]",[1553,1560],"[fetchMessages, token]",[1876,1878],"[newCreatureData.species, photoName]"]